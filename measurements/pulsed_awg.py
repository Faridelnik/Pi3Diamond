__version__ = '12.12.04'
import numpy as np

from enthought.traits.api import SingletonHasTraits, Instance, Property, Range, Float, Int, Bool, Array, List, Enum, Trait,\
                                 Button, on_trait_change, cached_property, Code
from enthought.traits.ui.api import View, Item, HGroup, VGroup, Tabbed, EnumEditor, RangeEditor, TextEditor
from enthought.enable.api import Component, ComponentEditor
from enthought.chaco.api import ArrayDataSource, LinePlot, LinearMapper, ArrayPlotData, Plot, CMapImagePlot
from enthought.chaco.tools.api import PanTool, ZoomTool
from enthought.chaco.tools.cursor_tool import CursorTool, CursorTool1D

import time

import logging

from tools.emod import ManagedJob

from tools.utility import GetSetItemsMixin

from hardware.api import PulseGenerator 
from hardware.api import Microwave 
from hardware.api import Microwave_HMC
from hardware.api import AWG, FastComtec

from hardware.awg import *
from hardware.waveform import *

PG = PulseGenerator()
MW = Microwave()
#MW = Microwave_HMC()
FC = FastComtec()
AWG = AWG()
#awg_device = AWG(('192.168.0.44', 4000))
#import SMIQ_2 as RF
def find_laser_pulses(sequence):
    n = 0
    prev = []
    for channels, t in sequence:
        if 'laser' in channels and not 'laser' in prev:
            n += 1
        prev = channels
        if 'sequence' in channels:
            break
    return n
    
    

class Pulsed(ManagedJob, GetSetItemsMixin):

    """Defines a pulsed measurement."""
    keep_data = Bool(False) # helper variable to decide whether to keep existing data

    resubmit_button = Button(label='resubmit', desc='Submits the measurement to the job manager. Tries to keep previously acquired data. Behaves like a normal submit if sequence or time bins have changed since previous run.')

    sequence = Instance(list, factory=list)
    
    record_length = Range(low=100, high=100000., value=3000, desc='length of acquisition record [ns]', label='record length [ns]', mode='text', auto_set=False, enter_set=True)
    bin_width = Range(low=0.1, high=1000., value=3.2, desc='data bin width [ns]', label='bin width [ns]', mode='text', auto_set=False, enter_set=True)
    
    n_laser = Int(2)
    n_bins = Int(2)
    time_bins = Array(value=np.array((0, 1)))
    
    count_data = Array(value=np.zeros((2, 2)))
    
    run_time = Float(value=0.0, label='run time [ns]', format_str='%.f')
    stop_time = Range(low=1., value=np.inf, desc='Time after which the experiment stops by itself [s]', label='Stop time [s]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e8, value=300., desc='tau begin [ns]', label='tau begin [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=1e8, value=4000., desc='tau end [ns]', label='tau end [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e8, value=50., desc='delta tau [ns]', label='delta tau [ns]', mode='text', auto_set=False, enter_set=True)

    tau = Array(value=np.array((0., 1.)))

    laser = Range(low=1., high=5e6, value=3000., desc='laser [ns]', label='laser [ns]', mode='text', auto_set=False, enter_set=True)
    wait = Range(low=1., high=5e6, value=5000., desc='wait [ns]', label='wait [ns]', mode='text', auto_set=False, enter_set=True)
    
    freq_center = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value=-26, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)

    sweeps = Range(low=1., high=1e10, value=1e6, desc='number of sweeps', label='sweeps', mode='text', auto_set=False, enter_set=True)
    expected_duration = Property(trait=Float, depends_on='sweeps,sequence', desc='expected duration of the measurement [s]', label='expected duration [s]')
    elapsed_sweeps = Float(value=0, desc='Elapsed Sweeps ', label='Elapsed Sweeps ', mode='text')
    elapsed_time = Float(value=0, desc='Elapsed Time [ns]', label='Elapsed Time [ns]', mode='text')
    progress = Int(value=0, desc='Progress [%]', label='Progress [%]', mode='text')

    load_button = Button(desc='compile and upload waveforms to AWG', label='load')
    reload = True


    def submit(self):
        """Submit the job to the JobManager."""
        self.keep_data = False
        ManagedJob.submit(self)

    def resubmit(self):
        """Submit the job to the JobManager."""
        self.keep_data = True
        ManagedJob.submit(self)

    def _resubmit_button_fired(self):
        """React to start button. Submit the Job."""
        self.resubmit() 

    def generate_sequence(self):
        return []
        
    def prepare_awg(self):
        """ override this """
        AWG.reset()
        
    def _load_button_changed(self):
        self.load()    
        
    def load(self):
        self.reload = True
        #AWG._server_init()
        #print 'come on'
        #make sure tau is updated
        
        self.tau = np.arange(self.tau_begin, self.tau_end, self.tau_delta) 
        self.freq_center=self.freq-0.1e+9
        self.prepare_awg()
        self.reload = False    
        
    @cached_property
    def _get_expected_duration(self):
        sequence_length = 0
        for step in self.sequence:
            sequence_length += step[1]
        return self.sweeps * sequence_length * 1e-9  
        
    def _get_sequence_points(self):
        return len(self.tau)    
     
    def apply_parameters(self):
        """Apply the current parameters and decide whether to keep previous data."""
        
        
        n_bins = int(self.record_length / self.bin_width)
        time_bins = self.bin_width * np.arange(n_bins)
        sequence = self.generate_sequence()
        """if load button is not used, make sure tau is generated"""
        if(self.tau.shape[0]==2):
            tau = np.arange(self.tau_begin, self.tau_end, self.tau_delta) 
            self.tau = tau         
        #sequence_points = len(tau)
        n_laser = find_laser_pulses(sequence)
        
        self.sequence_points = self._get_sequence_points()
        self.time_bins = time_bins
        self.n_bins = n_bins
        self.n_laser = n_laser
        
        if self.keep_data and sequence == self.sequence and np.all(time_bins == self.time_bins): # if the sequence and time_bins are the same as previous, keep existing data
            #print(1)
            self.old_count_data = self.count_data.copy()
            self.previous_sweeps = self.elapsed_sweeps
            self.previous_elapsed_time = self.elapsed_time
            self.keep_data = True # when job manager stops and starts the job, data should be kept. Only new submission should clear data.
        else:
            
            #self.old_count_data = np.zeros((n_laser, n_bins))
            FC.Configure(self.laser, self.bin_width, self.sequence_points)
            #self.check = True
            self.old_count_data = np.zeros(FC.GetData().shape)
            self.count_data = np.zeros(FC.GetData().shape)
            self.previous_sweeps = 0
            self.previous_elapsed_time = 0.0
            self.run_time = 0.0
            self.keep_data = True # when job manager stops and starts the job, data should be kept. Only new submission should clear data.
            
        self.sequence = sequence 
           

        
    def _run(self):
        """Acquire data."""

        try: # try to run the acquisition from start_up to shut_down
            self.state = 'run'
            self.apply_parameters()

            PG.High([])
            FC.SetCycles(np.inf)
            FC.SetTime(np.inf)
            FC.SetDelay(0)
            FC.SetLevel(0.6, 0.6)
            FC.Configure(self.laser, self.bin_width, self.sequence_points)
            #self.previous_time = 0
            #self.previous_count_data = FC.GetData()
            self.prepare_awg()
            MW.setFrequency(self.freq_center)
            MW.setPower(self.power)
            AWG.run()
            time.sleep(4.0)
            FC.Start()
            time.sleep(0.1)
            PG.Sequence(self.sequence, loop=True)

            start_time = time.time()

            while True:
               self.thread.stop_request.wait(5.0)
               if self.thread.stop_request.isSet():
                  logging.getLogger().debug('Caught stop signal. Exiting.')
                  break
               self.elapsed_time = self.previous_elapsed_time + time.time() - start_time
               self.run_time += self.elapsed_time
               runtime, cycles = FC.GetState()
               sweeps = cycles / FC.GetData().shape[0]
               self.elapsed_sweeps = self.previous_sweeps + sweeps
               self.progress = int( 100 * self.elapsed_sweeps / self.sweeps ) 
               self.count_data = self.old_count_data + FC.GetData()
               #print(FC.GetData()[0:20])
               if self.elapsed_sweeps > self.sweeps:
                  break   

            FC.Halt()
            time.sleep(0.1)
            MW.Off()
            time.sleep(0.1)
            PG.High(['laser', 'mw'])
            time.sleep(0.1)
            AWG.stop()
            time.sleep(1.0)
            if self.elapsed_sweeps < self.sweeps:
                self.state = 'idle'
            else:
                self.state='done'  
            
        except: # if anything fails, log the exception and set the state
            logging.getLogger().exception('Something went wrong in pulsed loop.')
            self.state = 'error'
            #AWG._server_close()
                

    get_set_items = ['__doc__', 'record_length','laser','wait', 'bin_width', 'n_bins', 'time_bins', 'n_laser', 'sequence', 'count_data', 'run_time','tau_begin', 'tau_end', 'tau_delta', 'tau','freq_center','power']
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', width=30),
                                     Item('power', width=20),
                                     ),       
                              HGroup(Item('laser', width=20),
                                     Item('wait', width=20),
                                     Item('bin_width', width= 20, enabled_when='state != "run"'),
                                     Item('record_length', width= 20, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f'),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                   
                              ),
                       title='Pulsed AWG Measurement',
                       )
                       
                       
class ODMR( Pulsed):
    """Rabi measurement.
    """ 
    #def _init_(self):
        #super(Rabi, self).__init__()
        
    reload = True
  
    tau_begin = Range(low=0., high=20e9, value=1.9e9, desc='freq begin [Hz]', label='freq begin [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=20e9, value=2.0e9, desc='freq end [Hz]', label='freq end [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e9, value=1e6, desc='delt freq [Hz]', label='delta freq [Hz]', mode='text', auto_set=False, enter_set=True)

    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)
    
    pi = Range(low=0., high=5e4, value=2e3, desc='pi pulse length', label='pi [ns]', mode='text', auto_set=False, enter_set=True)
    
    
    
    def prepare_awg(self):
        sampling = 1.2e9
        pi = int(self.pi * sampling / 1.0e9)
        
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.delete_all()
            
            zero = Idle(1)
            self.waves = []
            self.main_seq = Sequence('ODMR.SEQ')
            for i,t in enumerate(self.tau):
            
                drive_x = Sin(pi, (t - self.freq_center)/sampling, 0, self.amp)
                drive_y = Sin(pi, (t - self.freq_center)/sampling, np.pi/2,self.amp)
                
                x_name = 'X_RA_%03i.WFM' % i
                y_name = 'Y_RA_%03i.WFM' % i
                self.waves.append(Waveform(x_name, [zero, drive_x, zero]))
                self.waves.append(Waveform(y_name, [zero, drive_y, zero]))
                self.main_seq.append(*self.waves[-2:], wait=True)
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ODMR.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        

    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi = self.pi
        sequence = []
        for t in tau:
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , pi+100) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        #sequence.append(  ([                   ] , 12.5  )  )
        return sequence
        
    get_set_items = Pulsed.get_set_items + ['amp','vpp','pi']    
        
        
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),     
                             HGroup( Item('amp', width=-30),
                                     Item('vpp', width=-30),                                     
                                     Item('freq_center',  width=20),
                                     Item('power', width=-30),
                                     Item('pi', width=20),
                                     ),             
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='ODMR Measurement',
                       )
                       
class Rabi( Pulsed):
    """Rabi measurement.
    """ 
    #def _init_(self):
        #super(Rabi, self).__init__()
        
    reload = True
  
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)
    phase = Bool(False, label='phase',desc = 'true, Y pulse, false, X pulse')
    phase_1 = Range(low=0., high=3.1415, value=0.0, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)
    
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.delete_all()
            if self.phase:
                phase_1 = self.phase_1
            else:
                phase_1 = 0
            drive_x = Sin(0, (self.freq - self.freq_center)/sampling, 0,self.amp)
            drive_y = Sin(0, (self.freq - self.freq_center)/sampling, np.pi/2 + phase_1,self.amp)
            zero = Idle(1)
            
           
            
            self.waves = []
            self.main_seq = Sequence('RABI.SEQ')
            for i,t in enumerate(self.tau):
                t = int(t * sampling / 1.0e9)
                
                drive_x.duration = t
                drive_y.duration = t
                x_name = 'X_RA_%03i.WFM' % i
                y_name = 'Y_RA_%03i.WFM' % i
                self.waves.append(Waveform(x_name, [zero, drive_x, zero]))
                self.waves.append(Waveform(y_name, [zero, drive_y, zero]))
                self.main_seq.append(*self.waves[-2:], wait=True)
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RABI.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , t+200) )
            
            #sequence.append( (['laser'], laser) )
            #sequence.append( (['trigger'], 100) )
            sequence.append( (['laser', 'trigger'], laser) )
            # sequence.extend( [([], 20), (['laser'], 10)]*10 )
            sequence.append( ([ ]                 , wait) )
        #sequence.append(  ([                   ] , 12.5  )  )
        return sequence
        
    get_set_items = Pulsed.get_set_items + ['freq','amp','vpp','phase_1']    
        
        
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq',  width=20),
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),
                                     Item('phase',  width=20),
                                     Item('phase_1',  width=20),
                                     
                                     ),       
                             HGroup( Item('amp', width=20),
                                     Item('vpp', width=20),                                     
                                     Item('freq_center',  width=20),
                                     Item('power', width=20),
                                     ),             
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='Rabi Measurement',
                       )

class Sing_FID( Pulsed ):
    #FID 
    
    pi2_1   = Range(low=1., high=100000., value=99.35, desc='length of half pi pulse [ns]', label='half pi', mode='text', auto_set=False, enter_set=True)
    pi32_1   = Range(low=1., high=100000., value=99.35, desc='length of half pi pulse [ns]', label='3 half pi', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)    
    
    reload = True

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)   

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi2_1 + 0']     = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi2_1 + 90']    = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            p['pi32_1 + 0']     = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi32_1 + 90']    = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            
            zero = Idle(1)
            mod = Idle(0)
            
            pi2_1_i = [zero,p['pi2_1 + 0'],zero]
            pi2_1_q = [zero,p['pi2_1 + 90'],zero]
            
            pi32_1_i = [zero,p['pi32_1 + 0'],zero]
            pi32_1_q = [zero,p['pi32_1 + 90'],zero]
                  
            
            # Waveforms
            self.waves = []
            sub_seq = []
            self.main_seq = Sequence('FID.SEQ')
            
            sup_x = Waveform('Sup1_x', pi2_1_i)
            sup_y = Waveform('Sup1_y', pi2_1_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
                                 
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                 
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i

                map_x = Waveform(name_x, [mod]+pi2_1_i, t_0)
                map_y = Waveform(name_y, [mod]+pi2_1_q , t_0)
                self.waves.append(map_x)
                self.waves.append(map_y)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                if(repeat_1 == 0):
                    sub_seq.append(sup_x, sup_y)
                    sub_seq.append(map_x, map_y)
                    AWG.upload(sub_seq)
                else:
                    sub_seq.append(sup_x, sup_y)
                    sub_seq.append(evo, evo,repeat=repeat_1)
                    sub_seq.append(map_x, map_y)
                    AWG.upload(sub_seq)
      
                self.main_seq.append(sub_seq,wait=True)

                '''
                name_x = 'REF3_X%04i.WFM' % i
                name_y = 'REF3_Y%04i.WFM' % i
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                map_x = Waveform(name_x, [mod]+pi32_1_i, t_0)
                map_y = Waveform(name_y, [mod]+pi32_1_q , t_0)
                self.waves.append(map_x)
                self.waves.append(map_y)
                
                name = 'DQH3_12_%04i.SEQ' % i
                sub_seq1=Sequence(name)
                sub_seq1.append(sup_x, sup_y)
                sub_seq1.append(evo, evo,repeat=repeat_1)
                sub_seq1.append(map_x, map_y)
                AWG.upload(sub_seq1)
      
                self.main_seq.append(sub_seq1,wait=True)
                '''
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('FID.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       
        
    #def _get_sequence_points(self):
        #return 2 * len(self.tau)
        
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * pi2_1 + t*1.2 + 500 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
        
    get_set_items = Pulsed.get_set_items + ['freq','vpp','pi2_1','amp'] 
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq',  width=20),
                                     Item('pi2_1', width=-40),
                                     Item('pi32_1', width=-40),
                                     Item('amp', width=-40),
                                     Item('vpp', width=-40),                                     
                                     Item('freq_center',  width=20),
                                     Item('power', width=-40),
                                     ),       
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='FID',
                       )    
                      
class DQFID( Pulsed ):
    #DQFID measured with Optimal pulse
    
    freq_center = Range(low=1, high=20e9, value=2.61e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value= 10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.791676e9, desc='frequency 1st trans[Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.845829e9, desc='frequency 2nd trans [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.907644e9, desc='frequency 3nd trans [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2.955537e9, desc='frequency 4th trans [Hz]', label='freq4 [Hz]', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)    
    pi2_1   = Range(low=1., high=100000., value=99.35, desc='length of half pi pulse [ns]', label='half pi', mode='text', auto_set=False, enter_set=True)
    pi_1_m   = Range(low=1., high=100000., value=99.35, desc='length of half pi pulse [ns]', label=' pi minus', mode='text', auto_set=False, enter_set=True)
    
    reload = True

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            #pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            pi_1_p = int(self.pi_1_p * sampling/1.0e9)
            pi_1_m = int(self.pi_1_m * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi2_1 + 0']     = [Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,1)]
            p['pi2_1 + 90']    = [Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)]
            
            
            p['pi_2 - 0']     = [Sin( pi_1_m, (self.freq_2 - self.freq_center)/sampling, 0 ,1)]
            p['pi_2 - 90']    = [Sin( pi_1_m, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)]
            
            
            #p['pi32_1 + 0']     = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            #p['pi32_1 + 90']    = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            #p['pi - 0']     = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            #p['pi - 90']    = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)   
            

               
            zero = Idle(1)
            mod = Idle(0)
            
            p['dq_state + 0'] = [zero] + p['pi2_1 + 0'] + p['pi_2 - 0'] + [zero]
            p['dq_state + 90'] = [zero] + p['pi2_1 + 90'] + p['pi_2 - 90'] + [zero]
            
            p['dq_read + 0'] = [zero] + p['pi_2 - 0'] + p['pi2_1 + 0'] + [zero]
            p['dq_read + 90'] = [zero] + p['pi_2 - 90'] + p['pi2_1 + 90'] + [zero]
            
            f1 = (self.freq - self.freq_center)/sampling
            f2 = (self.freq_4 - self.freq_center)/sampling
            f3= (self.freq_2 - self.freq_center)/sampling
            f4 = (self.freq_3 - self.freq_center)/sampling
            
            p['pi2_1 + 0'] =[zero,
             Sin(114,f1,-2.0492,0.0133) + Sin(114,f2,-0.63969,0.0425), 
             Sin(114,f1,-3.0828,0.0994) + Sin(114,f2,-2.4806,0.2457), 
             Sin(114,f1,-2.5068,0.0849) + Sin(114,f2,-2.6092,0.2322), 
             Sin(114,f1,0.66035,0.0606) + Sin(114,f2,0.56694,0.2253), 
             Sin(114,f1,-0.16689,0.1164) + Sin(114,f2,0.3623,0.203), 
             Sin(114,f1,-1.9452,0.1139) + Sin(114,f2,0.78507,0.3013), 
             Sin(114,f1,-2.3355,0.1618) + Sin(114,f2,0.71203,0.2792), 
             Sin(114,f1,-0.84378,0.1532) + Sin(114,f2,-0.9063,0.2292), 
             Sin(114,f1,-1.4198,0.0807) + Sin(114,f2,-1.2185,0.2226), 
             Sin(114,f1,1.9992,0.1226) + Sin(114,f2,2.3278,0.2605), 
             Sin(114,f1,2.3392,0.1467) + Sin(114,f2,3.042,0.131), 
             Sin(114,f1,-1.0244,0.0137) + Sin(114,f2,-1.9823,0.0489),
             zero,
             ]
             
            p['pi2_1 + 90'] =  [zero,
             Sin(114,f1,-0.47843,0.0133) + Sin(114,f2,0.9311,0.0425), 
             Sin(114,f1,-1.512,0.0994) + Sin(114,f2,-0.90977,0.2457), 
             Sin(114,f1,-0.93599,0.0849) + Sin(114,f2,-1.0384,0.2322), 
             Sin(114,f1,2.2312,0.0606) + Sin(114,f2,2.1377,0.2253), 
             Sin(114,f1,1.4039,0.1164) + Sin(114,f2,1.9331,0.203), 
             Sin(114,f1,-0.37438,0.1139) + Sin(114,f2,2.3559,0.3013), 
             Sin(114,f1,-0.76473,0.1618) + Sin(114,f2,2.2828,0.2792), 
             Sin(114,f1,0.72702,0.1532) + Sin(114,f2,0.6645,0.2292), 
             Sin(114,f1,0.151,0.0807) + Sin(114,f2,0.35232,0.2226), 
             Sin(114,f1,3.57,0.1226) + Sin(114,f2,3.8986,0.2605), 
             Sin(114,f1,3.91,0.1467) + Sin(114,f2,4.6128,0.131), 
             Sin(114,f1,0.54644,0.0137) + Sin(114,f2,-0.41155,0.0489),
             zero,
             ]
            
            # Waveforms
            self.waves = []
            sub_seq = []
            self.main_seq = Sequence('FID.SEQ')
            
            sup_x = Waveform('Sup1_x', p['dq_state + 0'])
            sup_y = Waveform('Sup1_y', p['dq_state + 90'])
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
                                 
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                #mod.duration = t*1.2
                #map_x = Waveform(name_x, pi2_1_i + pi_1_i + [mod] + pi_1_i + pi2_1_i)
                #map_y = Waveform(name_y, pi2_1_q + pi_1_q + [mod] + pi_1_q + pi2_1_q)
                #self.waves.append(map_x)
                #self.waves.append(map_y)
                #self.main_seq.append(*self.waves[-2:], wait=True)
                
                map_x = Waveform(name_x, [mod] + p['dq_read + 0'], t_0)
                map_y = Waveform(name_y, [mod] + p['dq_read + 90'] , t_0)
                self.waves.append(map_x)
                self.waves.append(map_y)
               
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                #print repeat_1
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                self.main_seq.append(sub_seq,wait=True)
                
                '''
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name3_x = 'REF3_X%04i.WFM' % i
                name3_y = 'REF3_Y%04i.WFM' % i
                map3_x = Waveform(name3_x, [mod] + pi_1_i + pi32_1_i, t_0)
                map3_y = Waveform(name3_y, [mod] + pi_1_q + pi32_1_q , t_0)
                self.waves.append(map3_x)
                self.waves.append(map3_y)
                
                name = 'DQH3_12_%04i.SEQ' % i
                sub_seq1=Sequence(name)
                sub_seq1.append(sup_x, sup_y)
                #print repeat_1
                sub_seq1.append(evo, evo,repeat=repeat_1)
                sub_seq1.append(map3_x, map3_y)
                AWG.upload(sub_seq1)
                self.main_seq.append(sub_seq1,wait=True)
                '''
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('FID.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       
        
    #def _get_sequence_points(self):
        #return 2 * len(self.tau)        
        
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 12 * 2 * 144 + t*1.2 + 500 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
        
    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','vpp','amp'] 
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq_center',  width=20),
                                     Item('power', width=-40),
                                     Item('vpp', width=-40),   
                                     ),             
                              HGroup(Item('pi2_1',  width=20),
                                     Item('pi_1_m',  width=20),
                                     ),               
                              HGroup(Item('freq',  width=20),
                                     Item('freq_4',  width=20),
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),
                                     ),        
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='DQFID',
                       )    
                       
class DQHahn( Pulsed ):
    #FID 
    
    pi_1 = Range(low=1., high=100000., value=25.75, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    
    freq_center = Range(low=1, high=20e9, value=2.61e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value= 10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.791676e9, desc='frequency 1st trans[Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.845829e9, desc='frequency 2nd trans [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.907644e9, desc='frequency 3nd trans [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2.955537e9, desc='frequency 4th trans [Hz]', label='freq4 [Hz]', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)   
    echo = Bool(False, label='echo')
    tau1 = Range(low=1, high=50e4, value=20e4, desc='first tau in hahn echo [ns]', label='tau1 [ns]', mode='text', auto_set=False, enter_set=True)
    pulse_num = Range(low=1, high=10, value=1, desc='number of pi pulses', label='pulse_number', mode='text', auto_set=False, enter_set=True)
    
    reload = True

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            p = {}
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)

            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center)/sampling
            f2 = (self.freq_4 - self.freq_center)/sampling
            f3= (self.freq_2 - self.freq_center)/sampling
            f4 = (self.freq_3 - self.freq_center)/sampling
            
            p['pi2_1 + 0'] =[zero,
             Sin(144,f1,0.58502,0.0644) + Sin(144,f2,0.98288,0.2048) + Sin(144,f3,0.84418,0.0638) + Sin(144,f4,2.8056,0.0468), 
             Sin(144,f1,2.4556,0.1166) + Sin(144,f2,-2.4733,0.2602) + Sin(144,f3,2.2039,0.1053) + Sin(144,f4,-0.54015,0.1309), 
             Sin(144,f1,0.30188,0.0314) + Sin(144,f2,-2.4032,0.0408) + Sin(144,f3,1.1345,0.026) + Sin(144,f4,-1.7801,0.0844), 
             Sin(144,f1,-1.7929,0.1055) + Sin(144,f2,-0.70983,0.2369) + Sin(144,f3,-0.89037,0.1231) + Sin(144,f4,2.2407,0.143), 
             Sin(144,f1,-2.3232,0.1208) + Sin(144,f2,2.0975,0.2198) + Sin(144,f3,-0.72607,0.1339) + Sin(144,f4,0.63346,0.1307), 
             Sin(144,f1,2.8156,0.1091) + Sin(144,f2,2.2244,0.1981) + Sin(144,f3,-0.70008,0.078) + Sin(144,f4,0.40838,0.1244), 
             Sin(144,f1,1.124,0.0408) + Sin(144,f2,-2.1718,0.2391) + Sin(144,f3,-2.2472,0.0994) + Sin(144,f4,0.78618,0.1556), 
             Sin(144,f1,0.56336,0.0386) + Sin(144,f2,1.6896,0.1126) + Sin(144,f3,1.3494,0.0892) + Sin(144,f4,2.7348,0.0889), 
             Sin(144,f1,-1.5601,0.0926) + Sin(144,f2,0.53787,0.2381) + Sin(144,f3,-0.52609,0.0837) + Sin(144,f4,-2.3477,0.162), 
             Sin(144,f1,-0.22492,0.0845) + Sin(144,f2,2.4013,0.2521) + Sin(144,f3,0.93335,0.0376) + Sin(144,f4,2.1803,0.0874),
             zero,
             ]
             
            p['pi2_1 + 90'] =  [zero,
             Sin(144,f1,2.1558,0.0644) + Sin(144,f2,2.5537,0.2048) + Sin(144,f3,2.415,0.0638) + Sin(144,f4,4.3764,0.0468), 
             Sin(144,f1,4.0264,0.1166) + Sin(144,f2,-0.90253,0.2602) + Sin(144,f3,3.7747,0.1053) + Sin(144,f4,1.0306,0.1309), 
             Sin(144,f1,1.8727,0.0314) + Sin(144,f2,-0.83236,0.0408) + Sin(144,f3,2.7053,0.026) + Sin(144,f4,-0.20933,0.0844), 
             Sin(144,f1,-0.22209,0.1055) + Sin(144,f2,0.86097,0.2369) + Sin(144,f3,0.68043,0.1231) + Sin(144,f4,3.8115,0.143), 
             Sin(144,f1,-0.75245,0.1208) + Sin(144,f2,3.6683,0.2198) + Sin(144,f3,0.84473,0.1339) + Sin(144,f4,2.2043,0.1307), 
             Sin(144,f1,4.3864,0.1091) + Sin(144,f2,3.7952,0.1981) + Sin(144,f3,0.87071,0.078) + Sin(144,f4,1.9792,0.1244), 
             Sin(144,f1,2.6948,0.0408) + Sin(144,f2,-0.60103,0.2391) + Sin(144,f3,-0.6764,0.0994) + Sin(144,f4,2.357,0.1556), 
             Sin(144,f1,2.1342,0.0386) + Sin(144,f2,3.2603,0.1126) + Sin(144,f3,2.9202,0.0892) + Sin(144,f4,4.3056,0.0889), 
             Sin(144,f1,0.010662,0.0926) + Sin(144,f2,2.1087,0.2381) + Sin(144,f3,1.0447,0.0837) + Sin(144,f4,-0.77691,0.162), 
             Sin(144,f1,1.3459,0.0845) + Sin(144,f2,3.9721,0.2521) + Sin(144,f3,2.5041,0.0376) + Sin(144,f4,3.7511,0.0874),
             zero,
             ]

            p['pi_1_x + 0']  =  [zero,
             Sin(144,f1,-3.0272,0.0906) + Sin(144,f2,1.2209,0.1381) + Sin(144,f3,-0.42223,0.0798) + Sin(144,f4,-1.3039,0.0986), 
             Sin(144,f1,-1.6724,0.0879) + Sin(144,f2,0.085045,0.1316) + Sin(144,f3,1.2122,0.0849) + Sin(144,f4,3.0422,0.0942), 
             Sin(144,f1,-0.74191,0.0924) + Sin(144,f2,-0.86147,0.1751) + Sin(144,f3,0.45337,0.0474) + Sin(144,f4,-2.4789,0.0253), 
             Sin(144,f1,-0.23816,0.0692) + Sin(144,f2,-1.1028,0.1199) + Sin(144,f3,-1.8609,0.0948) + Sin(144,f4,-0.060748,0.1075), 
             Sin(144,f1,1.094,0.1099) + Sin(144,f2,-2.5506,0.192) + Sin(144,f3,2.3547,0.1253) + Sin(144,f4,2.3039,0.1487), 
             Sin(144,f1,-2.9368,0.0931) + Sin(144,f2,1.1593,0.164) + Sin(144,f3,2.1845,0.1118) + Sin(144,f4,2.4336,0.1436), 
             Sin(144,f1,-1.5646,0.0839) + Sin(144,f2,-0.15412,0.1063) + Sin(144,f3,0.47073,0.098) + Sin(144,f4,-2.3465,0.1136), 
             Sin(144,f1,-0.92989,0.0864) + Sin(144,f2,-0.70524,0.1776) + Sin(144,f3,2.6941,0.0693) + Sin(144,f4,1.8458,0.0873), 
             Sin(144,f1,-0.092414,0.0859) + Sin(144,f2,-1.4111,0.1212) + Sin(144,f3,2.8217,0.0737) + Sin(144,f4,1.6342,0.0956), 
             Sin(144,f1,1.3031,0.0947) + Sin(144,f2,-2.7334,0.1481) + Sin(144,f3,-1.714,0.0893) + Sin(144,f4,-0.54677,0.1168),
             zero,
             ]
           
            p['pi_1_x + 90']  =  [zero,
             Sin(144,f1,-1.4564,0.0906) + Sin(144,f2,2.7917,0.1381) + Sin(144,f3,1.1486,0.0798) + Sin(144,f4,0.26693,0.0986), 
             Sin(144,f1,-0.10164,0.0879) + Sin(144,f2,1.6558,0.1316) + Sin(144,f3,2.783,0.0849) + Sin(144,f4,4.613,0.0942), 
             Sin(144,f1,0.82889,0.0924) + Sin(144,f2,0.70933,0.1751) + Sin(144,f3,2.0242,0.0474) + Sin(144,f4,-0.90806,0.0253), 
             Sin(144,f1,1.3326,0.0692) + Sin(144,f2,0.46796,0.1199) + Sin(144,f3,-0.2901,0.0948) + Sin(144,f4,1.51,0.1075), 
             Sin(144,f1,2.6648,0.1099) + Sin(144,f2,-0.97978,0.192) + Sin(144,f3,3.9255,0.1253) + Sin(144,f4,3.8747,0.1487), 
             Sin(144,f1,-1.366,0.0931) + Sin(144,f2,2.7301,0.164) + Sin(144,f3,3.7553,0.1118) + Sin(144,f4,4.0044,0.1436), 
             Sin(144,f1,0.0062236,0.0839) + Sin(144,f2,1.4167,0.1063) + Sin(144,f3,2.0415,0.098) + Sin(144,f4,-0.77566,0.1136), 
             Sin(144,f1,0.64091,0.0864) + Sin(144,f2,0.86556,0.1776) + Sin(144,f3,4.2649,0.0693) + Sin(144,f4,3.4166,0.0873), 
             Sin(144,f1,1.4784,0.0859) + Sin(144,f2,0.15974,0.1212) + Sin(144,f3,4.3925,0.0737) + Sin(144,f4,3.205,0.0956), 
             Sin(144,f1,2.8739,0.0947) + Sin(144,f2,-1.1626,0.1481) + Sin(144,f3,-0.14324,0.0893) + Sin(144,f4,1.024,0.1168),
             zero,
             ]
             
            p['pi_1_y + 0']  = [zero,
             Sin(144,f1,-1.9922,0.092) + Sin(144,f2,1.3292,0.1128) + Sin(144,f3,-1.9593,0.077) + Sin(144,f4,1.1364,0.1139), 
             Sin(144,f1,2.3702,0.0812) + Sin(144,f2,2.1255,0.1545) + Sin(144,f3,-0.5567,0.0356) + Sin(144,f4,0.83149,0.156), 
             Sin(144,f1,0.73038,0.0645) + Sin(144,f2,-2.6246,0.1219) + Sin(144,f3,-2.8995,0.0189) + Sin(144,f4,0.26301,0.1036), 
             Sin(144,f1,-0.46764,0.0796) + Sin(144,f2,-0.93844,0.2602) + Sin(144,f3,-0.99456,0.0629) + Sin(144,f4,-1.7286,0.1064), 
             Sin(144,f1,-0.74064,0.1544) + Sin(144,f2,1.1127,0.212) + Sin(144,f3,2.6836,0.1032) + Sin(144,f4,1.7583,0.0989), 
             Sin(144,f1,-1.4509,0.1147) + Sin(144,f2,0.092757,0.1475) + Sin(144,f3,-2.3353,0.1337) + Sin(144,f4,-2.9825,0.0802), 
             Sin(144,f1,-1.4749,0.0304) + Sin(144,f2,2.6842,0.2155) + Sin(144,f3,-2.272,0.1182) + Sin(144,f4,0.54843,0.1352), 
             Sin(144,f1,-1.2921,0.0173) + Sin(144,f2,-1.3872,0.1922) + Sin(144,f3,-1.0942,0.0913) + Sin(144,f4,-1.6233,0.0462), 
             Sin(144,f1,2.6,0.037) + Sin(144,f2,-0.69261,0.2663) + Sin(144,f3,-0.37382,0.0872) + Sin(144,f4,-1.7959,0.041), 
             Sin(144,f1,-0.31932,0.0993) + Sin(144,f2,0.25357,0.1832) + Sin(144,f3,1.976,0.088) + Sin(144,f4,2.5221,0.0701),
             zero,
             ]
           
            p['pi_1_y + 90']  = [zero,
             Sin(144,f1,-0.42139,0.092) + Sin(144,f2,2.9,0.1128) + Sin(144,f3,-0.38847,0.077) + Sin(144,f4,2.7072,0.1139), 
             Sin(144,f1,3.941,0.0812) + Sin(144,f2,3.6963,0.1545) + Sin(144,f3,1.0141,0.0356) + Sin(144,f4,2.4023,0.156), 
             Sin(144,f1,2.3012,0.0645) + Sin(144,f2,-1.0538,0.1219) + Sin(144,f3,-1.3287,0.0189) + Sin(144,f4,1.8338,0.1036), 
             Sin(144,f1,1.1032,0.0796) + Sin(144,f2,0.63236,0.2602) + Sin(144,f3,0.57624,0.0629) + Sin(144,f4,-0.15779,0.1064), 
             Sin(144,f1,0.83016,0.1544) + Sin(144,f2,2.6835,0.212) + Sin(144,f3,4.2544,0.1032) + Sin(144,f4,3.3291,0.0989), 
             Sin(144,f1,0.1199,0.1147) + Sin(144,f2,1.6636,0.1475) + Sin(144,f3,-0.7645,0.1337) + Sin(144,f4,-1.4117,0.0802), 
             Sin(144,f1,0.095882,0.0304) + Sin(144,f2,4.255,0.2155) + Sin(144,f3,-0.70122,0.1182) + Sin(144,f4,2.1192,0.1352), 
             Sin(144,f1,0.27868,0.0173) + Sin(144,f2,0.18358,0.1922) + Sin(144,f3,0.47657,0.0913) + Sin(144,f4,-0.052475,0.0462), 
             Sin(144,f1,4.1708,0.037) + Sin(144,f2,0.87818,0.2663) + Sin(144,f3,1.197,0.0872) + Sin(144,f4,-0.22511,0.041), 
             Sin(144,f1,1.2515,0.0993) + Sin(144,f2,1.8244,0.1832) + Sin(144,f3,3.5468,0.088) + Sin(144,f4,4.0928,0.0701),
             zero,
             ]
            
            # Waveforms
            self.waves = []
            sub_seq = []
            self.main_seq = Sequence('Hahn.SEQ')
            
            sup_x = Waveform('Sup1_x', p['pi2_1 + 0'])
            sup_y = Waveform('Sup1_y', p['pi2_1 + 90'])
            self.waves.append(sup_x)
            self.waves.append(sup_y)
          
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
           
            if(self.echo):
                # CPMG sequence
                t_1 = self.tau1*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF3_X%04i.WFM' % 0
                name_y = 'REF3_Y%04i.WFM' % 0
                
                ref1_x = Waveform(name_x, [mod]+ p['pi_1_x + 0'], t_0)
                ref1_y = Waveform(name_y, [mod]+ p['pi_1_x + 90'], t_0)
                self.waves.append(ref1_x)
                self.waves.append(ref1_y)
                for i, t in  enumerate(self.tau):
                    t_0 = sup_x.duration + repeat_1 * 256
                    t_echo = t*1.2 - ref1_x.stub
                    repeat_echo = int(t_echo / 256)
                    mod.duration = int(t_echo % 256)
                    t_0 += ref1_x.duration + repeat_echo * 256
                    
                    name_x = 'MAP3_X%04i.WFM' % i
                    name_y = 'MAP3_Y%04i.WFM' % i
                
                    map_x = Waveform(name_x, [mod]+ p['pi2_1 + 0'], t_0)
                    map_y = Waveform(name_y, [mod]+ p['pi2_1 + 90'], t_0)
                    
                    self.waves.append(map_x)
                    self.waves.append(map_y)
                    
                    name = 'DQH_12_%04i.SEQ' % i
                    sub_seq=Sequence(name)
                    sub_seq.append(sup_x, sup_y)
                    sub_seq.append(evo, evo,repeat=repeat_1)
                    sub_seq.append(ref1_x, ref1_y)
                    sub_seq.append(evo, evo,repeat=repeat_echo)
                    sub_seq.append(map_x, map_y)
                    AWG.upload(sub_seq)
                    
                    self.main_seq.append(sub_seq,wait=True)
            else:
                for i, t in  enumerate(self.tau):
                    if(i < len(self.tau) - 10):
                        t_1 = t*1.2 - sup_x.stub
                        repeat_1 = int(t_1 / 256)
                        mod.duration = int(t_1 % 256)
                        t_0 = sup_x.duration + repeat_1 * 256
                        
                        
                        name = 'DQH_12_%04i.SEQ' % i
                        sub_seq=Sequence(name)
                        sub_seq.append(sup_x, sup_y)
                        sub_seq.append(evo, evo,repeat=repeat_1)
                        
                        
                        for k in range(self.pulse_num-1):
                        
                            name_x = 'REF' + "%1.0f"% k + '_X%04i.WFM' % i
                            name_y = 'REF' + "%1.0f"% k + '_Y%04i.WFM' % i
                            
                            ref_x = Waveform(name_x, [mod]+p['pi_1_x + 0'], t_0)
                            ref_y = Waveform(name_y, [mod]+p['pi_1_x + 90'], t_0)
                            self.waves.append(ref_x)
                            self.waves.append(ref_y)
                        
                            t_2 = 2 * t * 1.2 - ref_x.stub
                            repeat_2 = int(t_2 / 256)
                            mod.duration = int(t_2 % 256)
                            t_0 += ref_x.duration + repeat_2 * 256
                            
                            sub_seq.append(ref_x, ref_y)
                            sub_seq.append(evo, evo,repeat=repeat_2)
                        '''   
                            
                        name_x = 'REF' + "%1.0f"% 0 + '_X%04i.WFM' % i
                        name_y = 'REF' + "%1.0f"% 0 + '_Y%04i.WFM' % i
                        
                        ref_x = Waveform(name_x, [mod]+p['pi_1 + 0'], t_0)
                        ref_y = Waveform(name_y, [mod]+p['pi_1 + 90'], t_0)
                        self.waves.append(ref_x)
                        self.waves.append(ref_y)
                    
                        t_2 = 2 * t * 1.2 - ref_x.stub
                        repeat_2 = int(t_2 / 256)
                        mod.duration = int(t_2 % 256)
                        t_0 += ref_x.duration + repeat_2 * 256
                        '''
                        
                        name_x = 'REF' + "%1.0f"% (self.pulse_num-1) + '_X%04i.WFM' % i
                        name_y = 'REF' + "%1.0f"% (self.pulse_num-1) + '_Y%04i.WFM' % i
                        
                        ref2_x = Waveform(name_x, [mod]+p['pi_1_x + 0'], t_0)
                        ref2_y = Waveform(name_y, [mod]+p['pi_1_x + 90'], t_0)
                        self.waves.append(ref2_x)
                        self.waves.append(ref2_y)
                        
                        t_3 = t * 1.2 - ref2_x.stub
                        repeat_3 = int(t_3 / 256)
                        mod.duration = int(t_3 % 256)
                        t_0 += ref2_x.duration + repeat_3 * 256
                        
                        
                        sub_seq.append(ref2_x, ref2_y)
                        sub_seq.append(evo, evo,repeat=repeat_3)
                        '''
                        name_x = 'REF1_X%04i.WFM' % i
                        name_y = 'REF1_Y%04i.WFM' % i
                        
                        ref2_x = Waveform(name_x, [mod]+p['pi_1 + 0'], t_0)
                        ref2_y = Waveform(name_y, [mod]+p['pi_1 + 90'], t_0)
                        self.waves.append(ref2_x)
                        self.waves.append(ref2_y)
                        '''
                        
                        name_x = 'MAP3_X%04i.WFM' % i
                        name_y = 'MAP3_Y%04i.WFM' % i
                    
                        map_x = Waveform(name_x, [mod]+p['pi2_1 + 0'], t_0)
                        map_y = Waveform(name_y, [mod]+p['pi2_1 + 90'], t_0)
                        self.waves.append(map_x)
                        self.waves.append(map_y)
                        
                        #name = 'DQH_12_%04i.SEQ' % i
                        #sub_seq=Sequence(name)
                        #sub_seq.append(sup_x, sup_y)
                        #sub_seq.append(evo, evo,repeat=repeat_1)
                        #sub_seq.append(ref_x, ref_y)
                        #sub_seq.append(evo, evo,repeat=repeat_2)
                        #sub_seq.append(ref2_x, ref2_y)
                        #sub_seq.append(evo, evo,repeat=repeat_3)
                        sub_seq.append(map_x, map_y)
                        AWG.upload(sub_seq)
                        
                        self.main_seq.append(sub_seq,wait=True)
                    if(i > len(self.tau) - 6):
                        ref4_x = Waveform('Ref_x', p['pi + 0'])
                        ref4_y = Waveform('Ref_y', p['pi + 90'])
                        self.waves.append(ref4_x)
                        self.waves.append(ref4_y)
                        self.main_seq.append(*self.waves[-2:], wait=True)  
                    
               
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('Hahn.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       
        
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        npulse = self.pulse_num
        sequence = []
        
        if(self.echo):
            for t in tau:
                    sub = [ (['awgTrigger'], 100 ),
                            ([], 2 * 12 *114 + 10*108 + self.tau1 + t + 500 ),
                            (['laser', 'trigger' ], laser ),
                            ([], wait )
                          ]
                    sequence.extend(sub)
            return sequence
        else:
            for i, t in  enumerate(tau):
                if(i < len(tau) - 10):
                    sub = [ (['awgTrigger'], 100 ),
                            ([], 2 * 10 *144 + npulse*10*108+ 2 * npulse * t + 500 ),
                            (['laser', 'trigger' ], laser ),
                            ([], wait )
                          ]
                    sequence.extend(sub)
                elif(len(tau) - 11 <i < len(tau) - 5):
                    sub =  [ (['laser', 'trigger' ], laser ),
                             ([], wait )]
                    sequence.extend(sub)
                else:
                    sub = [ (['awgTrigger'], 100 ),
                            ([], self.pi_1 + 200 ),
                            (['laser', 'trigger' ], laser ),
                            ([], wait )
                              ]
                    sequence.extend(sub)
            return sequence
            
    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','pulse_num','vpp','amp'] 
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('amp', width=-40),
                                     Item('vpp', width=-40),                                     
                                     Item('freq_center',  width=20),
                                     Item('power', width=-40),
                                     ),       
                              HGroup(Item('freq',  width=20),
                                     Item('freq_4',  width=20),
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),
                                     ), 
                             HGroup(Item('echo', enabled_when='state != "run"'), 
                                    Item('tau1', width=20), 
                                    Item('pulse_num', width=20), 
                                    Item('pi_1', width=20), 
                                    ),
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='DQHahn',
                       )      
  
                       
'''       
class DQHahn( Pulsed ):
    """ Double-quantum Hahn-Echo """

    pi2_1 = Range(low=1., high=100000., value=25, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi32_1 = Range(low=1., high=100000., value=75, desc='length of 3*pi/2 pulse [ns]', label='3*pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=49, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        pi_1=self.pi_1
        pi_2=self.pi_2
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + pi_1 + 2 * pi2_1 + 4 * pi_2 + 800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + pi_1 + 2 * pi2_1 + 4 * pi_2 + 800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return 2*len(self.tau)

    def _line_plot_data_default(self):
        x = self.tau
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens[:n/2]
            yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y, yp=yp)
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'time [ns]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot

    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens[:n/2])
        self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi32_1', 'pi_1', 'pi_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi32_1', width=25),
                                         Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='DQ Hahn', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi_2',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['3pi/2 + 0']   = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['3pi/2 + 90']  = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            
            p['pi - 0']   = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']  = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            zero = Idle(1)
            


            
            waves = []

            mod = Idle(0)
            

            
            sup_x=Waveform('SUP1_X.WFM', [p['pi/2 + 0'],p['pi - 0'] ] )
            sup_y=Waveform('SUP1_Y.WFM', [p['pi/2 + 90'],p['pi - 90'] ])
            waves.append(sup_x)
            waves.append(sup_y)
            
            
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+[p['pi - 0'],p['pi + 0'],p['pi - 0'] ] , t_0)
                ref_y = Waveform(name_y, [mod]+[p['pi - 90'],p['pi + 90'],p['pi - 90']] , t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+[p['pi - 0'],p['3pi/2 + 0']], t_0)
                map_y = Waveform(name_y, [mod]+[p['pi - 90'],p['3pi/2 + 90']], t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
                
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF3_X%04i.WFM' % i
                name_y = 'REF3_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+[p['pi - 0'],p['pi + 0'],p['pi - 0']] , t_0)
                ref_y = Waveform(name_y, [mod]+[p['pi - 90'],p['pi + 90'],p['pi - 90']] , t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP3_X%04i.WFM' % i
                name_y = 'MAP3_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+[p['pi - 0'],p['pi/2 + 0']], t_0)
                map_y = Waveform(name_y, [mod]+[p['pi - 90'],p['pi/2 + 90']], t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH3_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
                
                
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')

        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )       
'''        

        
class OptPulseTest( Pulsed ):
    """Optimal pulse test measurement."""

    pi_1 = Range(low=1., high=100000., value=50.0, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=54.9, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=0.6, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)    
    evolution = Range(low=0., high=10000000., value=500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    freq_center = Range(low=1, high=20e9, value=2.71e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value= 10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.784617e9, desc='frequency 1st trans[Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.848743e9, desc='frequency 2nd trans [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.906787e9, desc='frequency 3nd trans [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2.963224e9, desc='frequency 4th trans [Hz]', label='freq4 [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_begin = Range(low=0., high=1e3, value=1., desc='tau begin [ns]', label='pulse begin', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=1e3, value=40., desc='tau end [ns]', label='pulse end', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e3, value=1., desc='delta tau [ns]', label='pulse tau', mode='text', auto_set=False, enter_set=True)
    label = Range(low=0, high=1e3, value=0, desc='delta tau [ns]', label='pulse index', mode='text', auto_set=False, enter_set=True)
    
    p_opt_i = []
    p_opt_q = []

    def generate_sequence(self):
        pi_1 = self.pi_1
        pi_3 = self.pi_3
        laser = self.laser
        wait = self.wait
        tau = self.tau
        evolution = self.evolution
        sequence = []
        sequence.append( (['awgTrigger']   ,    100) )
        sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        sequence.append( (['awgTrigger']   ,    100) )
        sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in tau:
            
            if(t>2):
            
                #sequence.append( (['awgTrigger']      , 100) )
                #sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )
                for k in range(int(t)):
                    sequence.append( (['awgTrigger']      , 100) )
                    sequence.append( ([ ]                 , 120*10 + evolution) )
                #sequence.append( (['awgTrigger']      , 100) )
                #sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )

                sequence.append( (['laser', 'trigger'], laser) )
                sequence.append( ([ ]                 , wait) )
        return sequence    
         
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi_1 + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi_1 + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi_3 + 0']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi_3 + 90']    = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp)

            p_opt_sim_i = []
            p_opt_sim_q = []
            
            zero = Idle(1)
            mod = Idle(0)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            f3 = (self.freq_2 - self.freq_center) / sampling
            f4 = (self.freq_3 - self.freq_center) / sampling
            datfile = 'D:/data/ProgGate/tomo/seq/diag/pi_pulse_test_2.61e9.dat'
            fileHandle = open (datfile) 
            #read the cotend of the file
            datfilelines=fileHandle.read()
            exec datfilelines 
            fileHandle.close() 
            
            self.p_opt_i = p_opt_sim_i
            self.p_opt_q = p_opt_sim_q
            p1_i = []
            p1_q = []
            
            '''
            p1_i = [zero,
             Sin(120,f1,1.344,0.063) + Sin(120,f2,1.5737,0.114) + Sin(120,f3,-2.7231,0.079) + Sin(120,f4,-2.0281,0.084), 
             Sin(120,f1,-0.40953,0.094) + Sin(120,f2,2.6768,0.131) + Sin(120,f3,2.3196,0.09) + Sin(120,f4,-0.70055,0.095), 
             Sin(120,f1,-0.78604,0.131) + Sin(120,f2,2.7841,0.151) + Sin(120,f3,0.78675,0.12) + Sin(120,f4,0.77596,0.152), 
             Sin(120,f1,-2.6556,0.099) + Sin(120,f2,-1.5871,0.156) + Sin(120,f3,0.51551,0.103) + Sin(120,f4,0.80575,0.168), 
             Sin(120,f1,2.3409,0.139) + Sin(120,f2,-0.86116,0.196) + Sin(120,f3,-1.3193,0.092) + Sin(120,f4,2.4946,0.089), 
             Sin(120,f1,1.4579,0.083) + Sin(120,f2,-0.030972,0.14) + Sin(120,f3,-2.2011,0.043) + Sin(120,f4,2.3137,0.026), 
             Sin(120,f1,1.1858,0.085) + Sin(120,f2,-0.74551,0.206) + Sin(120,f3,0.61107,0.107) + Sin(120,f4,0.25129,0.091), 
             Sin(120,f1,2.1776,0.122) + Sin(120,f2,-0.86621,0.204) + Sin(120,f3,2.0905,0.103) + Sin(120,f4,-0.55959,0.104), 
             Sin(120,f1,2.9169,0.099) + Sin(120,f2,-2.1887,0.16) + Sin(120,f3,-2.6786,0.1) + Sin(120,f4,-2.3427,0.169), 
             Sin(120,f1,-0.78802,0.115) + Sin(120,f2,2.7582,0.16) + Sin(120,f3,-2.4557,0.102) + Sin(120,f4,-2.4074,0.151), 
             Sin(120,f1,-0.54047,0.085) + Sin(120,f2,2.3608,0.133) + Sin(120,f3,-0.4242,0.076) + Sin(120,f4,2.1683,0.096), 
             Sin(120,f1,0.83529,0.075) + Sin(120,f2,1.1662,0.108) + Sin(120,f3,-0.19899,0.055) + Sin(120,f4,2.6077,0.028),
             zero,
             ]
            p1_q = [zero,
             Sin(120,f1,2.9148,0.063) + Sin(120,f2,3.1445,0.114) + Sin(120,f3,-1.1523,0.079) + Sin(120,f4,-0.45731,0.084), 
             Sin(120,f1,1.1613,0.094) + Sin(120,f2,4.2476,0.131) + Sin(120,f3,3.8904,0.09) + Sin(120,f4,0.87024,0.095), 
             Sin(120,f1,0.78475,0.131) + Sin(120,f2,4.3549,0.151) + Sin(120,f3,2.3575,0.12) + Sin(120,f4,2.3468,0.152), 
             Sin(120,f1,-1.0848,0.099) + Sin(120,f2,-0.016316,0.156) + Sin(120,f3,2.0863,0.103) + Sin(120,f4,2.3765,0.168), 
             Sin(120,f1,3.9117,0.139) + Sin(120,f2,0.70963,0.196) + Sin(120,f3,0.25152,0.092) + Sin(120,f4,4.0654,0.089), 
             Sin(120,f1,3.0287,0.083) + Sin(120,f2,1.5398,0.14) + Sin(120,f3,-0.63034,0.043) + Sin(120,f4,3.8845,0.026), 
             Sin(120,f1,2.7566,0.085) + Sin(120,f2,0.82529,0.206) + Sin(120,f3,2.1819,0.107) + Sin(120,f4,1.8221,0.091), 
             Sin(120,f1,3.7484,0.122) + Sin(120,f2,0.70458,0.204) + Sin(120,f3,3.6613,0.103) + Sin(120,f4,1.0112,0.104), 
             Sin(120,f1,4.4877,0.099) + Sin(120,f2,-0.61795,0.16) + Sin(120,f3,-1.1078,0.1) + Sin(120,f4,-0.77189,0.169), 
             Sin(120,f1,0.78277,0.115) + Sin(120,f2,4.329,0.16) + Sin(120,f3,-0.88495,0.102) + Sin(120,f4,-0.83657,0.151), 
             Sin(120,f1,1.0303,0.085) + Sin(120,f2,3.9316,0.133) + Sin(120,f3,1.1466,0.076) + Sin(120,f4,3.7391,0.096), 
             Sin(120,f1,2.4061,0.075) + Sin(120,f2,2.737,0.108) + Sin(120,f3,1.3718,0.055) + Sin(120,f4,4.1785,0.028),
             zero,
             ]
            '''
            p1_i = self.p_opt_i[int(self.label)]
            p1_q = self.p_opt_q[int(self.label)]
            
                   
            # Waveforms

            self.waves = []
            #sub_seq = []
            self.main_seq = Sequence('Opt.SEQ')
            
            ref_x = Waveform('Ref1_x', Idle(1))
            ref_y = Waveform('Ref1_y', Idle(1))
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            self.main_seq.append(*self.waves[-2:], wait=True)  
            
            ref_x = Waveform('Ref_x', [p['pi_1 + 0'],p['pi_3 + 0']])
            ref_y = Waveform('Ref_y', [p['pi_1 + 90'],p['pi_3 + 90']])
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            self.main_seq.append(*self.waves[-2:], wait=True)  
            '''
            if(self.label == 100):
                opt_x = Waveform('Opt_x', p1_i)
                opt_y = Waveform('Opt_y', p1_q)
            else:
                #opt_x = Waveform('Opt_x', p1_i)
                #opt_y = Waveform('Opt_y', p1_q)
                opt_x = Waveform('Opt_x', self.p_opt_i[int(self.label)])
                opt_y = Waveform('Opt_y', self.p_opt_q[int(self.label)])
            self.waves.append(opt_x)
            self.waves.append(opt_y)
            '''
            

            for i in self.tau:
                
                if(i > 2):
                    
                    
                    name_x = 'Ref_x%04i.WFM'% i
                    name_y = 'Ref_y%04i.WFM'% i
                    ref_x = Waveform(name_x, [p['pi_1 + 0'],p['pi_3 + 0']])
                    ref_y = Waveform(name_y, [p['pi_1 + 90'],p['pi_3 + 90']])
                    self.waves.append(ref_x)
                    self.waves.append(ref_y)
                    self.main_seq.append(*self.waves[-2:], wait=True)
                    
                                       
                    
                    
                    #pus_i = []
                    #pus_q = []
                    #for k in range(int(i-2)):
                        #pus_i += p1_i + [evo]
                        #pus_q += p1_q + [evo]
                    name_x = 'Opt_x%04i.WFM' % i
                    name_y = 'Opt_y%04i.WFM' % i
                    opt_x = Waveform(name_x, p1_i)
                    opt_y = Waveform(name_y, p1_q)
                    self.waves.append(opt_x)
                    self.waves.append(opt_y)
                    for k in range(int(i-2)):
                        self.main_seq.append(*self.waves[-2:], wait=True)  
                    
                    name_x = 'Ref1_x%04i.WFM'% i
                    name_y = 'Ref1_y%04i.WFM'% i
                    ref_x = Waveform(name_x, [p['pi_1 + 0'],p['pi_3 + 0']])
                    ref_y = Waveform(name_y, [p['pi_1 + 90'],p['pi_3 + 90']])
                    self.waves.append(ref_x)
                    self.waves.append(ref_y)
                    self.main_seq.append(*self.waves[-2:], wait=True) 
                    
                    
                    
                   
                    
                    
                    
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('Opt.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','pi_1','pi_3','vpp','amp','label'] 
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq_center',  width=20),
                                     Item('power', width=-40)
                                     ),       
                              HGroup(Item('freq',  width=20),
                                     Item('freq_4',  width=20),     
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),                                       
                                     ),       
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('amp', width=-40),
                                     Item('vpp', width=-40),
                                     Item('evolution', width=30),
                                     Item('pi_1', width=30),
                                     Item('pi_3', width=30),
                                     ),       
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     Item('label', width= 30),
                                     ),          

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='Opt test',
                       )       
class OptPulseCom( Pulsed ):
    """Optimal pulse test measurement."""

    pi_1 = Range(low=1., high=100000., value=50.0, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=54.9, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=0.6, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)    
    evolution = Range(low=0., high=10000000., value=500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    freq_center = Range(low=1, high=20e9, value=2.61e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value= 10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.784617e9, desc='frequency 1st trans[Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.848743e9, desc='frequency 2nd trans [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.906787e9, desc='frequency 3nd trans [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2.963224e9, desc='frequency 4th trans [Hz]', label='freq4 [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_begin = Range(low=0., high=1e3, value=1., desc='tau begin [ns]', label='pulse begin', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=55, value=50., desc='tau end [ns]', label='pulse end', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e3, value=1., desc='delta tau [ns]', label='pulse tau', mode='text', auto_set=False, enter_set=True)
    repeat = Range(low=1., high=1e2, value=10, desc='delta tau [ns]', label='pulse repeat', mode='text', auto_set=False, enter_set=True)
    pulsestart = Range(low=0, high=1e2, value=0, desc='the number of pulse', label='pulse start', mode='text', auto_set=False, enter_set=True)
    
    flag = Bool(False, desc='true for 1 state, false for 0 state', label='state choose')
    
    p_opt_i = []
    p_opt_q = []

    def generate_sequence(self):
        pi_1 = self.pi_1
        pi_3 = self.pi_3
        laser = self.laser
        wait = self.wait
        tau = self.tau
        evolution = self.evolution
        sequence = []
        # Reference signal
        sequence.append( (['awgTrigger']   ,    100) )
        sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        sequence.append( (['awgTrigger']   ,    100) )
        sequence.append( ([]  ,                 pi_1 + pi_3 + 400) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        
        if self.flag:
            for t in tau:
                
                if(t>2):
                
                    for k in range(int(self.repeat + 2)):
                        sequence.append( (['awgTrigger']      , 100) )
                        sequence.append( ([ ]                 , 85 * 16 + evolution) )
                    sequence.append( (['laser', 'trigger'], laser) )
                    sequence.append( ([ ]                 , wait) )
        else:
            for t in tau:
                
                if(t>2):
                    for k in range(int(self.repeat)):
                        sequence.append( (['awgTrigger']      , 100) )
                        sequence.append( ([ ]                 , 85 * 16 + evolution) )
                    sequence.append( (['laser', 'trigger'], laser) )
                    sequence.append( ([ ]                 , wait) )
        return sequence    
        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi_1 + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi_1 + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi_3 + 0']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi_3 + 90']    = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp)

            p_opt_sim_i = []
            p_opt_sim_q = []
            
            zero = Idle(1)
            mod = Idle(0)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            f3 = (self.freq_2 - self.freq_center) / sampling
            f4 = (self.freq_3 - self.freq_center) / sampling
            
            datfile = 'D:/data/ProgGate/tomo/seq/diag/pi_pulse_test_2.61e9.dat'
            fileHandle = open (datfile) 
            #read the cotend of the file
            datfilelines=fileHandle.read()
            exec datfilelines 
            fileHandle.close() 
            
            self.p_opt_i = p_opt_sim_i
            self.p_opt_q = p_opt_sim_q

            # Waveforms

            self.waves = []
            #sub_seq = []
            self.main_seq = Sequence('Opt.SEQ')
            
            ref_x = Waveform('Ref1_x', Idle(1))
            ref_y = Waveform('Ref1_y', Idle(1))
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            self.main_seq.append(*self.waves[-2:], wait=True)  
            
            ref_x = Waveform('Ref_x', [p['pi_1 + 0'],p['pi_3 + 0']])
            ref_y = Waveform('Ref_y', [p['pi_1 + 90'],p['pi_3 + 90']])
            #ref_x = Waveform('Ref_x', p['pi_1 + 0'])
            #ref_y = Waveform('Ref_y', p['pi_1 + 90'])
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            self.main_seq.append(*self.waves[-2:], wait=True)  
            
            if self.flag:
                for i in self.tau:
                
                    if(i>2):
                        # prepare initial state
                        name_x = 'Ref_x%04i.WFM'% i
                        name_y = 'Ref_y%04i.WFM'% i
                        ref_x = Waveform(name_x, [p['pi_1 + 0'],p['pi_3 + 0']])
                        ref_y = Waveform(name_y, [p['pi_1 + 90'],p['pi_3 + 90']])
                        #ref_x = Waveform(name_x, p['pi_1 + 0'])
                        #ref_y = Waveform(name_y, p['pi_1 + 90'])
                        self.waves.append(ref_x)
                        self.waves.append(ref_y)
                        self.main_seq.append(*self.waves[-2:], wait=True)  
                        
                        # optimal pulse and its repetition
                        name_x = 'Opt_x%04i.WFM' % i
                        name_y = 'Opt_y%04i.WFM' % i
                        opt_x = Waveform(name_x, self.p_opt_i[int(i-3 + self.pulsestart)])
                        opt_y = Waveform(name_y, self.p_opt_q[int(i-3 + self.pulsestart)])
                        self.waves.append(opt_x)
                        self.waves.append(opt_y)
                        for k in range(int(self.repeat)):
                            self.main_seq.append(*self.waves[-2:], wait=True)  
                            
                        # read final state    
                        name_x = 'Ref1_x%04i.WFM'% i
                        name_y = 'Ref1_y%04i.WFM'% i
                        #ref_x = Waveform('Ref_x', p['pi_1 + 0'])
                        #ref_y = Waveform('Ref_y', p['pi_1 + 90'])
                        ref_x = Waveform(name_x, [p['pi_1 + 0'],p['pi_3 + 0']])
                        ref_y = Waveform(name_y, [p['pi_1 + 90'],p['pi_3 + 90']])
                        self.waves.append(ref_x)
                        self.waves.append(ref_y)
                        self.main_seq.append(*self.waves[-2:], wait=True)     
            else:
                for i in self.tau:
                
                    if(i>2):
                                                
                        # optimal pulse and its repetition
                        name_x = 'Opt_x%04i.WFM' % i
                        name_y = 'Opt_y%04i.WFM' % i
                        opt_x = Waveform(name_x, self.p_opt_i[int(i-3 + self.pulsestart)])
                        opt_y = Waveform(name_y, self.p_opt_q[int(i-3 + self.pulsestart)])
                        self.waves.append(opt_x)
                        self.waves.append(opt_y)
                        for k in range(int(self.repeat)):
                            self.main_seq.append(*self.waves[-2:], wait=True)  
                            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('Opt.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','pi_1','pi_3','vpp','amp','repeat'] 
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq_center',  width=20),
                                     Item('power', width=-40)
                                     ),       
                              HGroup(Item('freq',  width=20),
                                     Item('freq_4',  width=20),     
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),                                       
                                     ),       
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('amp', width=-40),
                                     Item('vpp', width=-40),
                                     Item('evolution', width=30),
                                     Item('pi_1', width=30),
                                     Item('pi_3', width=30),
                                     ),       
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     Item('repeat', width= 30),
                                     Item('pulsestart', width= 30),
                                     ),          

                              HGroup(Item('flag', enabled_when='state != "run"'),
                                     Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='Opt pulse compare',
                       )                               
                        
class EspinTomoMainSeq(Pulsed):

    freq_center = Range(low=1, high=20e9, value=2.61e9, desc='frequency [Hz]', label='MW frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    power = Range(low=-100., high=25., value= 10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.791676e9, desc='frequency 1st trans[Hz]', label='freq1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.845829e9, desc='frequency 2nd trans [Hz]', label='freq2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.907644e9, desc='frequency 3nd trans [Hz]', label='freq3 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2.954935e9, desc='frequency 4th trans [Hz]', label='freq4 [Hz]', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True)    
    tau_begin = Range(low=0., high=1e8, value=500., desc='tau begin [ns]', label='tau begin [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=1e8, value=4000., desc='tau end [ns]', label='tau end < tau1 [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e8, value=50., desc='delta tau [ns]', label='delta tau [ns]', mode='text', auto_set=False, enter_set=True)
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
   
    reload = True
    
    def _init_(self):
        super(EspinTomoMainSeq, self).__init__()

    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        
        for t in tau:
            sequence.append( (['awgTrigger']         , 100) )
            sequence.append( ([ ]                 , 235e3) )
            sequence.append( (['laser']                 , laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
       
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            f1 = (self.freq - self.freq_center)/sampling
            f2 = (self.freq_4 - self.freq_center)/sampling
            f3= (self.freq_2 - self.freq_center)/sampling
            f4 = (self.freq_3 - self.freq_center)/sampling
                        
                        
            # Pulses
            zero = Idle(1)
            mod = Idle(0)
            p = {}
            # ms= 0 <> ms = +1            
            datfile = 'D:/data/ProgGate/tomo/seq/diag/tomo_seq_diag.py'
            fileHandle = open (datfile) 
            #read the cotend of the file
            datfilelines=fileHandle.read()
            exec datfilelines 
            fileHandle.close() 
            
            
            
           
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            sub_seq=[]           
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
            # Reference
            name_x = '01_I.WFM' 
            name_y = '01_Q.WFM'             
            sup_x = Waveform(name_x, Idle(256))
            sup_y = Waveform(name_y, Idle(256))
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_01.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)
          
            name_x = '02_I.WFM' 
            name_y = '02_Q.WFM'             
            sup_x = Waveform(name_x, p['pi_p + 0 2'])
            sup_y = Waveform(name_y, p['pi_p + 90 2'])
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_02.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)
            
            name_x = '03_I.WFM' 
            name_y = '03_Q.WFM'             
            sup_x = Waveform(name_x, p['pi_p + 0 1'])
            sup_y = Waveform(name_y, p['pi_p + 90 1'])
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_03.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)
            
            name_x = '04_I.WFM' 
            name_y = '04_Q.WFM'             
            dup_x = Waveform(name_x, p['pi_p + 0 12'])
            dup_y = Waveform(name_y, p['pi_p + 90 12'])
            self.waves.append(dup_x)
            self.waves.append(dup_y)
            name = 'Tomo_04.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(dup_x, dup_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)

            
            evol = Idle(int(self.evolution * sampling / 1.0e9))
            #ent_i=dqpi2_i+[evol]+dqpi_i+[evol]+dqdqpi2_i
            #ent_q=dqpi2_q+[evol]+dqpi_q+[evol]+dqdqpi2_q
            
            # Diagonal local
            name_x = 'State_I.WFM' 
            name_y = 'State_Q.WFM' 
            
            ent_i = [zero,
             Sin(144,f1,1.0365,0.0538) + Sin(144,f2,-2.1901,0.24) + Sin(144,f3,0.87071,0.0705) + Sin(144,f4,2.6443,0.047), 
             Sin(144,f1,1.4952,0.1044) + Sin(144,f2,-0.72233,0.2852) + Sin(144,f3,2.3666,0.1182) + Sin(144,f4,-0.59501,0.1399), 
             Sin(144,f1,2.8598,0.0677) + Sin(144,f2,-2.1682,0.2425) + Sin(144,f3,0.83881,0.0216) + Sin(144,f4,-1.9607,0.0684), 
             Sin(144,f1,-0.31058,0.115) + Sin(144,f2,3.1241,0.2154) + Sin(144,f3,-0.84237,0.1188) + Sin(144,f4,2.2606,0.1412), 
             Sin(144,f1,1.3228,0.068) + Sin(144,f2,3.0344,0.204) + Sin(144,f3,-0.67652,0.1257) + Sin(144,f4,0.6866,0.1296), 
             Sin(144,f1,1.2594,0.0671) + Sin(144,f2,3.1002,0.2041) + Sin(144,f3,-0.58392,0.0678) + Sin(144,f4,0.44782,0.1248), 
             Sin(144,f1,-0.26647,0.1106) + Sin(144,f2,-3.1323,0.2203) + Sin(144,f3,-2.2392,0.1009) + Sin(144,f4,0.81273,0.1571), 
             Sin(144,f1,2.8699,0.0799) + Sin(144,f2,-2.0513,0.226) + Sin(144,f3,1.409,0.0892) + Sin(144,f4,2.814,0.0999), 
             Sin(144,f1,1.4254,0.1104) + Sin(144,f2,-0.74988,0.2807) + Sin(144,f3,-0.6178,0.0817) + Sin(144,f4,-2.3294,0.1594), 
             Sin(144,f1,0.93995,0.0248) + Sin(144,f2,-2.0959,0.2179) + Sin(144,f3,1.6364,0.0315) + Sin(144,f4,2.254,0.0945),
             zero,
             ]
            ent_q = [zero,
             Sin(144,f1,2.6073,0.0538) + Sin(144,f2,-0.61935,0.24) + Sin(144,f3,2.4415,0.0705) + Sin(144,f4,4.2151,0.047), 
             Sin(144,f1,3.066,0.1044) + Sin(144,f2,0.84846,0.2852) + Sin(144,f3,3.9374,0.1182) + Sin(144,f4,0.97579,0.1399), 
             Sin(144,f1,4.4306,0.0677) + Sin(144,f2,-0.59745,0.2425) + Sin(144,f3,2.4096,0.0216) + Sin(144,f4,-0.38989,0.0684), 
             Sin(144,f1,1.2602,0.115) + Sin(144,f2,4.6949,0.2154) + Sin(144,f3,0.72842,0.1188) + Sin(144,f4,3.8314,0.1412), 
             Sin(144,f1,2.8936,0.068) + Sin(144,f2,4.6052,0.204) + Sin(144,f3,0.89427,0.1257) + Sin(144,f4,2.2574,0.1296), 
             Sin(144,f1,2.8302,0.0671) + Sin(144,f2,4.671,0.2041) + Sin(144,f3,0.98688,0.0678) + Sin(144,f4,2.0186,0.1248), 
             Sin(144,f1,1.3043,0.1106) + Sin(144,f2,-1.5615,0.2203) + Sin(144,f3,-0.66843,0.1009) + Sin(144,f4,2.3835,0.1571), 
             Sin(144,f1,4.4407,0.0799) + Sin(144,f2,-0.48051,0.226) + Sin(144,f3,2.9798,0.0892) + Sin(144,f4,4.3848,0.0999), 
             Sin(144,f1,2.9962,0.1104) + Sin(144,f2,0.82092,0.2807) + Sin(144,f3,0.953,0.0817) + Sin(144,f4,-0.75857,0.1594), 
             Sin(144,f1,2.5107,0.0248) + Sin(144,f2,-0.52508,0.2179) + Sin(144,f3,3.2072,0.0315) + Sin(144,f4,3.8248,0.0945),
             zero,
             ]
            
            sup_x = Waveform(name_x, ent_i)
            sup_y = Waveform(name_y, ent_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            t_0 = sup_x.duration
                      
            
            
            name_x = '05_I.WFM' 
            name_y = '05_Q.WFM'             
            ref_x = Waveform(name_x, [zero])
            ref_y = Waveform(name_y, [zero])
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_05.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)
            
            name_x = '06_I.WFM' 
            name_y = '06_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi_p + 0 2'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi_p + 90 2'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_06.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)            
            
            name_x = '07_I.WFM' 
            name_y = '07_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi_m + 0 2'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi_m + 90 2'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_07.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            name_x = '08_I.WFM' 
            name_y = '08_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi_p + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi_p + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_08.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  

            name_x = '09_I.WFM' 
            name_y = '09_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi_m + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi_m + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_09.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)              
            
            #global
            t_0 = sup_x.duration
            name_x = '10_1_I.WFM' 
            name_y = '10_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi/2_p + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi/2_p + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = self.evolution*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '10_2_I.WFM' 
            name_y = '10_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_p + 0 12'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_p + 90 12'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '10_3_I.WFM' 
            name_y = '10_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi/2_p + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi/2_p + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_10.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '11_2_I.WFM' 
            name_y = '11_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_p + 0 1'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_p + 90 1'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '11_3_I.WFM' 
            name_y = '11_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi_p + 0 2']+[Idle(250)]+p['pi/2_p + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi_p + 90 2']+[Idle(250)]+p['pi/2_p + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_11.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
                
            t_0 = sup_x.duration
            name_x = '12_1_I.WFM' 
            name_y = '12_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi/2_m + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi/2_m + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = self.evolution*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '12_2_I.WFM' 
            name_y = '12_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_m + 0 12'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_m + 90 12'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '12_3_I.WFM' 
            name_y = '12_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi/2_m + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi/2_m + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_12.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '13_2_I.WFM' 
            name_y = '13_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_m + 0 1'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_m + 90 1'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 = ref2_x.duration + repeat_2 * 256
            name_x = '13_3_I.WFM' 
            name_y = '13_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi_m + 0 2']+[Idle(250)]+p['pi/2_m + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi_m + 90 2']+[Idle(250)]+p['pi/2_m + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_13.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
           
            t_0 = sup_x.duration
            name_x = '14_1_I.WFM' 
            name_y = '14_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi/2_p + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi/2_p + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = self.evolution*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '14_2_I.WFM' 
            name_y = '14_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_pm + 0 12'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_pm + 90 12'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '14_3_I.WFM' 
            name_y = '14_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi/2_p + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi/2_p + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_14.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '15_2_I.WFM' 
            name_y = '15_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_p + 0 1'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_p + 90 1'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '15_3_I.WFM' 
            name_y = '15_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi_m + 0 2']+[Idle(250)]+p['pi/2_p + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi_m + 90 2']+[Idle(250)]+p['pi/2_p + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_15.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            name_x = '16_1_I.WFM' 
            name_y = '16_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p['pi/2_m + 0 1'],t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p['pi/2_m + 90 1'],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = self.evolution*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '16_2_I.WFM' 
            name_y = '16_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_mp + 0 12'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_mp + 90 12'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '16_3_I.WFM' 
            name_y = '16_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi/2_m + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi/2_m + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_16.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '17_2_I.WFM' 
            name_y = '17_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod]+p['pi_m + 0 1'],t_0 )
            ref2_y = Waveform(name_y, [mod]+p['pi_m + 90 1'],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = self.evolution*1.2-ref2_x.stub
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '17_3_I.WFM' 
            name_y = '17_3_Q.WFM'  
            map_x = Waveform(name_x, [mod]+p['pi_p + 0 2']+[Idle(250)]+p['pi/2_m + 0 1']+[Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod]+p['pi_p + 90 2']+[Idle(250)]+p['pi/2_m + 90 1']+[Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_17.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            self.main_seq.append(sub_seq,wait=True)  
            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )                       
        
        get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','vpp','amp','evolution']
        traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq_center',  width=20),
                                     Item('power', width=-40),
                                     Item('vpp', width=-40),   
                                     Item('evolution', width = 20)
                                     ),             
                              HGroup(Item('freq',  width=20),
                                     Item('freq_4',  width=20),
                                     Item('freq_2',  width=20),
                                     Item('freq_3',  width=20),
                                     ),        
                              HGroup(Item('laser', width=30),
                                     Item('wait', width=30),
                                     Item('bin_width', width= 30, enabled_when='state != "run"'),
                                     Item('record_length', width= 30, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=30),
                                     Item('tau_end', width=30),
                                     Item('tau_delta', width= 30),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=30),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=30),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=30),
                                     ),
                                                                         
                              ),
                       title='DEER_pair',
                       )                       
                       
'''     
class DoubleRabi( Pulsed ):
    """Drive two transitions simultaneously.
    """
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    show_fit = Bool(False, label='show fit')

    fit_parameters = Property( trait=Array, depends_on='norm_intens' )

    rabi_period = Property( trait=Float, depends_on='fit_parameters', label='period' )
    rabi_offset = Property( trait=Float, depends_on='fit_parameters', label='offset' )
    rabi_contrast = Property( trait=Float, depends_on='fit_parameters', label='contrast' )
    t_pi2 = Property( trait=Float, depends_on='fit_parameters', label='pi/2' )
    t_pi = Property( trait=Float, depends_on='fit_parameters', label='pi' )
    t_3pi2 = Property( trait=Float, depends_on='fit_parameters', label='3pi/2' )
    
    #amp_ratio = Range(low=0, high=1e12, value=1.0, desc='ratio of amplitudes amp_2/amp_1', label='amp2/amp1', mode='text', auto_set=False, enter_set=True)
    amp2 = Range(low=0, high=1.0, value=.5, desc='waveform amp 2', label='WFM amp2', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.922544e+09, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    reload = True
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , t+600) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        #sequence.append(  ([                   ] , 12.5  )  )
        return sequence

    def _norm_intens_changed(self): # _overwrite norm_intens_changed to provide live update of fit
        self.line_plot_data.set_data('y', self.norm_intens)
        if self.show_fit and self.norm_intens is not None:
            self.line_plot_data.set_data('fit', Fit.Cosinus(*self.fit_parameters)(self.tau))

    def _show_fit_changed(self):
        plot = self.line_plot
        if self.show_fit == False:
            while len(plot.components) > 1:
                plot.remove(plot.components[-1])
        else:
            self.line_plot_data.set_data('fit', Fit.Cosinus(*self.fit_parameters)(self.tau))
            plot.plot(('x','fit'), style='line', color='red')
        plot.request_redraw()

    @cached_property
    def _get_fit_parameters(self):
        if self.norm_intens is None:
            return None
        else:
            y_offset=self.norm_intens.mean()

            x = self.tau
            y = self.norm_intens - y_offset

            try:
                p = Fit.Fit(x, y, Fit.CosinusNoOffset, Fit.CosinusNoOffsetEstimator)
            except:
                return None
            if p[0] < 0:
                p[0] = -p[0]
                p[2] =  ( ( p[2]/p[1] + 0.5 ) % 1 ) * p[1]
                try:
                    p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)
                except:
                    return None
                #        if p[2] / p[1] < 0:
#            p[2] = (p[2] / p[1] + 1) * p[1]
#            p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)

            p = (p[0], p[1], p[2], y_offset)
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            while(p[2]>0.5*p[1]):
                p[2] -= p[1]
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            return p

    @cached_property
    def _get_rabi_period(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[1]

    @cached_property
    def _get_rabi_offset(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[2]

    @cached_property
    def _get_rabi_contrast(self):
        if self.fit_parameters is None:
            return np.nan
        return 100*self.fit_parameters[0]/self.fit_parameters[3]

    @cached_property
    def _get_t_pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.25*T + x0

    @cached_property
    def _get_t_pi(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.5*T + x0
    
    @cached_property
    def _get_t_3pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.75*T+x0
        
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'power', 'amp', 'start_time', 'end_time', 'time_step','freq_center',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data', 'amp2', 'freq_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         'rabi_period', 'rabi_offset', 'rabi_contrast',
                         't_pi2', 't_pi', 't_3pi2', '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('amp2', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('start_time', width=40),
                                         Item('end_time', width=40),
                                         Item('time_step', width=40),),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 HGroup( Item('show_fit'),
                                         Item('rabi_contrast', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.1f%%'%x), width=40),
                                         Item('rabi_period', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_3pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('rabi_offset', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Double Rabi', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            #AWG.delete_all()
            f1 = (self.freq - self.freq_center)/sampling
            f2 = (self.freq_2 - self.freq_center)/sampling
            
            amp1 = self.amp #/ (1 + self.amp_ratio)
            amp2 = self.amp2 #/ (1 + 1 / self.amp_ratio)
            
            drive_x = Sin(0, f1,0 , amp1) + Sin(0, f2 , 0, amp2)
            drive_y = Sin(0, f1, np.pi/2, amp1) + Sin(0, f2 , np.pi/2, amp2)
            zero = Idle(1)
            self.waves = []
            self.main_seq = Sequence('RABI.SEQ')
            for i,t in enumerate(self.tau):
                t = int(t * sampling / 1.0e9)
                drive_x.duration = t
                drive_y.duration = t
                x_name = 'X_RA_%03i.WFM' % i
                y_name = 'Y_RA_%03i.WFM' % i
                self.waves.append(Waveform(x_name, [zero, drive_x, zero]))
                self.waves.append(Waveform(y_name, [zero, drive_y, zero]))
                self.main_seq.append(*self.waves[-2:], wait=True)
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RABI.SEQ')
            AWG.tell('*WAI')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        AWG.tell('*WAI')
        AWG.run()
        AWG.stop()

class DoubleRabiRelPhase( Pulsed ):
    """Drive two transitions simultaneously.
    """
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    show_fit = Bool(False, label='show fit')

    fit_parameters = Property( trait=Array, depends_on='norm_intens' )

    rabi_period = Property( trait=Float, depends_on='fit_parameters', label='period' )
    rabi_offset = Property( trait=Float, depends_on='fit_parameters', label='offset' )
    rabi_contrast = Property( trait=Float, depends_on='fit_parameters', label='contrast' )
    t_pi2 = Property( trait=Float, depends_on='fit_parameters', label='pi/2' )
    t_pi = Property( trait=Float, depends_on='fit_parameters', label='pi' )
    t_3pi2 = Property( trait=Float, depends_on='fit_parameters', label='3pi/2' )
    
    #amp_ratio = Range(low=0, high=1e12, value=1.0, desc='ratio of amplitudes amp_2/amp_1', label='amp2/amp1', mode='text', auto_set=False, enter_set=True)
    amp2 = Range(low=0, high=1.0, value=.5, desc='waveform amp 2', label='WFM amp2', mode='text', auto_set=False, enter_set=True)
    rel_phase = Range(low=-360, high=360, value=0, desc='relative phase difference between 2 mw signals', label='rel. Phase', mode='text', auto_set=False, enter_set=True)
    
    freq_2 = Range(low=1, high=20e9, value=2.922544e+09, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    reload = True
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , t+600) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        #sequence.append(  ([                   ] , 12.5  )  )
        return sequence

    def _norm_intens_changed(self): # _overwrite norm_intens_changed to provide live update of fit
        self.line_plot_data.set_data('y', self.norm_intens)
        if self.show_fit and self.norm_intens is not None:
            self.line_plot_data.set_data('fit', Fit.Cosinus(*self.fit_parameters)(self.tau))

    def _show_fit_changed(self):
        plot = self.line_plot
        if self.show_fit == False:
            while len(plot.components) > 1:
                plot.remove(plot.components[-1])
        else:
            self.line_plot_data.set_data('fit', Fit.Cosinus(*self.fit_parameters)(self.tau))
            plot.plot(('x','fit'), style='line', color='red')
        plot.request_redraw()

    @cached_property
    def _get_fit_parameters(self):
        if self.norm_intens is None:
            return None
        else:
            y_offset=self.norm_intens.mean()

            x = self.tau
            y = self.norm_intens - y_offset

            try:
                p = Fit.Fit(x, y, Fit.CosinusNoOffset, Fit.CosinusNoOffsetEstimator)
            except:
                return None
            if p[0] < 0:
                p[0] = -p[0]
                p[2] =  ( ( p[2]/p[1] + 0.5 ) % 1 ) * p[1]
                try:
                    p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)
                except:
                    return None
                #        if p[2] / p[1] < 0:
#            p[2] = (p[2] / p[1] + 1) * p[1]
#            p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)

            p = (p[0], p[1], p[2], y_offset)
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            while(p[2]>0.5*p[1]):
                p[2] -= p[1]
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            return p

    @cached_property
    def _get_rabi_period(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[1]

    @cached_property
    def _get_rabi_offset(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[2]

    @cached_property
    def _get_rabi_contrast(self):
        if self.fit_parameters is None:
            return np.nan
        return 100*self.fit_parameters[0]/self.fit_parameters[3]

    @cached_property
    def _get_t_pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.25*T + x0

    @cached_property
    def _get_t_pi(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.5*T + x0
    
    @cached_property
    def _get_t_3pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.75*T+x0
        
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'power', 'amp', 'start_time', 'end_time', 'time_step','freq_center',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data', 'amp2', 'freq_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         'rabi_period', 'rabi_offset', 'rabi_contrast',
                         't_pi2', 't_pi', 't_3pi2', '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('amp2', width=40),
                                         Item('rel_phase', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('start_time', width=40),
                                         Item('end_time', width=40),
                                         Item('time_step', width=40),),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 HGroup( Item('show_fit'),
                                         Item('rabi_contrast', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.1f%%'%x), width=40),
                                         Item('rabi_period', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_3pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('rabi_offset', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Double Rabi', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            #AWG.delete_all()
            f1 = (self.freq - self.freq_center)/sampling
            f2 = (self.freq_2 - self.freq_center)/sampling
            
            amp1 = self.amp #/ (1 + self.amp_ratio)
            amp2 = self.amp2 #/ (1 + 1 / self.amp_ratio)
            
            drive_x = Sin(0, f1,0 , amp1) + Sin(0, f2 , 0+self.rel_phase/180.*np.pi, amp2)
            drive_y = Sin(0, f1, np.pi/2, amp1) + Sin(0, f2 , self.rel_phase/180.*np.pi+np.pi/2, amp2)
            zero = Idle(1)
            self.waves = []
            self.main_seq = Sequence('RABI.SEQ')
            for i,t in enumerate(self.tau):
                t = int(t * sampling / 1.0e9)
                drive_x.duration = t
                drive_y.duration = t
                x_name = 'X_RA_%03i.WFM' % i
                y_name = 'Y_RA_%03i.WFM' % i
                self.waves.append(Waveform(x_name, [zero, drive_x, zero]))
                self.waves.append(Waveform(y_name, [zero, drive_y, zero]))
                self.main_seq.append(*self.waves[-2:], wait=True)
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RABI.SEQ')
            AWG.tell('*WAI')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        AWG.tell('*WAI')
        AWG.run()
        AWG.stop()
             
class ESpinTomo( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=12.94, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=25.75, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=14.75, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=29.55, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    
    evolution = Range(low=0., high=10000000., value=100., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    sequence = Property(trait=List, depends_on='laser,wait,tau,evolution')
    freq_2 = Range(low=1, high=20e9, value=2914306388, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)

        
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( ([ ]                 , 2000 + self.evolution) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in range(43):
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , 20000 + self.evolution) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(44) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Electronspin Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            
            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
 
            

            
            if not self.robust:
                swap_i=[]
                swap_q=[]
                
            else:
                swap_i=[zero,
                        Sin(480,f1,-0.20847,0.064044) + Sin(480,f2,0.13687,0.10332), 
                        Sin(480,f1,2.6141,0.04224) + Sin(480,f2,2.5024,0.061619), 
                        Sin(480,f1,-0.67851,0.048138) + Sin(480,f2,-2.1676,0.047033), 
                        Sin(480,f1,0.23765,0.049829) + Sin(480,f2,-0.64428,0.053343), 
                        Sin(480,f1,0.62853,0.049816) + Sin(480,f2,-1.0026,0.011593), 
                        Sin(480,f1,3.0768,0.047727) + Sin(480,f2,-0.72469,0.083283), 
                        Sin(480,f1,-2.3544,0.14376) + Sin(480,f2,2.3187,0.07256), 
                        Sin(480,f1,1.0528,0.07032) + Sin(480,f2,1.3316,0.082333), 
                        Sin(480,f1,-2.5969,0.13777) + Sin(480,f2,-1.7924,0.071239), 
                        Sin(480,f1,-2.1312,0.039912) + Sin(480,f2,1.7146,0.1656), 
                        Sin(480,f1,0.40419,0.018088) + Sin(480,f2,2.5583,0.017013), 
                        Sin(480,f1,-2.5682,0.023376) + Sin(480,f2,-1.187,0.0045885), 
                        Sin(480,f1,-2.51,0.067819) + Sin(480,f2,-2.4774,0.064095), 
                        Sin(480,f1,-0.19753,0.078268) + Sin(480,f2,-2.0043,0.088272), 
                        Sin(480,f1,2.5745,0.13559) + Sin(480,f2,1.6183,0.082413), 
                        zero,
                        ]
                swap_q=[zero,
                        Sin(480,f1,1.3623,0.064044) + Sin(480,f2,1.7077,0.10332), 
                        Sin(480,f1,4.1849,0.04224) + Sin(480,f2,4.0732,0.061619), 
                        Sin(480,f1,0.89229,0.048138) + Sin(480,f2,-0.59681,0.047033), 
                        Sin(480,f1,1.8084,0.049829) + Sin(480,f2,0.92652,0.053343), 
                        Sin(480,f1,2.1993,0.049816) + Sin(480,f2,0.56821,0.011593), 
                        Sin(480,f1,4.6476,0.047727) + Sin(480,f2,0.8461,0.083283), 
                        Sin(480,f1,-0.78361,0.14376) + Sin(480,f2,3.8895,0.07256), 
                        Sin(480,f1,2.6236,0.07032) + Sin(480,f2,2.9024,0.082333), 
                        Sin(480,f1,-1.0261,0.13777) + Sin(480,f2,-0.2216,0.071239), 
                        Sin(480,f1,-0.56039,0.039912) + Sin(480,f2,3.2854,0.1656), 
                        Sin(480,f1,1.975,0.018088) + Sin(480,f2,4.1291,0.017013), 
                        Sin(480,f1,-0.99741,0.023376) + Sin(480,f2,0.38377,0.0045885), 
                        Sin(480,f1,-0.93916,0.067819) + Sin(480,f2,-0.90659,0.064095), 
                        Sin(480,f1,1.3733,0.078268) + Sin(480,f2,-0.43352,0.088272), 
                        Sin(480,f1,4.1453,0.13559) + Sin(480,f2,3.1891,0.082413), 
                        zero,
                        ]                        
                        

            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '02_I.WFM', dqp_i) )
            self.waves.append(Waveform( '02_Q.WFM', dqp_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # DQ-State
            # Diagonal
            
            
            
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', dq_i +[Idle(250)]+ dqp_i) )
            self.waves.append(Waveform( '04_Q.WFM', dq_q +[Idle(250)]+ dqp_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '05_I.WFM', dq_i+ [Idle(250)]+ dqm_i) )
            self.waves.append(Waveform( '05_Q.WFM', dq_q + [Idle(250)]+ dqm_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # Coherneces
            

            for t in np.arange(100,1001,75):
                name_i='P_I_%04i.WFM' %t
                name_q='P_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, dq_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 0'], zero,]) )
                self.waves.append(Waveform( name_q, dq_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 90'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)

            for t in np.arange(100,1001,75):
                name_i='M_I_%04i.WFM' %t
                name_q='M_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, dq_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 0'], zero,]) )
                self.waves.append(Waveform( name_q, dq_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 90'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)                
                
            for t in np.arange(100,601,40):
                name_i='DQ_I_%04i.WFM' %t
                name_q='DQ_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, dq_i + [Idle(int(t * sampling / 1.0e9))]+ dq_i) )
                self.waves.append(Waveform( name_q, dq_q + [Idle(int(t * sampling / 1.0e9))]+ dq_q) )
                self.main_seq.append(*self.waves[-2:], wait=True)
            
            for w in self.waves:
                w.join()
            
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class ESpinTomoPair( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    amp = Range(low=0., high=1, value=0.66, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    
    pi2_1 = Range(low=1., high=100000., value=16.95, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=50, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=15.64, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=50, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi2_3 = Range(low=1., high=100000., value=11.24, desc='length of pi/2 pulse 3st transition [ns]', label='pi/2 [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=50, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi2_4 = Range(low=1., high=100000., value=13.39, desc='length of pi/2 pulse 4nd transition [ns]', label='pi/2 [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    pi_4 = Range(low=1., high=100000., value=50, desc='length of pi pulse 4nd transition [ns]', label='pi [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
   
    evolution = Range(low=0., high=100000., value=250., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    rep = Range(low=1, high=100000, value=1, desc='repetitions of pulse', label='repetitions', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='laser,wait,tau,evolution,rep')
    
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)


    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( ([ ]                 , self.rep*(21500)+3000) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in range(8):
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , self.rep*(21500)+3000) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(9) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution','rep',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('rep', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),
                                         Item('pi2_3'),
                                         Item('pi_3'),
                                         Item('pi2_4'),
                                         Item('pi_4'),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Electronspin Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            pi_4 = int(self.pi_4 * sampling/1.0e9)
            pi2_3 = int(self.pi2_3 * sampling/1.0e9)
            pi2_4 = int(self.pi2_4 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            
            
            p['pi + 0 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi - 0 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))

            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling   
            
            if not self.robust:
                dq_i = [    zero,  
                            p['pi + 0'],
                            Idle(20000),
                        ]


                dq_q = [    zero,  
                            p['pi + 90'],
                            Idle(20000),
                        ]
            else:

                dq_i = [ zero,
                        Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                        Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                        Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                        Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                        Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                        Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                        Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                        Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                        Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                        Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                        Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                        Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                        Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                        Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                        Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                        Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                        Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                        Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                        Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                        Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                        Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                        Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                        Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                        Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                        Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                        Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                        Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                        Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                        Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                        Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                        Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                        Idle(20000),
                   ]
            
                dq_q = [ zero,
                        Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                        Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                        Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                        Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                        Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                        Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                        Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                        Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                        Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                        Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                        Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                        Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                        Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                        Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                        Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                        Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                        Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                        Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                        Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                        Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                        Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                        Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                        Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                        Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                        Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                        Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                        Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                        Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                        Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                        Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                        Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                        Idle(20000),
                        ]
                
            
            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

                       
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '02_I.WFM', p1_i) )
            self.waves.append(Waveform( '02_Q.WFM', p1_q ) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '03_I.WFM',  p3_i ) )
            self.waves.append(Waveform( '03_Q.WFM',  p3_q ) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', p1_i+[Idle(200)]+p3_i) )
            self.waves.append(Waveform( '04_Q.WFM', p1_q+[Idle(200)]+p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # DQ-State
            # Diagonal
            self.waves.append(Waveform( '05_I.WFM', self.rep*dq_i + [zero,]) )
            self.waves.append(Waveform( '05_Q.WFM', self.rep*dq_q + [zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '06_I.WFM', self.rep*dq_i + p1_i ) )
            self.waves.append(Waveform( '06_Q.WFM', self.rep*dq_q + p1_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '07_I.WFM', self.rep*dq_i + p2_i) )
            self.waves.append(Waveform( '07_Q.WFM', self.rep*dq_q + p2_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '08_I.WFM', self.rep*dq_i + p3_i) )
            self.waves.append(Waveform( '08_Q.WFM', self.rep*dq_q + p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '09_I.WFM', self.rep*dq_i + p4_i) )
            self.waves.append(Waveform( '09_Q.WFM', self.rep*dq_q + p4_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            

            

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )

class ESpinTomoLoc( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=32.53, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=65, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=31.9, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=61.56, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi2_3 = Range(low=1., high=100000., value=20.45, desc='length of pi/2 pulse 3rd transition [ns]', label='pi/2 [ns] 3. trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=42.04, desc='length of pi pulse 3rd transition [ns]', label='pi [ns] 3. trans', mode='text', auto_set=False, enter_set=True)
    pi2_4 = Range(low=1., high=100000., value=24.49, desc='length of pi/2 pulse 4th transition [ns]', label='pi/2 [ns] 4. trans', mode='text', auto_set=False, enter_set=True)
    pi_4 = Range(low=1., high=100000., value=48.78, desc='length of pi pulse 4th transition [ns]', label='pi [ns] 4. trans', mode='text', auto_set=False, enter_set=True)
    
    
    amp = Range(low=0., high=1, value=0.5, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    
    
    evolution = Range(low=0., high=10000000., value=100., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    sequence = Property(trait=List, depends_on='laser,wait,tau,evolution')
    
    reload = True
    
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    
    
    def __init__(self):
        Pulsed.__init__(self)

        
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( ([ ]                 , 2000 + self.evolution) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in range(81):
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , 50000 + self.evolution) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(82) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Electronspin Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            pi_4 = int(self.pi_4 * sampling/1.0e9)
            pi2_3 = int(self.pi2_3 * sampling/1.0e9)
            pi2_4 = int(self.pi2_4 * sampling/1.0e9)
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            
            p['pi + 0 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90 2']    = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 0 2']   = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90 2']  = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi - 0 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90 2']    = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 0 2']   = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90 2']  = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling
            
            
            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
            swap_i = [  zero,
                        Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                        Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                        Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                        Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                        Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                        Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                        Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                        Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                        Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                        Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                        Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                        Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                        Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                        Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                        Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                        Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                        Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                        Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                        Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                        Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                        Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                        Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                        Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                        Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                        Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                        Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                        Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                        Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                        Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                        Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                        Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                        Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                        Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                        Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                        Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                        Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                        Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                        Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                        Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                        Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                        Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                        Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                        Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                        Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                        Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                        Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                        Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                        Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                        Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                        Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                        Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                        Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                        Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                        Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                        Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                        Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                        Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                        Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                        Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                        Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                        Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                        Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                        Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                        Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                        Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                        Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                        Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                        Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                        Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                        Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                        Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                        Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                        Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                        Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                        Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                        Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                        Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                        Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                        Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                        Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                        Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                        Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                        Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                        Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                        Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                        Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                        Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                        Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                        Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                        Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                        Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                        Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                        Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                        Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                        Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                        Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                        Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                        Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                        Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                        Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                        Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                        Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                        Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                        Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                        Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                        Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                        Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                        Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                        Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                        Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                        Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                        Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                        Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                        Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                        Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                        Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                        Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                        Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                        Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                        Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                        Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                        Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                        Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                        Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                        Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                        Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                        Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                        Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                        Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                        Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                        Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                        Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                        Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                        Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                        Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                        Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                        Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                        Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                        Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                        Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                        Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                        zero,
                        zero,
                        ]  
 
            

            
            if not self.robust:
                swap_i=[]
                swap_q=[]
                
            else:
            
                swap_i = [  zero,
                            Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                            Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                            Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                            Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                            Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                            Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                            Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                            Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                            Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                            Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                            Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                            Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                            Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                            Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                            Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                            Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                            Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                            Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                            Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                            Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                            Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                            Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                            Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                            Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                            Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                            Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                            Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                            Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                            Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                            Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                            Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                            Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                            Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                            Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                            Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                            Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                            Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                            Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                            Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                            Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                            Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                            Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                            Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                            Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                            Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                            Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                            Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                            Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                            Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                            Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                            Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                            Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                            Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                            Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                            Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                            Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                            Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                            Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                            Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                            Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                            Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                            Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                            Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                            Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                            Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                            Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                            Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                            Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                            Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                            Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                            Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                            zero,
                            zero,
                            ]  
                swap_q = [  zero,
                            Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                            Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                            Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                            Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                            Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                            Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                            Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                            Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                            Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                            Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                            Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                            Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                            Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                            Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                            Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                            Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                            Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                            Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                            Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                            Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                            Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                            Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                            Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                            Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                            Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                            Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                            Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                            Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                            Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                            Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                            Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                            Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                            Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                            Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                            Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                            Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                            Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                            Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                            Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                            Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                            Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                            Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                            Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                            Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                            Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                            Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                            Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                            Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                            Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                            Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                            Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                            Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                            Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                            Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                            Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                            Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                            Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                            Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                            Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                            Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                            Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                            Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                            Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                            Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                            Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                            Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                            Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                            Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                            Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                            Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                            Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                            zero,
                            zero,
                            ]                         
                        

            ent_i=dqpi2_i+[Idle(12500*1.2)]+dqpi_q+[Idle(12500*1.2)]+dqdqpi2_q+swap_i
            ent_q=dqpi2_q+[Idle(12500*1.2)]+dqpi_q+[Idle(12500*1.2)]+dqdqpi2_q+swap_q
                        
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '02_I.WFM', p1_i) )
            self.waves.append(Waveform( '02_Q.WFM', p1_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '03_I.WFM', p3_i) )
            self.waves.append(Waveform( '03_Q.WFM', p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', p1_i+p3_i) )
            self.waves.append(Waveform( '04_Q.WFM', p1_q+p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            
            # Coherneces
            for t in np.arange(100,1001,75):
                name_i='P1_I_%04i.WFM' %t
                name_q='P1_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 0'], zero,]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 90'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)

            for t in np.arange(100,1001,75):
                name_i='M1_I_%04i.WFM' %t
                name_q='M1_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 0'], zero,]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 90'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)                
                
            for t in np.arange(100,601,40):
                name_i='DQ1_I_%04i.WFM' %t
                name_q='DQ1_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi + 0'],p['pi/2 - 0']]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi + 90'],p['pi/2 - 90']]) )
                self.main_seq.append(*self.waves[-2:], wait=True)
            
            for t in np.arange(100,1001,75):
                name_i='P2_I_%04i.WFM' %t
                name_q='P2_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 0 2'], zero,]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 90 2'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)

            for t in np.arange(100,1001,75):
                name_i='M2_I_%04i.WFM' %t
                name_q='M2_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 0 2'], zero,]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 90 2'], zero,]) )
                self.main_seq.append(*self.waves[-2:], wait=True)                
                
            for t in np.arange(100,601,40):
                name_i='DQ2_I_%04i.WFM' %t
                name_q='DQ2_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, ent_i + [Idle(int(t * sampling / 1.0e9))]+ [p['pi + 0 2'],p['pi/2 - 0 2']]) )
                self.waves.append(Waveform( name_q, ent_q + [Idle(int(t * sampling / 1.0e9))]+ [p['pi + 90 2'],p['pi/2 - 90 2']]) )
                self.main_seq.append(*self.waves[-2:], wait=True)
            
            
            for w in self.waves:
                w.join()
            
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
   
class ESpinTomoRobust( ESpinTomo ):
        
        
        
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            
            if not self.robust:
                dq_i = [zero,  p['pi - 0']  ]
                dq_q = [zero,  p['pi - 90'] ]
            else:
                f1 = (self.freq - self.freq_center) / sampling
                f2 = (self.freq_2 - self.freq_center) / sampling
                dq_i = [    zero,
                            Sin( 100, f1, 1.458500,  0.236279) + Sin( 100, f2, 0.796618, 0.447229),
                            Sin( 100, f1, 0.526631,  0.447512) + Sin( 100, f2, 2.318850, 0.436237),
                            Sin( 100, f1, 1.022740,  0.559730) + Sin( 100, f2, -0.785398, 0.452219),
                            Sin( 100, f1, 0.600678,  0.592348) + Sin( 100, f2, -2.495290, 0.363523),
                            Sin( 100, f1, 2.453760,  0.632470) + Sin( 100, f2, -1.195880, 0.105080),
                            Sin( 100, f1, 2.415230,  0.653640) + Sin( 100, f2, -0.579212, 0.336861),
                            zero,
                       ]
                
                dq_q = [    zero,
                            Sin( 100, f1, 4.600093,  0.236279) + Sin( 100, f2, 3.938211, 0.447229),
                            Sin( 100, f1, 3.668224,  0.447512) + Sin( 100, f2, 5.460443, 0.436237),
                            Sin( 100, f1, 4.164333,  0.559730) + Sin( 100, f2, 2.356195, 0.452219),
                            Sin( 100, f1, 3.742271,  0.592348) + Sin( 100, f2, 0.646303, 0.363523),
                            Sin( 100, f1, 5.595353,  0.632470) + Sin( 100, f2, 1.945713, 0.105080),
                            Sin( 100, f1, 5.556823,  0.653640) + Sin( 100, f2, 2.562381, 0.336861),
                            zero,
                       ]
                p2_i = [    zero,
                            Sin( 100, f1, 0.258424,  0.316281) + Sin( 100, f2, -0.507943, 0.217985),
                            Sin( 100, f1, 0.136198,  0.493227) + Sin( 100, f2, -1.412120, 0.178636),
                            Sin( 100, f1, -1.923730,  0.520756) + Sin( 100, f2, 0.002671, 0.319768),
                            Sin( 100, f1, -1.426950,  0.130875) + Sin( 100, f2, 0.989104, 0.272813),
                            Sin( 100, f1, 2.274640,  0.640984) + Sin( 100, f2, 1.087220, 0.361180),
                            Sin( 100, f1, 0.989988,  0.584508) + Sin( 100, f2, 3.067340, 0.320650),
                            zero,
                       ]
                
                p2_q = [    zero,
                            Sin( 100, f1, 3.400017,  0.316281) + Sin( 100, f2, 2.633650, 0.217985),
                            Sin( 100, f1, 3.277791,  0.493227) + Sin( 100, f2, 1.729473, 0.178636),
                            Sin( 100, f1, 1.217863,  0.520756) + Sin( 100, f2, 3.144264, 0.319768),
                            Sin( 100, f1, 1.714643,  0.130875) + Sin( 100, f2, 4.130697, 0.272813),
                            Sin( 100, f1, 5.416233,  0.640984) + Sin( 100, f2, 4.228813, 0.361180),
                            Sin( 100, f1, 4.131581,  0.584508) + Sin( 100, f2, 6.208933, 0.320650),
                            zero,
                       ]                



                m2_i = [    zero,
                            Sin( 100, f1, 0.229667,  0.501836) + Sin( 100, f2, -1.702370, 0.235237),
                            Sin( 100, f1, 1.579310,  0.488677) + Sin( 100, f2, -2.364680, 0.223336),
                            Sin( 100, f1, 2.598080,  0.457077) + Sin( 100, f2, 2.575660, 0.356194),
                            Sin( 100, f1, -2.830860,  0.463184) + Sin( 100, f2, 1.333870, 0.328957),
                            Sin( 100, f1, -1.814750,  0.473546) + Sin( 100, f2, 0.118256, 0.226845),
                            Sin( 100, f1, -0.340395,  0.518404) + Sin( 100, f2, -0.611283, 0.238956),
                            zero,
                       ]
                
                m2_q = [    zero,
                            Sin( 100, f1, 3.371260,  0.501836) + Sin( 100, f2, 1.439223, 0.235237),
                            Sin( 100, f1, 4.720903,  0.488677) + Sin( 100, f2, 0.776913, 0.223336),
                            Sin( 100, f1, 5.739673,  0.457077) + Sin( 100, f2, 5.717253, 0.356194),
                            Sin( 100, f1, 0.310733,  0.463184) + Sin( 100, f2, 4.475463, 0.328957),
                            Sin( 100, f1, 1.326843,  0.473546) + Sin( 100, f2, 3.259849, 0.226845),
                            Sin( 100, f1, 2.801198,  0.518404) + Sin( 100, f2, 2.530310, 0.238956),
                            zero,
                       ]      
            
            
                p_i = [     zero,
                            Sin( 100, f1, 2.207390,  0.607688) + Sin( 100, f2, -3.081770, 0.320340),
                            Sin( 100, f1, -0.911262,  0.592863) + Sin( 100, f2, 1.202200, 0.055530),
                            Sin( 100, f1, 2.112300,  0.143985) + Sin( 100, f2, -0.020802, 0.319836),
                            Sin( 100, f1, 2.343350,  0.617275) + Sin( 100, f2, 0.144969, 0.201452),
                            Sin( 100, f1, -0.785398,  0.691069) + Sin( 100, f2, 1.159890, 0.020383),
                            Sin( 100, f1, 2.407490,  0.408073) + Sin( 100, f2, -0.185883, 0.114971),
                            zero,
                       ]
                
                p_q = [     zero,
                            Sin( 100, f1, 5.348983,  0.607688) + Sin( 100, f2, 0.059823, 0.320340),
                            Sin( 100, f1, 2.230331,  0.592863) + Sin( 100, f2, 4.343793, 0.055530),
                            Sin( 100, f1, 5.253893,  0.143985) + Sin( 100, f2, 3.120791, 0.319836),
                            Sin( 100, f1, 5.484943,  0.617275) + Sin( 100, f2, 3.286562, 0.201452),
                            Sin( 100, f1, 2.356195,  0.691069) + Sin( 100, f2, 4.301483, 0.020383),
                            Sin( 100, f1, 5.549083,  0.408073) + Sin( 100, f2, 2.955710, 0.114971),
                            zero,
                       ]                



                m_i = [     zero,
                            Sin( 100, f1, 0.785398,  0.691069) + Sin( 100, f2, 0.849728, 0.425730),
                            Sin( 100, f1, -2.551820,  0.587990) + Sin( 100, f2, -0.551010, 0.375315),
                            Sin( 100, f1, -2.211510,  0.609551) + Sin( 100, f2, -2.193740, 0.037462),
                            Sin( 100, f1, -2.782300,  0.493725) + Sin( 100, f2, 3.087310, 0.152702),
                            Sin( 100, f1, -2.221940,  0.385965) + Sin( 100, f2, 0.744816, 0.434931),
                            Sin( 100, f1, -0.398628,  0.530232) + Sin( 100, f2, -0.869627, 0.320307),
                            zero,
                       ]
                
                m_q = [     zero,
                            Sin( 100, f1, 3.926991,  0.691069) + Sin( 100, f2, 3.991321, 0.425730),
                            Sin( 100, f1, 0.589773,  0.587990) + Sin( 100, f2, 2.590583, 0.375315),
                            Sin( 100, f1, 0.930083,  0.609551) + Sin( 100, f2, 0.947853, 0.037462),
                            Sin( 100, f1, 0.359293,  0.493725) + Sin( 100, f2, 6.228903, 0.152702),
                            Sin( 100, f1, 0.919653,  0.385965) + Sin( 100, f2, 3.886409, 0.434931),
                            Sin( 100, f1, 2.742965,  0.530232) + Sin( 100, f2, 2.271966, 0.320307),
                            zero,
                       ] 
            
            if self.evolution >= 1:
                dq_i.append(evo)
                dq_q.append(evo)
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '02_I.WFM', m_i) )
            self.waves.append(Waveform( '02_Q.WFM', m_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # DQ-State
            # Diagonal
            self.waves.append(Waveform( '03_I.WFM', m_i+ [zero] ) )
            self.waves.append(Waveform( '03_Q.WFM', m_q + [zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM',m_i +p_i ))
            self.waves.append(Waveform( '04_Q.WFM',m_q +  p_q ))
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '05_I.WFM', m_i +m_i ))
            self.waves.append(Waveform( '05_Q.WFM', m_q +m_q ))
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # Coherneces
            

            for t in np.arange(100,1001,75):
                name_i='P_I_%04i.WFM' %t
                name_q='P_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, m_i +[Idle(int(t * sampling / 1.0e9))]+p2_i ) )
                self.waves.append(Waveform( name_q, m_q +[Idle(int(t * sampling / 1.0e9))]+ p2_q) )
                self.main_seq.append(*self.waves[-2:], wait=True)

            for t in np.arange(100,1001,75):
                name_i='M_I_%04i.WFM' %t
                name_q='M_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, m_i +[Idle(int(t * sampling / 1.0e9))]+ m2_i) )
                self.waves.append(Waveform( name_q, m_q +[Idle(int(t * sampling / 1.0e9))]+ m2_q) )
                self.main_seq.append(*self.waves[-2:], wait=True)                
                
            for t in np.arange(100,601,40):
                name_i='DQ_I_%04i.WFM' %t
                name_q='DQ_Q_%04i.WFM' %t
                self.waves.append(Waveform( name_i, m_i +[Idle(int(t * sampling / 1.0e9))]+ dq_i) )
                self.waves.append(Waveform( name_q, m_q +[Idle(int(t * sampling / 1.0e9))]+ dq_q) )
                self.main_seq.append(*self.waves[-2:], wait=True)
            
            

            
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class StorageTomo( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=12.94, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=25.75, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=14.75, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=29.55, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    amp_1_sel = Range(low=0., high=1., value=0.025, desc='length of pi pulse 2nd transition [ns]', label='amp 1nd sel', mode='text', auto_set=False, enter_set=True)
    amp_2_sel = Range(low=0., high=1., value=0.029, desc='length of pi pulse 2nd transition [ns]', label='amp 2nd sel', mode='text', auto_set=False, enter_set=True)
    
    
    
    evolution = Range(low=0., high=10000000., value=1400., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq_2 = Range(low=1, high=20e9, value=2914331439, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2832174009, desc='frequency selective trans 1. [Hz]', label='freq 1.sel [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2912821762, desc='frequency selective trans 2. [Hz]', label='freq 2.sel [Hz]', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='laser,wait,tau,evolution')
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)

        
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( ([ ]                 , 2000 + self.evolution) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in range(43):
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , 20000 + self.evolution) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(44) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),
                                         Item('amp_1_sel'),
                                         Item('amp_2_sel'),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Electronspin Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi 0 sel']     = Sin( 1200, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp_1_sel)+Sin( 1200, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp_2_sel)
            p['pi 90 sel']    = Sin( 1200, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp_1_sel)+Sin( 1200, (self.freq_4 - self.freq_center)/sampling, np.pi/2 ,self.amp_2_sel)
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            

            dq_i= [ zero,
                    Sin(96,f1,-0.72589,0.2763) + Sin(96,f2,1.5652,0.10135), 
                    Sin(96,f1,-0.59446,0.20889) + Sin(96,f2,0.8982,0.31374), 
                    Sin(96,f1,-2.3562,0.29894) + Sin(96,f2,2.2281,0.19977), 
                    Sin(96,f1,-0.59446,0.20889) + Sin(96,f2,0.8982,0.31374), 
                    Sin(96,f1,-0.72589,0.2763) + Sin(96,f2,1.5652,0.10135), 
                    zero,
                    ]
            dq_q= [ zero,
                    Sin(96,f1,0.8449,0.2763) + Sin(96,f2,3.136,0.10135), 
                    Sin(96,f1,0.97633,0.20889) + Sin(96,f2,2.469,0.31374), 
                    Sin(96,f1,-0.7854,0.29894) + Sin(96,f2,3.7989,0.19977), 
                    Sin(96,f1,0.97633,0.20889) + Sin(96,f2,2.469,0.31374), 
                    Sin(96,f1,0.8449,0.2763) + Sin(96,f2,3.136,0.10135), 
                    zero,
                    ]
                    
            dqy_i= [ zero,
                    Sin(108,f1,-1.6422,0.13311) + Sin(108,f2,0.7702,0.34194), 
                    Sin(108,f1,2.4784,0.23143) + Sin(108,f2,0.62804,0.18251), 
                    Sin(108,f1,0.66925,0.21271) + Sin(108,f2,1.5755,0.24519), 
                    Sin(108,f1,1.0539,0.12825) + Sin(108,f2,-0.79659,0.19833), 
                    Sin(108,f1,0.083621,0.21159) + Sin(108,f2,-2.2727,0.11658), 
                    zero,
                    ]
            dqy_q= [ zero,
                    Sin(108,f1,-0.071366,0.13311) + Sin(108,f2,2.341,0.34194), 
                    Sin(108,f1,4.0492,0.23143) + Sin(108,f2,2.1988,0.18251), 
                    Sin(108,f1,2.24,0.21271) + Sin(108,f2,3.1463,0.24519), 
                    Sin(108,f1,2.6247,0.12825) + Sin(108,f2,0.7742,0.19833), 
                    Sin(108,f1,1.6544,0.21159) + Sin(108,f2,-0.70192,0.11658), 
                    zero,
                    ]
            dqm_i= [ zero,
                    Sin(108,f1,-0.2116,0.1479) + Sin(108,f2,-2.2789,0.23044), 
                    Sin(108,f1,1.1884,0.21794) + Sin(108,f2,0.76145,0.33907), 
                    Sin(108,f1,-2.5176,0.26023) + Sin(108,f2,0.76923,0.24738), 
                    Sin(108,f1,1.176,0.22235) + Sin(108,f2,0.78642,0.34494), 
                    Sin(108,f1,-0.13134,0.14572) + Sin(108,f2,-2.2541,0.23031), 
                    zero,
                    ]
            dqm_q= [ zero,
                    Sin(108,f1,1.3592,0.1479) + Sin(108,f2,-0.70805,0.23044), 
                    Sin(108,f1,2.7592,0.21794) + Sin(108,f2,2.3322,0.33907), 
                    Sin(108,f1,-0.94681,0.26023) + Sin(108,f2,2.34,0.24738), 
                    Sin(108,f1,2.7468,0.22235) + Sin(108,f2,2.3572,0.34494), 
                    Sin(108,f1,1.4395,0.14572) + Sin(108,f2,-0.68327,0.23031), 
                    zero,
                    ]
            
            dqp_i= [ zero,
                    Sin(108,f1,2.9518,0.18589) + Sin(108,f2,2.7921,0.086644), 
                    Sin(108,f1,-0.77911,0.29706) + Sin(108,f2,-2.1131,0.25836), 
                    Sin(108,f1,-1.2746,0.22053) + Sin(108,f2,0.57307,0.29205), 
                    Sin(108,f1,-0.7667,0.29347) + Sin(108,f2,-2.1181,0.26162), 
                    Sin(108,f1,2.9828,0.18703) + Sin(108,f2,2.9366,0.08123), 
                    zero,
                    ]
            dqp_q= [ zero,
                    Sin(108,f1,4.5226,0.18589) + Sin(108,f2,4.3629,0.086644), 
                    Sin(108,f1,0.79169,0.29706) + Sin(108,f2,-0.54228,0.25836), 
                    Sin(108,f1,0.2962,0.22053) + Sin(108,f2,2.1439,0.29205), 
                    Sin(108,f1,0.8041,0.29347) + Sin(108,f2,-0.54735,0.26162), 
                    Sin(108,f1,4.5536,0.18703) + Sin(108,f2,4.5074,0.08123), 
                    zero,
                    ]
            dqs_i= [ zero,
                    Sin(108,f1,-1.6032,0.06747) + Sin(108,f2,0.61421,0.30028)+ Sin(108,f1,-0.62914,0.068926) + Sin(108,f2,-0.077833,0.11318), 
                    Sin(108,f1,-0.67444,0.22043) + Sin(108,f2,2.349,0.20045)+Sin(108,f1,-0.80458,0.23844) + Sin(108,f2,0.65256,0.19841), 
                    Sin(108,f1,-1.1922,0.20227) + Sin(108,f2,-2.2656,0.31677)+Sin(108,f1,0.85093,0.26809) + Sin(108,f2,-0.23746,0.19727), 
                    Sin(108,f1,-1.8231,0.10708) + Sin(108,f2,-0.4754,0.25458)+Sin(108,f1,-2.7396,0.18206) + Sin(108,f2,0.29528,0.25644), 
                    Sin(108,f1,0.65937,0.090264) + Sin(108,f2,-0.56553,0.12002)+Sin(108,f1,-1.0241,0.23969) + Sin(108,f2,-2.2909,0.068797), 
                    zero,
                    ]
            dqs_q= [ zero,
                    Sin(108,f1,-0.032384,0.06747) + Sin(108,f2,2.185,0.30028)+Sin(108,f1,0.94166,0.068926) + Sin(108,f2,1.493,0.11318), 
                    Sin(108,f1,0.89635,0.22043) + Sin(108,f2,3.9198,0.20045)+ Sin(108,f1,0.76621,0.23844) + Sin(108,f2,2.2234,0.19841), 
                    Sin(108,f1,0.3786,0.20227) + Sin(108,f2,-0.6948,0.31677)+ Sin(108,f1,2.4217,0.26809) + Sin(108,f2,1.3333,0.19727), 
                    Sin(108,f1,-0.25231,0.10708) + Sin(108,f2,1.0954,0.25458)+Sin(108,f1,-1.1688,0.18206) + Sin(108,f2,1.8661,0.25644), 
                    Sin(108,f1,2.2302,0.090264) + Sin(108,f2,1.0053,0.12002)+Sin(108,f1,0.54667,0.23969) + Sin(108,f2,-0.72007,0.068797),
                    zero,
                    ]


                    
                    
                    
            if not self.robust:
                swap_i=dqs_i+[Idle(2500*1.2)]+dqs_i
                swap_q=dqs_q+[Idle(2500*1.2)]+dqs_q
                
            else:
                swap_i=[zero,
                        Sin(480,f1,-0.20847,0.064044) + Sin(480,f2,0.13687,0.10332), 
                        Sin(480,f1,2.6141,0.04224) + Sin(480,f2,2.5024,0.061619), 
                        Sin(480,f1,-0.67851,0.048138) + Sin(480,f2,-2.1676,0.047033), 
                        Sin(480,f1,0.23765,0.049829) + Sin(480,f2,-0.64428,0.053343), 
                        Sin(480,f1,0.62853,0.049816) + Sin(480,f2,-1.0026,0.011593), 
                        Sin(480,f1,3.0768,0.047727) + Sin(480,f2,-0.72469,0.083283), 
                        Sin(480,f1,-2.3544,0.14376) + Sin(480,f2,2.3187,0.07256), 
                        Sin(480,f1,1.0528,0.07032) + Sin(480,f2,1.3316,0.082333), 
                        Sin(480,f1,-2.5969,0.13777) + Sin(480,f2,-1.7924,0.071239), 
                        Sin(480,f1,-2.1312,0.039912) + Sin(480,f2,1.7146,0.1656), 
                        Sin(480,f1,0.40419,0.018088) + Sin(480,f2,2.5583,0.017013), 
                        Sin(480,f1,-2.5682,0.023376) + Sin(480,f2,-1.187,0.0045885), 
                        Sin(480,f1,-2.51,0.067819) + Sin(480,f2,-2.4774,0.064095), 
                        Sin(480,f1,-0.19753,0.078268) + Sin(480,f2,-2.0043,0.088272), 
                        Sin(480,f1,2.5745,0.13559) + Sin(480,f2,1.6183,0.082413), 
                        zero,
                        ]
                swap_q=[zero,
                        Sin(480,f1,1.3623,0.064044) + Sin(480,f2,1.7077,0.10332), 
                        Sin(480,f1,4.1849,0.04224) + Sin(480,f2,4.0732,0.061619), 
                        Sin(480,f1,0.89229,0.048138) + Sin(480,f2,-0.59681,0.047033), 
                        Sin(480,f1,1.8084,0.049829) + Sin(480,f2,0.92652,0.053343), 
                        Sin(480,f1,2.1993,0.049816) + Sin(480,f2,0.56821,0.011593), 
                        Sin(480,f1,4.6476,0.047727) + Sin(480,f2,0.8461,0.083283), 
                        Sin(480,f1,-0.78361,0.14376) + Sin(480,f2,3.8895,0.07256), 
                        Sin(480,f1,2.6236,0.07032) + Sin(480,f2,2.9024,0.082333), 
                        Sin(480,f1,-1.0261,0.13777) + Sin(480,f2,-0.2216,0.071239), 
                        Sin(480,f1,-0.56039,0.039912) + Sin(480,f2,3.2854,0.1656), 
                        Sin(480,f1,1.975,0.018088) + Sin(480,f2,4.1291,0.017013), 
                        Sin(480,f1,-0.99741,0.023376) + Sin(480,f2,0.38377,0.0045885), 
                        Sin(480,f1,-0.93916,0.067819) + Sin(480,f2,-0.90659,0.064095), 
                        Sin(480,f1,1.3733,0.078268) + Sin(480,f2,-0.43352,0.088272), 
                        Sin(480,f1,4.1453,0.13559) + Sin(480,f2,3.1891,0.082413), 
                        zero,
                        ]                        
                        

            # Waveforms
            self.waves = []
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            

            # Reference
            name_x = 'REF_2.WFM' 
            name_y = 'REF_2.WFM' 
            ref_x = Waveform(name_x, dqp_i)
            ref_y = Waveform(name_y, dqp_i)
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = '02.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            # DQ-State
            # Diagonal
            sup_x=Waveform('SUP1_X.WFM', dq_i + swap_i + [Idle(int(self.evolution*1.2))] + swap_i +[Idle(250)])
            sup_y=Waveform('SUP1_Y.WFM', dq_q + swap_q + [Idle(int(self.evolution*1.2))] + swap_q +[Idle(250)])
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
        
            
            t_0 = sup_x.duration
            
            name = '03.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            name_x = 'REF_4.WFM' 
            name_y = 'REF_4.WFM' 
            ref_x = Waveform(name_x, dqp_i, t_0)
            ref_y = Waveform(name_y, dqp_q, t_0)
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = '04.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            
            name_x = 'REF_5.WFM'
            name_y = 'REF_5.WFM'
            ref_x = Waveform(name_x, dqm_i, t_0)
            ref_y = Waveform(name_y, dqm_q, t_0)
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = '05.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            
                        
            # Coherneces
            

            for t in np.arange(100,1001,75):
                name_x='P_I_%04i.WFM' %t
                name_y='P_Q_%04i.WFM' %t
                ref_x = Waveform(name_x, [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 0'], zero,], t_0)
                ref_y = Waveform(name_y, [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 + 90'], zero,], t_0)
                self.waves.append(ref_x)
                self.waves.append(ref_y)
                name = 'P_%04i.SEQ' %t
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(ref_x, ref_y)
                AWG.upload(sub_seq)
                main_seq.append(sub_seq,wait=True)
                
            for t in np.arange(100,1001,75):
                name_x='M_I_%04i.WFM' %t
                name_y='M_Q_%04i.WFM' %t
                ref_x = Waveform(name_x, [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 0'], zero,], t_0)
                ref_y = Waveform(name_y, [Idle(int(t * sampling / 1.0e9))]+ [p['pi/2 - 90'], zero,], t_0)
                self.waves.append(ref_x)
                self.waves.append(ref_y)
                name = 'M_%04i.SEQ' %t
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(ref_x, ref_y)
                AWG.upload(sub_seq)
                main_seq.append(sub_seq,wait=True)    

            for t in np.arange(100,601,40):
                name_x='DQ_I_%04i.WFM' %t
                name_y='DQ_Q_%04i.WFM' %t
                ref_x = Waveform(name_x, [Idle(int(t * sampling / 1.0e9))]+ dq_i, t_0)
                ref_y = Waveform(name_y, [Idle(int(t * sampling / 1.0e9))]+ dq_q, t_0)
                self.waves.append(ref_x)
                self.waves.append(ref_y)
                name = 'DQ_%04i.SEQ' %t
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(ref_x, ref_y)
                AWG.upload(sub_seq)
                main_seq.append(sub_seq,wait=True)  
           
            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
            AWG.upload(main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
   
class NucularTomo( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi_1 = Range(low=1., high=100000., value=40.57, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    
    pi_1_sel = Range(low=1., high=100000., value=780.92, desc='length of pi pulse 1st transition selective on nuclear spin [ns]', label='pi [ns] sel 1', mode='text', auto_set=False, enter_set=True)
    pi_2_sel = Range(low=1., high=100000., value=780.92, desc='length of pi pulse 1st transition selective on nuclear spin [ns]', label='pi [ns] sel 2', mode='text', auto_set=False, enter_set=True)
    
    sel_amp = Range(low=0., high=1., value=0.05, desc='waveform amplitude selective pi pulses', label='sel amp', mode='text', auto_set=False, enter_set=True)
    
    
    repolarize = Range(low=0., high=100000., value=100., desc='repolarization time green laser [ns]', label='polarize [ns]', mode='text', auto_set=False, enter_set=True)
    
    evolution = Range(low=0., high=100000., value=100., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq_2 = Range(low=1, high=20e9, value=2925787500.00000, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    freq_1_sel_1 = Range(low=1, high=20e9, value=2.806578e+09, desc='frequency sel 1 [Hz]', label='freq sel 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_1_sel_2 = Range(low=1, high=20e9, value=2.8096e+09, desc='frequency sel 2 [Hz]', label='freq sel 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    
    
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)

        
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( ([ ]                 , 800 + self.evolution) )
        sequence.append( (['laser', 'trigger'], laser) )
        sequence.append( ([ ]                 , wait) )
        for t in range(3):
            sequence.append( (['awgTrigger']      , 100) )
            sequence.append( ([ ]                 , 20000 + self.evolution) )
            sequence.append( (['laser', 'trigger'], laser) )
            sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(4) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_1_sel_1','freq_1_sel_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_1_sel', 'pi_2_sel', 
                         'freq_center', 'robust', 'evolution','repolarize','sel_amp',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('sel_amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_1_sel_1', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_1_sel_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi_1'),
                                         Item('pi_1_sel'),
                                         Item('pi_2_sel'),
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('repolarize', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Nucular Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_1_sel = int(self.pi_2_sel * sampling/1.0e9)
            pi_2_sel = int(self.pi_2_sel * sampling/1.0e9)
           
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            
            p['pi sel1 + 0']     = Sin( pi_1_sel, (self.freq_1_sel_1 - self.freq_center)/sampling, 0 ,self.sel_amp)
            p['pi sel1 + 90']    = Sin( pi_1_sel, (self.freq_1_sel_1 - self.freq_center)/sampling, np.pi/2 ,self.sel_amp)
            
            p['pi sel2 + 0']     = Sin( pi_2_sel, (self.freq_1_sel_2 - self.freq_center)/sampling, 0 ,self.sel_amp)
            p['pi sel2 + 90']    = Sin( pi_2_sel, (self.freq_1_sel_2 - self.freq_center)/sampling, np.pi/2 ,self.sel_amp)
            
            
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            
            wait=Idle(int(self.wait * sampling / 1.0e9))
            
            laser=Idle(int(self.repolarize * sampling / 1.0e9),marker1=True)
            
            
            
            if not self.robust:
                dq_i = [zero, p['pi/2 + 0'], p['pi - 0']]
                dq_q = [zero, p['pi/2 + 90'], p['pi - 90']]
            else:
                f1 = (self.freq - self.freq_center) / sampling
                f2 = (self.freq_2 - self.freq_center) / sampling
                
                swap_i= [   zero,
                            Sin( 96, f1, 5.501410,  0.087935) + Sin( 96, f2, 4.411787, 0.072261),
                            Sin( 96, f1, 4.789061,  0.059336) + Sin( 96, f2, 5.418582, 0.065511),
                            Sin( 96, f1, 3.773335,  0.054948) + Sin( 96, f2, 6.198236, 0.076439),
                            Sin( 96, f1, 3.061832,  0.063958) + Sin( 96, f2, 0.464366, 0.067139),
                            Sin( 96, f1, 2.466727,  0.061341) + Sin( 96, f2, 1.249529, 0.042713),
                            Sin( 96, f1, 1.865449,  0.050643) + Sin( 96, f2, 2.422665, 0.039304),
                            Sin( 96, f1, 1.341503,  0.037860) + Sin( 96, f2, 3.132025, 0.044496),
                            Sin( 96, f1, 0.847205,  0.019461) + Sin( 96, f2, 3.603257, 0.034334),
                            Sin( 96, f1, 4.755998,  0.009480) + Sin( 96, f2, 4.346719, 0.013609),
                            Sin( 96, f1, 4.139222,  0.030032) + Sin( 96, f2, 0.008336, 0.017764),
                            Sin( 96, f1, 4.028198,  0.037628) + Sin( 96, f2, 0.382575, 0.028001),
                            Sin( 96, f1, 3.979123,  0.027158) + Sin( 96, f2, 0.648286, 0.023372),
                            Sin( 96, f1, 3.545131,  0.002880) + Sin( 96, f2, 1.258495, 0.015167),
                            Sin( 96, f1, 0.948521,  0.021070) + Sin( 96, f2, 2.059256, 0.016702),
                            Sin( 96, f1, 0.964676,  0.030354) + Sin( 96, f2, 2.223459, 0.020153),
                            Sin( 96, f1, 0.884091,  0.023314) + Sin( 96, f2, 2.103349, 0.015904),
                            Sin( 96, f1, 6.208175,  0.012069) + Sin( 96, f2, 2.219446, 0.005883),
                            Sin( 96, f1, 5.204456,  0.022277) + Sin( 96, f2, 4.034409, 0.009288),
                            Sin( 96, f1, 4.981274,  0.026331) + Sin( 96, f2, 3.877441, 0.022370),
                            Sin( 96, f1, 4.576302,  0.017452) + Sin( 96, f2, 3.592245, 0.032021),
                            Sin( 96, f1, 3.380745,  0.018923) + Sin( 96, f2, 3.374481, 0.033520),
                            Sin( 96, f1, 2.913354,  0.034221) + Sin( 96, f2, 3.382801, 0.024903),
                            Sin( 96, f1, 2.633348,  0.038356) + Sin( 96, f2, 4.317973, 0.017287),
                            Sin( 96, f1, 2.101934,  0.028793) + Sin( 96, f2, 4.984595, 0.034978),
                            Sin( 96, f1, 1.121407,  0.027957) + Sin( 96, f2, 5.045370, 0.048969),
                            Sin( 96, f1, 0.516180,  0.041064) + Sin( 96, f2, 5.085223, 0.045193),
                            Sin( 96, f1, 0.122338,  0.049019) + Sin( 96, f2, 5.545542, 0.024347),
                            Sin( 96, f1, 5.940456,  0.044321) + Sin( 96, f2, 0.700702, 0.030374),
                            Sin( 96, f1, 5.273810,  0.035505) + Sin( 96, f2, 1.031989, 0.055650),
                            Sin( 96, f1, 4.488570,  0.035512) + Sin( 96, f2, 1.146422, 0.064659),
                            Sin( 96, f1, 3.854240,  0.043165) + Sin( 96, f2, 1.302701, 0.052612),
                            Sin( 96, f1, 3.349089,  0.045239) + Sin( 96, f2, 1.659115, 0.029404),
                            Sin( 96, f1, 2.817489,  0.037918) + Sin( 96, f2, 2.838431, 0.016063),
                            Sin( 96, f1, 2.255808,  0.029382) + Sin( 96, f2, 3.831790, 0.029828),
                            Sin( 96, f1, 1.685011,  0.019335) + Sin( 96, f2, 4.073087, 0.046351),
                            Sin( 96, f1, 0.144188,  0.010938) + Sin( 96, f2, 4.028296, 0.052425),
                            Sin( 96, f1, 5.406698,  0.030664) + Sin( 96, f2, 3.729234, 0.047175),
                            Sin( 96, f1, 5.293272,  0.047910) + Sin( 96, f2, 3.145225, 0.040684),
                            Sin( 96, f1, 5.401827,  0.047560) + Sin( 96, f2, 2.473143, 0.042603),
                            Sin( 96, f1, 5.738393,  0.030527) + Sin( 96, f2, 1.892740, 0.044148),
                            Sin( 96, f1, 0.907870,  0.018042) + Sin( 96, f2, 1.185214, 0.041165),
                            Sin( 96, f1, 1.832171,  0.045485) + Sin( 96, f2, 0.392706, 0.047881),
                            Sin( 96, f1, 2.029042,  0.070587) + Sin( 96, f2, 6.155730, 0.064120),
                            Sin( 96, f1, 2.061600,  0.075509) + Sin( 96, f2, 5.806601, 0.073951),
                            Sin( 96, f1, 1.990733,  0.057560) + Sin( 96, f2, 5.466221, 0.068614),
                            Sin( 96, f1, 1.580606,  0.022674) + Sin( 96, f2, 5.067838, 0.051768),
                            Sin( 96, f1, 5.774807,  0.028176) + Sin( 96, f2, 4.432729, 0.029809),
                            Sin( 96, f1, 5.453695,  0.057396) + Sin( 96, f2, 2.978476, 0.026059),
                            Sin( 96, f1, 5.302088,  0.065280) + Sin( 96, f2, 2.234846, 0.048856),
                            Sin( 96, f1, 5.086558,  0.054709) + Sin( 96, f2, 1.935898, 0.062800),
                            Sin( 96, f1, 4.614232,  0.038897) + Sin( 96, f2, 1.742102, 0.056271),
                            Sin( 96, f1, 3.844454,  0.033783) + Sin( 96, f2, 1.516943, 0.031691),
                            Sin( 96, f1, 3.232706,  0.038213) + Sin( 96, f2, 6.134526, 0.007629),
                            Sin( 96, f1, 2.782944,  0.041969) + Sin( 96, f2, 4.990003, 0.030914),
                            Sin( 96, f1, 2.332693,  0.043180) + Sin( 96, f2, 4.872718, 0.046585),
                            Sin( 96, f1, 1.861516,  0.041669) + Sin( 96, f2, 4.831171, 0.048401),
                            Sin( 96, f1, 1.399017,  0.037683) + Sin( 96, f2, 4.794847, 0.036564),
                            Sin( 96, f1, 0.953099,  0.032198) + Sin( 96, f2, 4.677813, 0.012876),
                            Sin( 96, f1, 0.450772,  0.023716) + Sin( 96, f2, 1.745787, 0.017222),
                            Sin( 96, f1, 5.735441,  0.014633) + Sin( 96, f2, 1.648704, 0.044196),
                            Sin( 96, f1, 4.600346,  0.024368) + Sin( 96, f2, 1.597350, 0.058835),
                            Sin( 96, f1, 4.377510,  0.042040) + Sin( 96, f2, 1.507380, 0.053434),
                            Sin( 96, f1, 4.439903,  0.052347) + Sin( 96, f2, 1.256110, 0.028580),
                            Sin( 96, f1, 4.697378,  0.046933) + Sin( 96, f2, 5.487447, 0.013473),
                            Sin( 96, f1, 5.396670,  0.032023) + Sin( 96, f2, 4.786608, 0.046434),
                            Sin( 96, f1, 0.384446,  0.035544) + Sin( 96, f2, 4.541169, 0.074648),
                            Sin( 96, f1, 1.069552,  0.064105) + Sin( 96, f2, 4.280325, 0.087325),
                            Sin( 96, f1, 1.330846,  0.084686) + Sin( 96, f2, 4.046817, 0.082152),
                            Sin( 96, f1, 1.553704,  0.075087) + Sin( 96, f2, 3.774607, 0.061585),
                            Sin( 96, f1, 2.145060,  0.044996) + Sin( 96, f2, 3.008278, 0.037403),
                            Sin( 96, f1, 3.386602,  0.045811) + Sin( 96, f2, 1.871620, 0.049103),
                            Sin( 96, f1, 3.880349,  0.071110) + Sin( 96, f2, 1.515317, 0.075720),
                            Sin( 96, f1, 4.109195,  0.079348) + Sin( 96, f2, 1.378757, 0.085283),
                            Sin( 96, f1, 4.410303,  0.073410) + Sin( 96, f2, 1.184714, 0.070561),
                            Sin( 96, f1, 4.732309,  0.059156) + Sin( 96, f2, 0.917355, 0.042226),
                            Sin( 96, f1, 5.093202,  0.037035) + Sin( 96, f2, 0.375999, 0.013821),
                            Sin( 96, f1, 5.867551,  0.020690) + Sin( 96, f2, 4.616612, 0.019611),
                            Sin( 96, f1, 0.556567,  0.022267) + Sin( 96, f2, 4.398348, 0.040223),
                            Sin( 96, f1, 0.884374,  0.029658) + Sin( 96, f2, 4.463521, 0.047061),
                            Sin( 96, f1, 0.851460,  0.033432) + Sin( 96, f2, 4.761480, 0.040150),
                            Sin( 96, f1, 0.782595,  0.037617) + Sin( 96, f2, 5.322054, 0.026403),
                            Sin( 96, f1, 0.729491,  0.046102) + Sin( 96, f2, 0.411225, 0.015451),
                            Sin( 96, f1, 0.627936,  0.053734) + Sin( 96, f2, 1.580128, 0.033521),
                            Sin( 96, f1, 0.462296,  0.053828) + Sin( 96, f2, 2.004147, 0.050683),
                            Sin( 96, f1, 0.035188,  0.042955) + Sin( 96, f2, 2.505453, 0.052174),
                            Sin( 96, f1, 5.249407,  0.036124) + Sin( 96, f2, 3.326433, 0.046982),
                            Sin( 96, f1, 4.290864,  0.056783) + Sin( 96, f2, 4.299909, 0.052757),
                            Sin( 96, f1, 3.714432,  0.080241) + Sin( 96, f2, 5.095893, 0.063557),
                            Sin( 96, f1, 3.119198,  0.091033) + Sin( 96, f2, 5.911402, 0.074748),
                            Sin( 96, f1, 2.462996,  0.091876) + Sin( 96, f2, 0.320322, 0.096826),
                            zero,
                        ]
            
                swap_q= [   zero,
                            Sin( 96, f1, 8.643003,  0.087935) + Sin( 96, f2, 7.553380, 0.072261),
                            Sin( 96, f1, 7.930654,  0.059336) + Sin( 96, f2, 8.560175, 0.065511),
                            Sin( 96, f1, 6.914928,  0.054948) + Sin( 96, f2, 9.339829, 0.076439),
                            Sin( 96, f1, 6.203425,  0.063958) + Sin( 96, f2, 3.605959, 0.067139),
                            Sin( 96, f1, 5.608320,  0.061341) + Sin( 96, f2, 4.391122, 0.042713),
                            Sin( 96, f1, 5.007042,  0.050643) + Sin( 96, f2, 5.564257, 0.039304),
                            Sin( 96, f1, 4.483096,  0.037860) + Sin( 96, f2, 6.273618, 0.044496),
                            Sin( 96, f1, 3.988798,  0.019461) + Sin( 96, f2, 6.744850, 0.034334),
                            Sin( 96, f1, 7.897590,  0.009480) + Sin( 96, f2, 7.488311, 0.013609),
                            Sin( 96, f1, 7.280815,  0.030032) + Sin( 96, f2, 3.149929, 0.017764),
                            Sin( 96, f1, 7.169791,  0.037628) + Sin( 96, f2, 3.524167, 0.028001),
                            Sin( 96, f1, 7.120716,  0.027158) + Sin( 96, f2, 3.789879, 0.023372),
                            Sin( 96, f1, 6.686724,  0.002880) + Sin( 96, f2, 4.400088, 0.015167),
                            Sin( 96, f1, 4.090113,  0.021070) + Sin( 96, f2, 5.200848, 0.016702),
                            Sin( 96, f1, 4.106268,  0.030354) + Sin( 96, f2, 5.365052, 0.020153),
                            Sin( 96, f1, 4.025684,  0.023314) + Sin( 96, f2, 5.244942, 0.015904),
                            Sin( 96, f1, 9.349767,  0.012069) + Sin( 96, f2, 5.361039, 0.005883),
                            Sin( 96, f1, 8.346049,  0.022277) + Sin( 96, f2, 7.176002, 0.009288),
                            Sin( 96, f1, 8.122867,  0.026331) + Sin( 96, f2, 7.019034, 0.022370),
                            Sin( 96, f1, 7.717894,  0.017452) + Sin( 96, f2, 6.733838, 0.032021),
                            Sin( 96, f1, 6.522338,  0.018923) + Sin( 96, f2, 6.516074, 0.033520),
                            Sin( 96, f1, 6.054947,  0.034221) + Sin( 96, f2, 6.524393, 0.024903),
                            Sin( 96, f1, 5.774940,  0.038356) + Sin( 96, f2, 7.459565, 0.017287),
                            Sin( 96, f1, 5.243527,  0.028793) + Sin( 96, f2, 8.126187, 0.034978),
                            Sin( 96, f1, 4.263000,  0.027957) + Sin( 96, f2, 8.186963, 0.048969),
                            Sin( 96, f1, 3.657773,  0.041064) + Sin( 96, f2, 8.226816, 0.045193),
                            Sin( 96, f1, 3.263930,  0.049019) + Sin( 96, f2, 8.687135, 0.024347),
                            Sin( 96, f1, 9.082049,  0.044321) + Sin( 96, f2, 3.842295, 0.030374),
                            Sin( 96, f1, 8.415403,  0.035505) + Sin( 96, f2, 4.173582, 0.055650),
                            Sin( 96, f1, 7.630163,  0.035512) + Sin( 96, f2, 4.288014, 0.064659),
                            Sin( 96, f1, 6.995833,  0.043165) + Sin( 96, f2, 4.444294, 0.052612),
                            Sin( 96, f1, 6.490682,  0.045239) + Sin( 96, f2, 4.800707, 0.029404),
                            Sin( 96, f1, 5.959082,  0.037918) + Sin( 96, f2, 5.980024, 0.016063),
                            Sin( 96, f1, 5.397400,  0.029382) + Sin( 96, f2, 6.973382, 0.029828),
                            Sin( 96, f1, 4.826604,  0.019335) + Sin( 96, f2, 7.214680, 0.046351),
                            Sin( 96, f1, 3.285781,  0.010938) + Sin( 96, f2, 7.169889, 0.052425),
                            Sin( 96, f1, 8.548291,  0.030664) + Sin( 96, f2, 6.870827, 0.047175),
                            Sin( 96, f1, 8.434864,  0.047910) + Sin( 96, f2, 6.286818, 0.040684),
                            Sin( 96, f1, 8.543419,  0.047560) + Sin( 96, f2, 5.614736, 0.042603),
                            Sin( 96, f1, 8.879986,  0.030527) + Sin( 96, f2, 5.034333, 0.044148),
                            Sin( 96, f1, 4.049463,  0.018042) + Sin( 96, f2, 4.326806, 0.041165),
                            Sin( 96, f1, 4.973764,  0.045485) + Sin( 96, f2, 3.534298, 0.047881),
                            Sin( 96, f1, 5.170634,  0.070587) + Sin( 96, f2, 9.297322, 0.064120),
                            Sin( 96, f1, 5.203193,  0.075509) + Sin( 96, f2, 8.948194, 0.073951),
                            Sin( 96, f1, 5.132326,  0.057560) + Sin( 96, f2, 8.607813, 0.068614),
                            Sin( 96, f1, 4.722199,  0.022674) + Sin( 96, f2, 8.209430, 0.051768),
                            Sin( 96, f1, 8.916400,  0.028176) + Sin( 96, f2, 7.574322, 0.029809),
                            Sin( 96, f1, 8.595288,  0.057396) + Sin( 96, f2, 6.120069, 0.026059),
                            Sin( 96, f1, 8.443680,  0.065280) + Sin( 96, f2, 5.376439, 0.048856),
                            Sin( 96, f1, 8.228151,  0.054709) + Sin( 96, f2, 5.077491, 0.062800),
                            Sin( 96, f1, 7.755824,  0.038897) + Sin( 96, f2, 4.883694, 0.056271),
                            Sin( 96, f1, 6.986046,  0.033783) + Sin( 96, f2, 4.658535, 0.031691),
                            Sin( 96, f1, 6.374299,  0.038213) + Sin( 96, f2, 9.276118, 0.007629),
                            Sin( 96, f1, 5.924537,  0.041969) + Sin( 96, f2, 8.131596, 0.030914),
                            Sin( 96, f1, 5.474286,  0.043180) + Sin( 96, f2, 8.014310, 0.046585),
                            Sin( 96, f1, 5.003109,  0.041669) + Sin( 96, f2, 7.972763, 0.048401),
                            Sin( 96, f1, 4.540610,  0.037683) + Sin( 96, f2, 7.936440, 0.036564),
                            Sin( 96, f1, 4.094692,  0.032198) + Sin( 96, f2, 7.819405, 0.012876),
                            Sin( 96, f1, 3.592365,  0.023716) + Sin( 96, f2, 4.887380, 0.017222),
                            Sin( 96, f1, 8.877034,  0.014633) + Sin( 96, f2, 4.790296, 0.044196),
                            Sin( 96, f1, 7.741939,  0.024368) + Sin( 96, f2, 4.738943, 0.058835),
                            Sin( 96, f1, 7.519103,  0.042040) + Sin( 96, f2, 4.648973, 0.053434),
                            Sin( 96, f1, 7.581495,  0.052347) + Sin( 96, f2, 4.397702, 0.028580),
                            Sin( 96, f1, 7.838971,  0.046933) + Sin( 96, f2, 8.629040, 0.013473),
                            Sin( 96, f1, 8.538263,  0.032023) + Sin( 96, f2, 7.928200, 0.046434),
                            Sin( 96, f1, 3.526039,  0.035544) + Sin( 96, f2, 7.682762, 0.074648),
                            Sin( 96, f1, 4.211145,  0.064105) + Sin( 96, f2, 7.421918, 0.087325),
                            Sin( 96, f1, 4.472438,  0.084686) + Sin( 96, f2, 7.188410, 0.082152),
                            Sin( 96, f1, 4.695296,  0.075087) + Sin( 96, f2, 6.916200, 0.061585),
                            Sin( 96, f1, 5.286653,  0.044996) + Sin( 96, f2, 6.149870, 0.037403),
                            Sin( 96, f1, 6.528194,  0.045811) + Sin( 96, f2, 5.013213, 0.049103),
                            Sin( 96, f1, 7.021942,  0.071110) + Sin( 96, f2, 4.656909, 0.075720),
                            Sin( 96, f1, 7.250788,  0.079348) + Sin( 96, f2, 4.520350, 0.085283),
                            Sin( 96, f1, 7.551895,  0.073410) + Sin( 96, f2, 4.326307, 0.070561),
                            Sin( 96, f1, 7.873901,  0.059156) + Sin( 96, f2, 4.058948, 0.042226),
                            Sin( 96, f1, 8.234795,  0.037035) + Sin( 96, f2, 3.517592, 0.013821),
                            Sin( 96, f1, 9.009144,  0.020690) + Sin( 96, f2, 7.758204, 0.019611),
                            Sin( 96, f1, 3.698159,  0.022267) + Sin( 96, f2, 7.539941, 0.040223),
                            Sin( 96, f1, 4.025966,  0.029658) + Sin( 96, f2, 7.605114, 0.047061),
                            Sin( 96, f1, 3.993053,  0.033432) + Sin( 96, f2, 7.903073, 0.040150),
                            Sin( 96, f1, 3.924187,  0.037617) + Sin( 96, f2, 8.463647, 0.026403),
                            Sin( 96, f1, 3.871084,  0.046102) + Sin( 96, f2, 3.552818, 0.015451),
                            Sin( 96, f1, 3.769529,  0.053734) + Sin( 96, f2, 4.721721, 0.033521),
                            Sin( 96, f1, 3.603888,  0.053828) + Sin( 96, f2, 5.145740, 0.050683),
                            Sin( 96, f1, 3.176781,  0.042955) + Sin( 96, f2, 5.647046, 0.052174),
                            Sin( 96, f1, 8.391000,  0.036124) + Sin( 96, f2, 6.468026, 0.046982),
                            Sin( 96, f1, 7.432457,  0.056783) + Sin( 96, f2, 7.441502, 0.052757),
                            Sin( 96, f1, 6.856025,  0.080241) + Sin( 96, f2, 8.237486, 0.063557),
                            Sin( 96, f1, 6.260790,  0.091033) + Sin( 96, f2, 9.052995, 0.074748),
                            Sin( 96, f1, 5.604589,  0.091876) + Sin( 96, f2, 3.461915, 0.096826),
                            zero,
                        ]    
            
            if self.evolution >= 1:
                swap_i.append(evo)
                swap_q.append(evo)
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '02_I.WFM', [zero, p['pi + 0'], zero]) )
            self.waves.append(Waveform( '02_Q.WFM', [zero, p['pi + 90'], zero]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            # DQ-State
            # Diagonal
            
            
            self.waves.append(Waveform( '03_I.WFM', [zero, p['pi + 0'], zero] + swap_i + [zero,laser,wait,p['pi sel1 + 0'],zero]) )
            self.waves.append(Waveform( '03_Q.WFM', [zero, p['pi + 90'], zero] + swap_q + [zero,laser,wait,p['pi sel1 + 90'],zero]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', [zero, p['pi + 0'], zero] + swap_i + [zero,laser,wait,p['pi sel2 + 0'],zero]) )
            self.waves.append(Waveform( '04_Q.WFM', [zero, p['pi + 90'], zero] + swap_q + [zero,laser,wait,p['pi sel2 + 90'],zero]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            for i in self.waves:
                i.join()
            
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )        
        
class EntTomoMain( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    amp = Range(low=0., high=1, value=0.5, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    

    pi2_1 = Range(low=1., high=100000., value=32.53, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=65, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=30.95, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=60.51, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi2_3 = Range(low=1., high=100000., value=20.45, desc='length of pi/2 pulse 3st transition [ns]', label='pi/2 [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=42.04, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi2_4 = Range(low=1., high=100000., value=24.49, desc='length of pi/2 pulse 4nd transition [ns]', label='pi/2 [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    pi_4 = Range(low=1., high=100000., value=48.78, desc='length of pi pulse 4nd transition [ns]', label='pi [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    


    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)


    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( (['awgTrigger']         , 100) )
        sequence.append( ([ ]                 , 275e3) )
        sequence.append( (['laser']                 , laser) )
        sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(17) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),
                                         Item('pi2_3'),
                                         Item('pi_3'),
                                         Item('pi2_4'),
                                         Item('pi_4'),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Entanglement Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            pi_4 = int(self.pi_4 * sampling/1.0e9)
            pi2_3 = int(self.pi2_3 * sampling/1.0e9)
            pi2_4 = int(self.pi2_4 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            
            
            p['pi + 0 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi/2 + 0 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi - 0 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            p['pi/2 - 0 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            
            
            if not self.robust:
                dq_i = [    zero,  
                            p['pi - 0'],
                            Idle(10),
                        ]


                dq_q = [    zero,  
                            p['pi - 90'],
                            Idle(10),
                        ]
            else:
                f1 = (self.freq - self.freq_center) / sampling
                f2 = (self.freq_2 - self.freq_center) / sampling
                f3 = (self.freq_3 - self.freq_center) / sampling
                f4 = (self.freq_4 - self.freq_center) / sampling     


            
            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
            swap_i = [  zero,
                        Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                        Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                        Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                        Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                        Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                        Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                        Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                        Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                        Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                        Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                        Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                        Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                        Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                        Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                        Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                        Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                        Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                        Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                        Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                        Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                        Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                        Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                        Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                        Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                        Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                        Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                        Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                        Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                        Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                        Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                        Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                        Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                        Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                        Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                        Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                        Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                        Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                        Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                        Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                        Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                        Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                        Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                        Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                        Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                        Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                        Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                        Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                        Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                        Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                        Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                        Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                        Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                        Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                        Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                        Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                        Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                        Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                        Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                        Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                        Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                        Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                        Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                        Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                        Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                        Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                        Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                        Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                        Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                        Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                        Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                        Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                        Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                        Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                        Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                        Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                        Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                        Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                        Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                        Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                        Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                        Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                        Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                        Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                        Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                        Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                        Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                        Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                        Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                        Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                        Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                        Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                        Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                        Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                        Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                        Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                        Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                        Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                        Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                        Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                        Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                        Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                        Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                        Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                        Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                        Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                        Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                        Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                        Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                        Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                        Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                        Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                        Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                        Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                        Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                        Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                        Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                        Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                        Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                        Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                        Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                        Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                        Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                        Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                        Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                        Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                        Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                        Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                        Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                        Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                        Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                        Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                        Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                        Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                        Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                        Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                        Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                        Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                        Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                        Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                        Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                        Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                        zero,
                        zero,
                        ] 
                
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            ent_i=swap_i
            ent_q=swap_q
            
            

            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '01_I.WFM',[Idle(256)]) )
            self.waves.append(Waveform( '01_Q.WFM',[Idle(256)]) )
            self.main_seq.append(*self.waves[-2:], wait=True)            
            
            
            self.waves.append(Waveform( '02_I.WFM', p1_i) )
            self.waves.append(Waveform( '02_Q.WFM', p1_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '03_I.WFM', p3_i) )
            self.waves.append(Waveform( '03_Q.WFM', p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', p1_i+[Idle(250)]+p3_i) )
            self.waves.append(Waveform( '04_Q.WFM', p1_q+[Idle(250)]+p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            

            # Diagonal local
            self.waves.append(Waveform( '05_I.WFM', ent_i + [zero,]) )
            self.waves.append(Waveform( '05_Q.WFM', ent_q + [zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '06_I.WFM', ent_i + [Idle(250)]+p1_i) )
            self.waves.append(Waveform( '06_Q.WFM', ent_q + [Idle(250)]+p1_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '07_I.WFM', ent_i + [Idle(250)]+p2_i) )
            self.waves.append(Waveform( '07_Q.WFM', ent_q + [Idle(250)]+p2_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '08_I.WFM', ent_i + [Idle(250)]+p3_i) )
            self.waves.append(Waveform( '08_Q.WFM', ent_q + [Idle(250)]+p3_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '09_I.WFM', ent_i + [Idle(250)]+p4_i) )
            self.waves.append(Waveform( '09_Q.WFM', ent_q + [Idle(250)]+p4_q) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            #global

            
            self.waves.append(Waveform( '10_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(250),p['pi + 0'],Idle(int(101000*1.2)-pi_1-250),p['pi/2 + 0 2'], zero,]) )
            self.waves.append(Waveform( '10_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(250),p['pi + 90'],Idle(int(101000*1.2)-pi_1-250),p['pi/2 + 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '11_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(int(101000*1.2)-pi_1-250),Idle(250),p['pi + 0'],p['pi/2 + 0 2'], zero,]) )
            self.waves.append(Waveform( '11_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(int(101000*1.2)-pi_1-250),Idle(250),p['pi + 90'],p['pi/2 + 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)     

            self.waves.append(Waveform( '12_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(250),p['pi - 0'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 + 0 2'], zero,]) )
            self.waves.append(Waveform( '12_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(250),p['pi - 90'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 + 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '13_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 0'],p['pi/2 + 0 2'], zero,]) )
            self.waves.append(Waveform( '13_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 90'],p['pi/2 + 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)    

            self.waves.append(Waveform( '14_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(250),p['pi + 0'],Idle(int(101000*1.2)-250-pi_1),p['pi/2 - 0 2'], zero,]) )
            self.waves.append(Waveform( '14_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(250),p['pi + 90'],Idle(int(101000*1.2)-250-pi_1),p['pi/2 - 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '15_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(int(101000*1.2)-250-pi_1),Idle(250),p['pi + 0'],p['pi/2 - 0 2'], zero,]) )
            self.waves.append(Waveform( '15_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(int(101000*1.2)-250-pi_1),Idle(250),p['pi + 90'],p['pi/2 - 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)    

            self.waves.append(Waveform( '16_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(250),p['pi - 0'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 - 0 2'], zero,]) )
            self.waves.append(Waveform( '16_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(250),p['pi - 90'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 - 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '17_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 0'],p['pi/2 - 0 2'], zero,]) )
            self.waves.append(Waveform( '17_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 90'],p['pi/2 - 90 2'], zero,]) )
            self.main_seq.append(*self.waves[-2:], wait=True)   

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class EntTomoMainSeq( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    amp = Range(low=0., high=1, value=0.5, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    
    pi2_1 = Range(low=1., high=100000., value=32.53, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=65, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=30.95, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=60.51, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi2_3 = Range(low=1., high=100000., value=20.45, desc='length of pi/2 pulse 3st transition [ns]', label='pi/2 [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=42.04, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi2_4 = Range(low=1., high=100000., value=24.49, desc='length of pi/2 pulse 4nd transition [ns]', label='pi/2 [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    pi_4 = Range(low=1., high=100000., value=48.78, desc='length of pi pulse 4nd transition [ns]', label='pi [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq = Range(low=1, high=20e9, value=2783585592, desc='frequency [Hz]', label='frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958948862, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818819214 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928676667  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)

    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)


    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( (['awgTrigger']         , 100) )
        sequence.append( ([ ]                 , 235e3) )
        sequence.append( (['laser']                 , laser) )
        sequence.append( ([ ]                 , wait) )
        return sequence
    
    def _get_tau(self):
        return np.arange(17) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),
                                         Item('pi2_3'),
                                         Item('pi_3'),
                                         Item('pi2_4'),
                                         Item('pi_4'),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Entanglement Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                  )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            pi_4 = int(self.pi_4 * sampling/1.0e9)
            pi2_3 = int(self.pi2_3 * sampling/1.0e9)
            pi2_4 = int(self.pi2_4 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            
            
            p['pi + 0 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi/2 + 0 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi - 0 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            p['pi/2 - 0 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            
            zero = Idle(1)
            
            
            
            if not self.robust:
                dq_i = [    zero,  
                            p['pi - 0'],
                            Idle(10),
                        ]


                dq_q = [    zero,  
                            p['pi - 90'],
                            Idle(10),
                        ]
            else:
                f1 = (self.freq - self.freq_center) / sampling
                f2 = (self.freq_2 - self.freq_center) / sampling
                f3 = (self.freq_3 - self.freq_center) / sampling
                f4 = (self.freq_4 - self.freq_center) / sampling     



                
                p1_i = [ zero,
                        Sin(120,f1,-2.5084,0.20108) + Sin(120,f2,0.046911,0.071566)+Sin(120,f3,-1.1665,0.13479) + Sin(120,f4,-1.9974,0.14369), 
                        Sin(120,f1,2.0085,0.16713) + Sin(120,f2,0.079765,0.10512)+Sin(120,f3,0.84331,0.16055) + Sin(120,f4,2.3224,0.18655), 
                        Sin(120,f1,-1.649,0.12113) + Sin(120,f2,-0.4534,0.13787)+Sin(120,f3,-1.1257,0.11288) + Sin(120,f4,-2.032,0.12174), 
                        Sin(120,f1,-1.5823,0.15944) + Sin(120,f2,-0.28453,0.13726)+Sin(120,f3,-1.1721,0.1263) + Sin(120,f4,-1.9915,0.13758), 
                        Sin(120,f1,2.7544,0.13917) + Sin(120,f2,1.175,0.070419)+Sin(120,f3,0.80204,0.15992) + Sin(120,f4,2.319,0.18917), 
                        Sin(120,f1,-2.3034,0.16369) + Sin(120,f2,1.4636,0.14281)+Sin(120,f3,-1.1584,0.11454) + Sin(120,f4,-1.9953,0.12621), 
                        zero,
                   ]
            
                p1_q = [ zero,
                        Sin(120,f1,-0.93759,0.20108) + Sin(120,f2,1.6177,0.071566)+Sin(120,f3,0.40428,0.13479) + Sin(120,f4,-0.42665,0.14369), 
                        Sin(120,f1,3.5793,0.16713) + Sin(120,f2,1.6506,0.10512)+Sin(120,f3,2.4141,0.16055) + Sin(120,f4,3.8932,0.18655), 
                        Sin(120,f1,-0.078189,0.12113) + Sin(120,f2,1.1174,0.13787)+Sin(120,f3,0.44514,0.11288) + Sin(120,f4,-0.46117,0.12174), 
                        Sin(120,f1,-0.011522,0.15944) + Sin(120,f2,1.2863,0.13726)+Sin(120,f3,0.39868,0.1263) + Sin(120,f4,-0.42067,0.13758), 
                        Sin(120,f1,4.3252,0.13917) + Sin(120,f2,2.7458,0.070419)+Sin(120,f3,2.3728,0.15992) + Sin(120,f4,3.8898,0.18917), 
                        Sin(120,f1,-0.73262,0.16369) + Sin(120,f2,3.0344,0.14281)+Sin(120,f3,0.41242,0.11454) + Sin(120,f4,-0.42455,0.12621),
                        zero,
                   ]
                       
                       
                p2_i = [ zero,
                        Sin(120,f1,-1.2806,0.057228) + Sin(120,f2,0.91353,0.19331)+Sin(120,f3,0.46165,0.13164) + Sin(120,f4,1.0179,0.13092), 
                        Sin(120,f1,-0.29375,0.13205) + Sin(120,f2,2.4434,0.15289)+Sin(120,f3,2.4248,0.16028) + Sin(120,f4,-0.9517,0.17146), 
                        Sin(120,f1,0.68919,0.11511) + Sin(120,f2,0.047957,0.12995)+Sin(120,f3,0.31037,0.11639) + Sin(120,f4,1.0122,0.13005), 
                        Sin(120,f1,0.37744,0.16597) + Sin(120,f2,0.2613,0.15606)+Sin(120,f3,0.49325,0.12594) + Sin(120,f4,1.004,0.13812), 
                        Sin(120,f1,-0.14761,0.1046) + Sin(120,f2,2.377,0.1732)+Sin(120,f3,2.3161,0.15559) + Sin(120,f4,-0.99422,0.17922), 
                        Sin(120,f1,-1.6129,0.11502) + Sin(120,f2,0.77017,0.12749)+Sin(120,f3,0.23268,0.11415) + Sin(120,f4,1.0233,0.13395), 
                        zero,
                   ]
            
                p2_q = [ zero,
                        Sin(120,f1,0.29016,0.057228) + Sin(120,f2,2.4843,0.19331)+Sin(120,f3,2.0324,0.13164) + Sin(120,f4,2.5887,0.13092), 
                        Sin(120,f1,1.277,0.13205) + Sin(120,f2,4.0141,0.15289)+Sin(120,f3,3.9956,0.16028) + Sin(120,f4,0.6191,0.17146), 
                        Sin(120,f1,2.26,0.11511) + Sin(120,f2,1.6188,0.12995)+Sin(120,f3,1.8812,0.11639) + Sin(120,f4,2.583,0.13005), 
                        Sin(120,f1,1.9482,0.16597) + Sin(120,f2,1.8321,0.15606)+Sin(120,f3,2.064,0.12594) + Sin(120,f4,2.5748,0.13812), 
                        Sin(120,f1,1.4232,0.1046) + Sin(120,f2,3.9478,0.1732)+Sin(120,f3,3.8868,0.15559) + Sin(120,f4,0.57658,0.17922), 
                        Sin(120,f1,-0.042099,0.11502) + Sin(120,f2,2.341,0.12749)+Sin(120,f3,1.8035,0.11415) + Sin(120,f4,2.5941,0.13395), 
                        zero,
                   ]

                                              
                p4_i = [ zero,
                        Sin(120,f1,-1.9692,0.12792) + Sin(120,f2,1.3942,0.10642)+Sin(120,f3,1.8455,0.094645) + Sin(120,f4,-2.2435,0.053589), 
                        Sin(120,f1,0.62677,0.030803) + Sin(120,f2,1.4399,0.02312)+Sin(120,f3,2.3911,0.15955) + Sin(120,f4,-1.0896,0.1437), 
                        Sin(120,f1,-1.2453,0.12406) + Sin(120,f2,0.55739,0.096763)+Sin(120,f3,-0.41136,0.11547) + Sin(120,f4,-0.81626,0.094305), 
                        Sin(120,f1,-1.7211,0.10239) + Sin(120,f2,1.5972,0.097167)+Sin(120,f3,-0.38613,0.11098) + Sin(120,f4,-0.7825,0.096182), 
                        Sin(120,f1,-1.7638,0.026569) + Sin(120,f2,0.82088,0.022389)+Sin(120,f3,2.298,0.15785) + Sin(120,f4,-1.2293,0.13157), 
                        Sin(120,f1,-0.61902,0.10294) + Sin(120,f2,0.59941,0.083153)+Sin(120,f3,1.7099,0.095226) + Sin(120,f4,-2.298,0.054171), 
                        zero,
                   ]
            
                p4_q = [ zero,
                        Sin(120,f1,-0.39841,0.12792) + Sin(120,f2,2.965,0.10642)+Sin(120,f3,3.4163,0.094645) + Sin(120,f4,-0.67271,0.053589), 
                        Sin(120,f1,2.1976,0.030803) + Sin(120,f2,3.0107,0.02312)+Sin(120,f3,3.9619,0.15955) + Sin(120,f4,0.48117,0.1437), 
                        Sin(120,f1,0.3255,0.12406) + Sin(120,f2,2.1282,0.096763)+Sin(120,f3,1.1594,0.11547) + Sin(120,f4,0.75454,0.094305), 
                        Sin(120,f1,-0.15029,0.10239) + Sin(120,f2,3.168,0.097167)+Sin(120,f3,1.1847,0.11098) + Sin(120,f4,0.7883,0.096182), 
                        Sin(120,f1,-0.19298,0.026569) + Sin(120,f2,2.3917,0.022389)+Sin(120,f3,3.8688,0.15785) + Sin(120,f4,0.34151,0.13157), 
                        Sin(120,f1,0.95178,0.10294) + Sin(120,f2,2.1702,0.083153)+Sin(120,f3,3.2807,0.095226) + Sin(120,f4,-0.72717,0.054171), 
                        zero,
                   ]
                       
                p3_i = [ zero,
                        Sin(120,f1,0.28963,0.058275) + Sin(120,f2,-0.044677,0.055113)+Sin(120,f3,0.76355,0.046065) + Sin(120,f4,0.060062,0.11155), 
                        Sin(120,f1,0.57114,0.1394) + Sin(120,f2,-0.49952,0.14339)+Sin(120,f3,1.1268,0.12126) + Sin(120,f4,-0.83212,0.18144), 
                        Sin(120,f1,-0.75573,0.096483) + Sin(120,f2,1.3174,0.0751)+Sin(120,f3,0.61548,0.080298) + Sin(120,f4,1.8902,0.1109), 
                        Sin(120,f1,-0.25175,0.065366) + Sin(120,f2,0.23955,0.069499)+Sin(120,f3,0.56844,0.11589) + Sin(120,f4,2.0465,0.13014), 
                        Sin(120,f1,0.71946,0.15975) + Sin(120,f2,-0.51977,0.14692)+Sin(120,f3,1.4568,0.10755) + Sin(120,f4,-0.71855,0.1761), 
                        Sin(120,f1,-0.98643,0.11408) + Sin(120,f2,1.2228,0.09821)+Sin(120,f3,0.87424,0.064843) + Sin(120,f4,0.053581,0.12703), 
                        zero,
                   ]
            
                p3_q = [ zero,
                        Sin(120,f1,1.8604,0.058275) + Sin(120,f2,1.5261,0.055113)+Sin(120,f3,2.3343,0.046065) + Sin(120,f4,1.6309,0.11155), 
                        Sin(120,f1,2.1419,0.1394) + Sin(120,f2,1.0713,0.14339)+Sin(120,f3,2.6975,0.12126) + Sin(120,f4,0.73868,0.18144), 
                        Sin(120,f1,0.81506,0.096483) + Sin(120,f2,2.8882,0.0751)+Sin(120,f3,2.1863,0.080298) + Sin(120,f4,3.461,0.1109), 
                        Sin(120,f1,1.319,0.065366) + Sin(120,f2,1.8104,0.069499)+Sin(120,f3,2.1392,0.11589) + Sin(120,f4,3.6173,0.13014), 
                        Sin(120,f1,2.2903,0.15975) + Sin(120,f2,1.051,0.14692)+Sin(120,f3,3.0275,0.10755) + Sin(120,f4,0.85224,0.1761), 
                        Sin(120,f1,0.58437,0.11408) + Sin(120,f2,2.7936,0.09821)+Sin(120,f3,2.445,0.064843) + Sin(120,f4,1.6244,0.12703), 
                        zero,
                   ]                                        
                
                dqpi2_i = [ zero,
                            Sin( 59, f1, 1.093540,  0.076130) + Sin( 59, f2, 0.509851, 0.062588)+ Sin( 59, f3, -2.442730, 0.017227)+ Sin( 59, f4, 2.249760, 0.005961),
                            Sin( 59, f1, 0.886809,  0.083293) + Sin( 59, f2, -0.959098, 0.023318)+ Sin( 59, f3, -0.059114, 0.013474)+ Sin( 59, f4, -0.302780, 0.031838),
                            Sin( 59, f1, 1.273630,  0.046666) + Sin( 59, f2, -1.576120, 0.057356)+ Sin( 59, f3, 0.113813, 0.034072)+ Sin( 59, f4, -0.535770, 0.021166),
                            Sin( 59, f1, 2.362590,  0.058144) + Sin( 59, f2, -1.633910, 0.046235)+ Sin( 59, f3, 0.120950, 0.020934)+ Sin( 59, f4, -3.109850, 0.023095),
                            Sin( 59, f1, 2.550860,  0.083665) + Sin( 59, f2, 3.108950, 0.040261)+ Sin( 59, f3, -3.115300, 0.044660)+ Sin( 59, f4, 3.002540, 0.067334),
                            Sin( 59, f1, 2.626020,  0.100853) + Sin( 59, f2, 2.700690, 0.103885)+ Sin( 59, f3, -3.089160, 0.098830)+ Sin( 59, f4, 3.054410, 0.097615),
                            Sin( 59, f1, 2.634870,  0.124770) + Sin( 59, f2, 2.807540, 0.109907)+ Sin( 59, f3, -3.077250, 0.108478)+ Sin( 59, f4, 3.129320, 0.110198),
                            Sin( 59, f1, 2.680490,  0.129205) + Sin( 59, f2, -2.821910, 0.057056)+ Sin( 59, f3, -3.132500, 0.075094)+ Sin( 59, f4, -3.108110, 0.107773),
                            Sin( 59, f1, 2.780060,  0.100565) + Sin( 59, f2, -1.681530, 0.056816)+ Sin( 59, f3, 0.483849, 0.013819)+ Sin( 59, f4, -3.119530, 0.075077),
                            Sin( 59, f1, 2.085750,  0.042373) + Sin( 59, f2, -1.922590, 0.059395)+ Sin( 59, f3, 0.143190, 0.026391)+ Sin( 59, f4, 2.613300, 0.004043),
                            Sin( 59, f1, 0.585793,  0.093897) + Sin( 59, f2, -2.680070, 0.046475)+ Sin( 59, f3, -3.031940, 0.020610)+ Sin( 59, f4, 0.021265, 0.052260),
                            Sin( 59, f1, 0.363607,  0.132480) + Sin( 59, f2, 2.594850, 0.043986)+ Sin( 59, f3, -3.024710, 0.056371)+ Sin( 59, f4, -0.042994, 0.070056),
                            Sin( 59, f1, 0.369677,  0.125064) + Sin( 59, f2, 2.715720, 0.063816)+ Sin( 59, f3, -2.962560, 0.072648)+ Sin( 59, f4, -0.146017, 0.053080),
                            zero,
                            zero,
                       ]
                
                dqpi2_q = [ zero,
                            Sin( 59, f1, 2.664336,  0.076130) + Sin( 59, f2, 2.080647, 0.062588)+ Sin( 59, f3, -0.871934, 0.017227)+ Sin( 59, f4, 3.820556, 0.005961),
                            Sin( 59, f1, 2.457605,  0.083293) + Sin( 59, f2, 0.611698, 0.023318)+ Sin( 59, f3, 1.511683, 0.013474)+ Sin( 59, f4, 1.268016, 0.031838),
                            Sin( 59, f1, 2.844426,  0.046666) + Sin( 59, f2, -0.005324, 0.057356)+ Sin( 59, f3, 1.684609, 0.034072)+ Sin( 59, f4, 1.035026, 0.021166),
                            Sin( 59, f1, 3.933386,  0.058144) + Sin( 59, f2, -0.063114, 0.046235)+ Sin( 59, f3, 1.691746, 0.020934)+ Sin( 59, f4, -1.539054, 0.023095),
                            Sin( 59, f1, 4.121656,  0.083665) + Sin( 59, f2, 4.679746, 0.040261)+ Sin( 59, f3, -1.544504, 0.044660)+ Sin( 59, f4, 4.573336, 0.067334),
                            Sin( 59, f1, 4.196816,  0.100853) + Sin( 59, f2, 4.271486, 0.103885)+ Sin( 59, f3, -1.518364, 0.098830)+ Sin( 59, f4, 4.625206, 0.097615),
                            Sin( 59, f1, 4.205666,  0.124770) + Sin( 59, f2, 4.378336, 0.109907)+ Sin( 59, f3, -1.506454, 0.108478)+ Sin( 59, f4, 4.700116, 0.110198),
                            Sin( 59, f1, 4.251286,  0.129205) + Sin( 59, f2, -1.251114, 0.057056)+ Sin( 59, f3, -1.561704, 0.075094)+ Sin( 59, f4, -1.537314, 0.107773),
                            Sin( 59, f1, 4.350856,  0.100565) + Sin( 59, f2, -0.110734, 0.056816)+ Sin( 59, f3, 2.054645, 0.013819)+ Sin( 59, f4, -1.548734, 0.075077),
                            Sin( 59, f1, 3.656546,  0.042373) + Sin( 59, f2, -0.351794, 0.059395)+ Sin( 59, f3, 1.713986, 0.026391)+ Sin( 59, f4, 4.184096, 0.004043),
                            Sin( 59, f1, 2.156589,  0.093897) + Sin( 59, f2, -1.109274, 0.046475)+ Sin( 59, f3, -1.461144, 0.020610)+ Sin( 59, f4, 1.592062, 0.052260),
                            Sin( 59, f1, 1.934403,  0.132480) + Sin( 59, f2, 4.165646, 0.043986)+ Sin( 59, f3, -1.453914, 0.056371)+ Sin( 59, f4, 1.527802, 0.070056),
                            Sin( 59, f1, 1.940473,  0.125064) + Sin( 59, f2, 4.286516, 0.063816)+ Sin( 59, f3, -1.391764, 0.072648)+ Sin( 59, f4, 1.424779, 0.053080),
                            zero,
                            zero,
                        ]
                dqpi_i = [  zero,
                            Sin( 92, f1, -0.454538,  0.103268) + Sin( 92, f2, 0.113813, 0.083348)+ Sin( 92, f3, 1.035260, 0.039526)+ Sin( 92, f4, -0.235299, 0.060181),
                            Sin( 92, f1, -1.242230,  0.082551) + Sin( 92, f2, 2.342580, 0.112927)+ Sin( 92, f3, 0.683590, 0.023966)+ Sin( 92, f4, -1.392770, 0.052857),
                            Sin( 92, f1, -0.570051,  0.081753) + Sin( 92, f2, 2.421540, 0.108091)+ Sin( 92, f3, 3.110800, 0.050681)+ Sin( 92, f4, -1.104930, 0.071553),
                            Sin( 92, f1, 1.613880,  0.046939) + Sin( 92, f2, 0.358534, 0.092163)+ Sin( 92, f3, 0.301257, 0.030780)+ Sin( 92, f4, 2.443500, 0.077083),
                            Sin( 92, f1, 2.452450,  0.072463) + Sin( 92, f2, 0.179178, 0.086158)+ Sin( 92, f3, 0.877995, 0.080878)+ Sin( 92, f4, 2.088550, 0.055870),
                            Sin( 92, f1, -0.026582,  0.065331) + Sin( 92, f2, 1.312160, 0.021794)+ Sin( 92, f3, -0.733777, 0.083284)+ Sin( 92, f4, 2.707670, 0.071625),
                            Sin( 92, f1, 0.185420,  0.089660) + Sin( 92, f2, 2.896840, 0.088713)+ Sin( 92, f3, -0.951154, 0.063644)+ Sin( 92, f4, -0.256942, 0.018436),
                            Sin( 92, f1, 2.154040,  0.063936) + Sin( 92, f2, 2.894950, 0.075998)+ Sin( 92, f3, -1.523470, 0.062110)+ Sin( 92, f4, -2.866290, 0.063553),
                            Sin( 92, f1, -0.452755,  0.053600) + Sin( 92, f2, 1.462200, 0.025371)+ Sin( 92, f3, -2.752500, 0.018863)+ Sin( 92, f4, 0.866778, 0.039607),
                            Sin( 92, f1, -0.785428,  0.130940) + Sin( 92, f2, 2.371360, 0.061561)+ Sin( 92, f3, 1.864440, 0.024270)+ Sin( 92, f4, 0.524808, 0.077120),
                            Sin( 92, f1, -0.785161,  0.130910) + Sin( 92, f2, -1.097850, 0.044052)+ Sin( 92, f3, 0.311399, 0.061460)+ Sin( 92, f4, 0.177093, 0.067005),
                            Sin( 92, f1, 2.418080,  0.076263) + Sin( 92, f2, -0.792928, 0.120430)+ Sin( 92, f3, 0.707349, 0.077137)+ Sin( 92, f4, -2.392780, 0.091332),
                            Sin( 92, f1, 2.399540,  0.125744) + Sin( 92, f2, -0.792833, 0.120517)+ Sin( 92, f3, 1.169180, 0.067201)+ Sin( 92, f4, -2.316320, 0.091997),
                            Sin( 92, f1, 2.361680,  0.090486) + Sin( 92, f2, -0.794382, 0.120697)+ Sin( 92, f3, 0.758710, 0.082666)+ Sin( 92, f4, -2.379980, 0.087343),
                            Sin( 92, f1, -0.784572,  0.130835) + Sin( 92, f2, -0.797348, 0.028802)+ Sin( 92, f3, 0.493688, 0.066926)+ Sin( 92, f4, 0.256819, 0.068131),
                            Sin( 92, f1, -0.785373,  0.130937) + Sin( 92, f2, 2.564450, 0.060220)+ Sin( 92, f3, 1.758050, 0.025936)+ Sin( 92, f4, 0.557028, 0.078751),
                            Sin( 92, f1, -0.544084,  0.075015) + Sin( 92, f2, 0.524433, 0.011388)+ Sin( 92, f3, -2.677740, 0.024689)+ Sin( 92, f4, 1.101670, 0.026620),
                            Sin( 92, f1, 1.673410,  0.037731) + Sin( 92, f2, 2.907920, 0.060105)+ Sin( 92, f3, -1.420000, 0.062482)+ Sin( 92, f4, -2.766220, 0.069645),
                            Sin( 92, f1, 0.046720,  0.092770) + Sin( 92, f2, 2.903200, 0.088746)+ Sin( 92, f3, -0.752501, 0.051731)+ Sin( 92, f4, 0.036126, 0.018399),
                            Sin( 92, f1, -0.153025,  0.079506) + Sin( 92, f2, 1.638970, 0.012389)+ Sin( 92, f3, -0.744956, 0.083483)+ Sin( 92, f4, 2.623440, 0.067547),
                            Sin( 92, f1, 2.332040,  0.056948) + Sin( 92, f2, 0.182443, 0.086099)+ Sin( 92, f3, 0.841935, 0.082136)+ Sin( 92, f4, 2.359890, 0.069574),
                            Sin( 92, f1, 1.639010,  0.052444) + Sin( 92, f2, 0.442599, 0.095738)+ Sin( 92, f3, 0.057032, 0.023826)+ Sin( 92, f4, 2.609420, 0.065344),
                            Sin( 92, f1, -0.488667,  0.087965) + Sin( 92, f2, 2.452440, 0.110080)+ Sin( 92, f3, 2.712520, 0.057271)+ Sin( 92, f4, -1.275270, 0.064742),
                            Sin( 92, f1, -1.114550,  0.088911) + Sin( 92, f2, 2.392690, 0.110481)+ Sin( 92, f3, -0.170951, 0.019454)+ Sin( 92, f4, -1.130650, 0.057024),
                            Sin( 92, f1, -0.467163,  0.102983) + Sin( 92, f2, -0.050119, 0.083821)+ Sin( 92, f3, 0.987139, 0.046402)+ Sin( 92, f4, -0.683360, 0.037041),
                            zero,
                            zero,
                       ]
                
                dqpi_q = [  zero,
                            Sin( 92, f1, 1.116258,  0.103268) + Sin( 92, f2, 1.684609, 0.083348)+ Sin( 92, f3, 2.606056, 0.039526)+ Sin( 92, f4, 1.335497, 0.060181),
                            Sin( 92, f1, 0.328566,  0.082551) + Sin( 92, f2, 3.913376, 0.112927)+ Sin( 92, f3, 2.254386, 0.023966)+ Sin( 92, f4, 0.178026, 0.052857),
                            Sin( 92, f1, 1.000745,  0.081753) + Sin( 92, f2, 3.992336, 0.108091)+ Sin( 92, f3, 4.681596, 0.050681)+ Sin( 92, f4, 0.465866, 0.071553),
                            Sin( 92, f1, 3.184676,  0.046939) + Sin( 92, f2, 1.929330, 0.092163)+ Sin( 92, f3, 1.872053, 0.030780)+ Sin( 92, f4, 4.014296, 0.077083),
                            Sin( 92, f1, 4.023246,  0.072463) + Sin( 92, f2, 1.749974, 0.086158)+ Sin( 92, f3, 2.448791, 0.080878)+ Sin( 92, f4, 3.659346, 0.055870),
                            Sin( 92, f1, 1.544214,  0.065331) + Sin( 92, f2, 2.882956, 0.021794)+ Sin( 92, f3, 0.837019, 0.083284)+ Sin( 92, f4, 4.278466, 0.071625),
                            Sin( 92, f1, 1.756216,  0.089660) + Sin( 92, f2, 4.467636, 0.088713)+ Sin( 92, f3, 0.619642, 0.063644)+ Sin( 92, f4, 1.313854, 0.018436),
                            Sin( 92, f1, 3.724836,  0.063936) + Sin( 92, f2, 4.465746, 0.075998)+ Sin( 92, f3, 0.047326, 0.062110)+ Sin( 92, f4, -1.295494, 0.063553),
                            Sin( 92, f1, 1.118041,  0.053600) + Sin( 92, f2, 3.032996, 0.025371)+ Sin( 92, f3, -1.181704, 0.018863)+ Sin( 92, f4, 2.437574, 0.039607),
                            Sin( 92, f1, 0.785368,  0.130940) + Sin( 92, f2, 3.942156, 0.061561)+ Sin( 92, f3, 3.435236, 0.024270)+ Sin( 92, f4, 2.095604, 0.077120),
                            Sin( 92, f1, 0.785635,  0.130910) + Sin( 92, f2, 0.472946, 0.044052)+ Sin( 92, f3, 1.882195, 0.061460)+ Sin( 92, f4, 1.747889, 0.067005),
                            Sin( 92, f1, 3.988876,  0.076263) + Sin( 92, f2, 0.777868, 0.120430)+ Sin( 92, f3, 2.278145, 0.077137)+ Sin( 92, f4, -0.821984, 0.091332),
                            Sin( 92, f1, 3.970336,  0.125744) + Sin( 92, f2, 0.777963, 0.120517)+ Sin( 92, f3, 2.739976, 0.067201)+ Sin( 92, f4, -0.745524, 0.091997),
                            Sin( 92, f1, 3.932476,  0.090486) + Sin( 92, f2, 0.776414, 0.120697)+ Sin( 92, f3, 2.329506, 0.082666)+ Sin( 92, f4, -0.809184, 0.087343),
                            Sin( 92, f1, 0.786224,  0.130835) + Sin( 92, f2, 0.773448, 0.028802)+ Sin( 92, f3, 2.064484, 0.066926)+ Sin( 92, f4, 1.827615, 0.068131),
                            Sin( 92, f1, 0.785423,  0.130937) + Sin( 92, f2, 4.135246, 0.060220)+ Sin( 92, f3, 3.328846, 0.025936)+ Sin( 92, f4, 2.127824, 0.078751),
                            Sin( 92, f1, 1.026712,  0.075015) + Sin( 92, f2, 2.095229, 0.011388)+ Sin( 92, f3, -1.106944, 0.024689)+ Sin( 92, f4, 2.672466, 0.026620),
                            Sin( 92, f1, 3.244206,  0.037731) + Sin( 92, f2, 4.478716, 0.060105)+ Sin( 92, f3, 0.150796, 0.062482)+ Sin( 92, f4, -1.195424, 0.069645),
                            Sin( 92, f1, 1.617516,  0.092770) + Sin( 92, f2, 4.473996, 0.088746)+ Sin( 92, f3, 0.818295, 0.051731)+ Sin( 92, f4, 1.606923, 0.018399),
                            Sin( 92, f1, 1.417771,  0.079506) + Sin( 92, f2, 3.209766, 0.012389)+ Sin( 92, f3, 0.825840, 0.083483)+ Sin( 92, f4, 4.194236, 0.067547),
                            Sin( 92, f1, 3.902836,  0.056948) + Sin( 92, f2, 1.753239, 0.086099)+ Sin( 92, f3, 2.412731, 0.082136)+ Sin( 92, f4, 3.930686, 0.069574),
                            Sin( 92, f1, 3.209806,  0.052444) + Sin( 92, f2, 2.013395, 0.095738)+ Sin( 92, f3, 1.627828, 0.023826)+ Sin( 92, f4, 4.180216, 0.065344),
                            Sin( 92, f1, 1.082129,  0.087965) + Sin( 92, f2, 4.023236, 0.110080)+ Sin( 92, f3, 4.283316, 0.057271)+ Sin( 92, f4, 0.295526, 0.064742),
                            Sin( 92, f1, 0.456246,  0.088911) + Sin( 92, f2, 3.963486, 0.110481)+ Sin( 92, f3, 1.399845, 0.019454)+ Sin( 92, f4, 0.440146, 0.057024),
                            Sin( 92, f1, 1.103633,  0.102983) + Sin( 92, f2, 1.520678, 0.083821)+ Sin( 92, f3, 2.557935, 0.046402)+ Sin( 92, f4, 0.887436, 0.037041),
                            zero,
                            zero,
                       ]
                
                
                dqdqpi2_i = [ zero,
                            Sin( 54, f1, 2.018300,  0.105683) + Sin( 54, f2, 2.544370, 0.031793)+ Sin( 54, f3, 2.124710, 0.021333)+ Sin( 54, f4, 1.106500, 0.077730),
                            Sin( 54, f1, 2.107940,  0.100611) + Sin( 54, f2, -2.728500, 0.011277)+ Sin( 54, f3, 2.595420, 0.028758)+ Sin( 54, f4, 1.288230, 0.068920),
                            Sin( 54, f1, 2.575840,  0.063408) + Sin( 54, f2, -1.331710, 0.045781)+ Sin( 54, f3, 3.043670, 0.031299)+ Sin( 54, f4, 1.555790, 0.030443),
                            Sin( 54, f1, -2.610000,  0.071057) + Sin( 54, f2, -1.414230, 0.084703)+ Sin( 54, f3, -2.386890, 0.060560)+ Sin( 54, f4, -2.314930, 0.014941),
                            Sin( 54, f1, -2.606090,  0.076655) + Sin( 54, f2, -1.698230, 0.125012)+ Sin( 54, f3, -2.074640, 0.124395)+ Sin( 54, f4, -2.629390, 0.011731),
                            Sin( 54, f1, 2.189430,  0.076041) + Sin( 54, f2, -1.922630, 0.153003)+ Sin( 54, f3, -2.201840, 0.119373)+ Sin( 54, f4, 1.342690, 0.057931),
                            Sin( 54, f1, 1.554830,  0.152820) + Sin( 54, f2, -2.026130, 0.162186)+ Sin( 54, f3, -2.746020, 0.102872)+ Sin( 54, f4, 1.139280, 0.118437),
                            Sin( 54, f1, 1.387170,  0.170944) + Sin( 54, f2, -2.055090, 0.162519)+ Sin( 54, f3, -2.982980, 0.109756)+ Sin( 54, f4, 1.042020, 0.136647),
                            Sin( 54, f1, 1.484690,  0.150285) + Sin( 54, f2, -2.031540, 0.165220)+ Sin( 54, f3, -2.725630, 0.114524)+ Sin( 54, f4, 1.007010, 0.114255),
                            Sin( 54, f1, 2.131330,  0.062347) + Sin( 54, f2, -1.924500, 0.156723)+ Sin( 54, f3, -2.316670, 0.133452)+ Sin( 54, f4, 1.031100, 0.042318),
                            Sin( 54, f1, -2.569790,  0.080422) + Sin( 54, f2, -1.716980, 0.130705)+ Sin( 54, f3, -2.229870, 0.134220)+ Sin( 54, f4, -2.561750, 0.021451),
                            Sin( 54, f1, -2.669450,  0.082448) + Sin( 54, f2, -1.548840, 0.089300)+ Sin( 54, f3, -2.732130, 0.073211)+ Sin( 54, f4, -2.718460, 0.027786),
                            Sin( 54, f1, 2.619420,  0.068363) + Sin( 54, f2, -1.609040, 0.045594)+ Sin( 54, f3, 2.892010, 0.045121)+ Sin( 54, f4, 1.883520, 0.028257),
                            Sin( 54, f1, 2.056220,  0.098093) + Sin( 54, f2, -2.894530, 0.009838)+ Sin( 54, f3, 2.551020, 0.027375)+ Sin( 54, f4, 1.330440, 0.063627),
                            Sin( 54, f1, 2.008920,  0.104870) + Sin( 54, f2, 1.972030, 0.022360)+ Sin( 54, f3, 0.999274, 0.013031)+ Sin( 54, f4, 1.146140, 0.074802),
                            zero,
                       ]
                
                dqdqpi2_q = [ zero,
                            Sin( 54, f1, 3.589096,  0.105683) + Sin( 54, f2, 4.115166, 0.031793)+ Sin( 54, f3, 3.695506, 0.021333)+ Sin( 54, f4, 2.677296, 0.077730),
                            Sin( 54, f1, 3.678736,  0.100611) + Sin( 54, f2, -1.157704, 0.011277)+ Sin( 54, f3, 4.166216, 0.028758)+ Sin( 54, f4, 2.859026, 0.068920),
                            Sin( 54, f1, 4.146636,  0.063408) + Sin( 54, f2, 0.239086, 0.045781)+ Sin( 54, f3, 4.614466, 0.031299)+ Sin( 54, f4, 3.126586, 0.030443),
                            Sin( 54, f1, -1.039204,  0.071057) + Sin( 54, f2, 0.156566, 0.084703)+ Sin( 54, f3, -0.816094, 0.060560)+ Sin( 54, f4, -0.744134, 0.014941),
                            Sin( 54, f1, -1.035294,  0.076655) + Sin( 54, f2, -0.127434, 0.125012)+ Sin( 54, f3, -0.503844, 0.124395)+ Sin( 54, f4, -1.058594, 0.011731),
                            Sin( 54, f1, 3.760226,  0.076041) + Sin( 54, f2, -0.351834, 0.153003)+ Sin( 54, f3, -0.631044, 0.119373)+ Sin( 54, f4, 2.913486, 0.057931),
                            Sin( 54, f1, 3.125626,  0.152820) + Sin( 54, f2, -0.455334, 0.162186)+ Sin( 54, f3, -1.175224, 0.102872)+ Sin( 54, f4, 2.710076, 0.118437),
                            Sin( 54, f1, 2.957966,  0.170944) + Sin( 54, f2, -0.484294, 0.162519)+ Sin( 54, f3, -1.412184, 0.109756)+ Sin( 54, f4, 2.612816, 0.136647),
                            Sin( 54, f1, 3.055486,  0.150285) + Sin( 54, f2, -0.460744, 0.165220)+ Sin( 54, f3, -1.154834, 0.114524)+ Sin( 54, f4, 2.577806, 0.114255),
                            Sin( 54, f1, 3.702126,  0.062347) + Sin( 54, f2, -0.353704, 0.156723)+ Sin( 54, f3, -0.745874, 0.133452)+ Sin( 54, f4, 2.601896, 0.042318),
                            Sin( 54, f1, -0.998994,  0.080422) + Sin( 54, f2, -0.146184, 0.130705)+ Sin( 54, f3, -0.659074, 0.134220)+ Sin( 54, f4, -0.990954, 0.021451),
                            Sin( 54, f1, -1.098654,  0.082448) + Sin( 54, f2, 0.021956, 0.089300)+ Sin( 54, f3, -1.161334, 0.073211)+ Sin( 54, f4, -1.147664, 0.027786),
                            Sin( 54, f1, 4.190216,  0.068363) + Sin( 54, f2, -0.038244, 0.045594)+ Sin( 54, f3, 4.462806, 0.045121)+ Sin( 54, f4, 3.454316, 0.028257),
                            Sin( 54, f1, 3.627016,  0.098093) + Sin( 54, f2, -1.323734, 0.009838)+ Sin( 54, f3, 4.121816, 0.027375)+ Sin( 54, f4, 2.901236, 0.063627),
                            Sin( 54, f1, 3.579716,  0.104870) + Sin( 54, f2, 3.542826, 0.022360)+ Sin( 54, f3, 2.570070, 0.013031)+ Sin( 54, f4, 2.716936, 0.074802),
                            zero,
                        ]                 
            
            # Waveforms
            self.waves = []
            main_seq = Sequence('ESPIN_TOMO.SEQ')
            sub_seq=[]           
            
            mod = Idle(0)
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
            # Reference
            name_x = '01_I.WFM' 
            name_y = '01_Q.WFM'             
            sup_x = Waveform(name_x, Idle(256))
            sup_y = Waveform(name_y, Idle(256))
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_01.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
          
            name_x = '02_I.WFM' 
            name_y = '02_Q.WFM'             
            sup_x = Waveform(name_x, p1_i)
            sup_y = Waveform(name_y, p1_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_02.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            name_x = '03_I.WFM' 
            name_y = '03_Q.WFM'             
            sup_x = Waveform(name_x, p3_i)
            sup_y = Waveform(name_y, p3_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            name = 'Tomo_03.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            name_x = '04_I.WFM' 
            name_y = '04_Q.WFM'             
            dup_x = Waveform(name_x, p1_i+[Idle(250)]+p3_i)
            dup_y = Waveform(name_y, p1_q+[Idle(250)]+p3_q)
            self.waves.append(dup_x)
            self.waves.append(dup_y)
            name = 'Tomo_04.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(dup_x, dup_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)

            
            evol = Idle(int(self.evolution * sampling / 1.0e9))
            ent_i=dqpi2_i+[evol]+dqpi_i+[evol]+dqdqpi2_i
            ent_q=dqpi2_q+[evol]+dqpi_q+[evol]+dqdqpi2_q
            
            # Diagonal local
            name_x = 'ENT_I.WFM' 
            name_y = 'ENT_Q.WFM' 
            
            sup_x = Waveform(name_x, ent_i)
            sup_y = Waveform(name_y, ent_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            t_0 = sup_x.duration
                      
            
            
            name_x = '05_I.WFM' 
            name_y = '05_Q.WFM'             
            ref_x = Waveform(name_x, [zero])
            ref_y = Waveform(name_y, [zero])
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_05.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)
            
            name_x = '06_I.WFM' 
            name_y = '06_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p1_i,t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p1_q,t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_06.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)            
            
            name_x = '07_I.WFM' 
            name_y = '07_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p2_i,t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p2_q,t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_07.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            name_x = '08_I.WFM' 
            name_y = '08_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p3_i,t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p3_q,t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_08.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  

            name_x = '09_I.WFM' 
            name_y = '09_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250)]+p4_i,t_0 )
            ref_y = Waveform(name_y, [Idle(250)]+p4_q,t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            name = 'Tomo_09.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)              
            
            #global
            t_0 = sup_x.duration
            name_x = '10_1_I.WFM' 
            name_y = '10_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250),p['pi/2 + 0 2']],t_0 )
            ref_y = Waveform(name_y, [Idle(250),p['pi/2 + 90 2']],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = 101000*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '10_2_I.WFM' 
            name_y = '10_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi + 0 2'],Idle(250),p['pi + 0']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi + 90 2'],Idle(250),p['pi + 90']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_1-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '10_3_I.WFM' 
            name_y = '10_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi/2 + 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi/2 + 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_10.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '11_2_I.WFM' 
            name_y = '11_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi + 0 2']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi + 90 2']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_1-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 = ref2_x.duration + repeat_2 * 256
            name_x = '11_3_I.WFM' 
            name_y = '11_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi + 0'],Idle(250),p['pi/2 + 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi + 90'],Idle(250),p['pi/2 + 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_11.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
                
            t_0 = sup_x.duration
            name_x = '12_1_I.WFM' 
            name_y = '12_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250),p['pi/2 + 0 2']],t_0 )
            ref_y = Waveform(name_y, [Idle(250),p['pi/2 + 90 2']],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = 101000*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '12_2_I.WFM' 
            name_y = '12_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi + 0 2'],Idle(250),p['pi - 0']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi + 90 2'],Idle(250),p['pi - 90']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_2-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '12_3_I.WFM' 
            name_y = '12_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi/2 + 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi/2 + 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_12.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '13_2_I.WFM' 
            name_y = '13_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi + 0 2']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi + 90 2']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_2-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 = ref2_x.duration + repeat_2 * 256
            name_x = '13_3_I.WFM' 
            name_y = '13_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi - 0'],Idle(250),p['pi/2 + 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi - 90'],Idle(250),p['pi/2 + 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_13.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
           
            t_0 = sup_x.duration
            name_x = '14_1_I.WFM' 
            name_y = '14_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250),p['pi/2 - 0 2']],t_0 )
            ref_y = Waveform(name_y, [Idle(250),p['pi/2 - 90 2']],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = 101000*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '14_2_I.WFM' 
            name_y = '14_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi - 0 2'],Idle(250),p['pi + 0']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi - 90 2'],Idle(250),p['pi + 90']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_1-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '14_3_I.WFM' 
            name_y = '14_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi/2 - 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi/2 - 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_14.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '15_2_I.WFM' 
            name_y = '15_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi - 0 2']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi - 90 2']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_1-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 = ref2_x.duration + repeat_2 * 256
            name_x = '15_3_I.WFM' 
            name_y = '15_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi + 0'],Idle(250),p['pi/2 - 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi + 90'],Idle(250),p['pi/2 - 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_15.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            name_x = '16_1_I.WFM' 
            name_y = '16_1_Q.WFM'             
            ref_x = Waveform(name_x, [Idle(250),p['pi/2 - 0 2']],t_0 )
            ref_y = Waveform(name_y, [Idle(250),p['pi/2 - 90 2']],t_0 )
            self.waves.append(ref_x)
            self.waves.append(ref_y)
            t_1 = 101000*1.2 - ref_x.stub
            repeat_1 = int(t_1 / 256)
            mod.duration = int(t_1 % 256)
            t_0 += ref_x.duration + repeat_1 * 256
            name_x = '16_2_I.WFM' 
            name_y = '16_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi - 0 2'],Idle(250),p['pi - 0']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi - 90 2'],Idle(250),p['pi - 90']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_2-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 += ref2_x.duration + repeat_2 * 256
            name_x = '16_3_I.WFM' 
            name_y = '16_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi/2 - 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi/2 - 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_16.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            t_0 = sup_x.duration
            t_0 += ref_x.duration + repeat_1 * 256
            mod.duration = int(t_1 % 256)
            name_x = '17_2_I.WFM' 
            name_y = '17_2_Q.WFM'  
            ref2_x = Waveform(name_x, [mod,p['pi - 0 2']],t_0 )
            ref2_y = Waveform(name_y, [mod,p['pi - 90 2']],t_0 )
            self.waves.append(ref2_x)
            self.waves.append(ref2_y)
            t_2 = 101000*1.2-ref2_x.stub-pi_2-250
            repeat_2 = int(t_2 / 256)
            mod.duration = int(t_2 % 256)
            t_0 = ref2_x.duration + repeat_2 * 256
            name_x = '17_3_I.WFM' 
            name_y = '17_3_Q.WFM'  
            map_x = Waveform(name_x, [mod,p['pi - 0'],Idle(250),p['pi/2 - 0 2'],Idle(1)],t_0 )
            map_y = Waveform(name_y, [mod,p['pi - 90'],Idle(250),p['pi/2 - 90 2'],Idle(1)],t_0 )
            self.waves.append(map_x)
            self.waves.append(map_y)
            name = 'Tomo_17.SEQ'
            sub_seq=Sequence(name)
            sub_seq.append(sup_x, sup_y)
            sub_seq.append(ref_x, ref_y)
            sub_seq.append(evo, evo,repeat=repeat_1)
            sub_seq.append(ref2_x, ref2_y)
            sub_seq.append(evo, evo,repeat=repeat_2)
            sub_seq.append(map_x, map_y)
            AWG.upload(sub_seq)
            main_seq.append(sub_seq,wait=True)  
            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
              
class EntTomoMainCS( Pulsed ):
    """Electron Spin Tomography measurement.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    amp = Range(low=0., high=1, value=0.5, desc='Normalized amplitude of waveform', label='WFM amp', mode='text', auto_set=False, enter_set=True)
    
    pi2_1 = Range(low=1., high=100000., value=32.53, desc='length of pi/2 pulse 1st transition [ns]', label='pi/2 [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi_1 = Range(low=1., high=100000., value=65, desc='length of pi pulse 1st transition [ns]', label='pi [ns] 1st trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=30.95, desc='length of pi/2 pulse 2nd transition [ns]', label='pi/2 [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi_2 = Range(low=1., high=100000., value=60.51, desc='length of pi pulse 2nd transition [ns]', label='pi [ns] 2nd trans', mode='text', auto_set=False, enter_set=True)
    pi2_3 = Range(low=1., high=100000., value=20.45, desc='length of pi/2 pulse 3st transition [ns]', label='pi/2 [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi_3 = Range(low=1., high=100000., value=42.04, desc='length of pi pulse 3st transition [ns]', label='pi [ns] 3st trans', mode='text', auto_set=False, enter_set=True)
    pi2_4 = Range(low=1., high=100000., value=24.49, desc='length of pi/2 pulse 4nd transition [ns]', label='pi/2 [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    pi_4 = Range(low=1., high=100000., value=48.78, desc='length of pi pulse 4nd transition [ns]', label='pi [ns] 4nd trans', mode='text', auto_set=False, enter_set=True)
    
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    robust = Bool(True, desc='Create DQ superposition with robust pulses. Make sure to have a 10 MHz Rabi field.', label='robust')
    
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency [Hz]', label='frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)

    
    reload = True
    
    def __init__(self):
        Pulsed.__init__(self)


    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( (['current','current2'], 2e6) )
        sequence.append( (['current2']      , wait) )
        sequence.append( ([ ]                 , 300e3) )
        sequence.append( ([ ]                 , wait) )
        sequence.append( (['laser']                 , laser) )
        return sequence
    
    def _get_tau(self):
        return np.arange(17) + 1
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'power', 'vpp', 'amp', 'pi_1', 'pi_2', 'pi2_1', 'pi2_2',
                         'freq_center', 'robust', 'evolution',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens',
                         '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('power', width=40),
                                         Item('amp', width=40),
                                         Item('vpp', width=40),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         Item('evolution', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('robust'),
                                         ),
                                 HGroup( Item('pi2_1'),
                                         Item('pi_1'),
                                         Item('pi2_2'),
                                         Item('pi_2'),
                                         Item('pi2_3'),
                                         Item('pi_3'),
                                         Item('pi2_4'),
                                         Item('pi_4'),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                         Item('progress', style='readonly'),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Entanglement Tomography', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq', 'power', 'start_time', 'end_time', 'time_step','freq_center',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 'show_fit',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            pi_4 = int(self.pi_4 * sampling/1.0e9)
            pi2_3 = int(self.pi2_3 * sampling/1.0e9)
            pi2_4 = int(self.pi2_4 * sampling/1.0e9)
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi + 180']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi + 270']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 + 270'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            # ms= 0 <> ms = -1
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi - 180']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi - 270']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 - 180'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, np.pi ,self.amp)
            p['pi/2 - 270'] = Sin( pi2_2, (self.freq_2 - self.freq_center)/sampling, 3*np.pi/2 ,self.amp)
            
            
            
            p['pi + 0 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90 2']     = Sin( pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi/2 + 0 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90 2']     = Sin( pi2_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            p['pi - 0 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90 2']     = Sin( pi_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            p['pi/2 - 0 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90 2']     = Sin( pi2_4, (self.freq_4 - self.freq_center)/sampling, np.pi/2  ,self.amp)
            
            
            zero = Idle(1)
            evo = Idle(int(self.evolution * sampling / 1.0e9))
            
            
            if not self.robust:
                dq_i = [    zero,  
                            p['pi - 0'],
                            Idle(10),
                        ]


                dq_q = [    zero,  
                            p['pi - 90'],
                            Idle(10),
                        ]
            else:
                f1 = (self.freq - self.freq_center) / sampling
                f2 = (self.freq_2 - self.freq_center) / sampling
                f3 = (self.freq_3 - self.freq_center) / sampling
                f4 = (self.freq_4 - self.freq_center) / sampling     



            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
            swap_i = [  zero,
                        Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                        Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                        Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                        Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                        Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                        Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                        Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                        Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                        Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                        Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                        Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                        Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                        Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                        Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                        Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                        Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                        Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                        Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                        Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                        Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                        Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                        Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                        Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                        Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                        Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                        Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                        Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                        Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                        Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                        Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                        Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                        Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                        Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                        Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                        Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                        Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                        Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                        Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                        Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                        Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                        Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                        Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                        Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                        Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                        Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                        Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                        Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                        Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                        Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                        Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                        Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                        Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                        Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                        Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                        Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                        Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                        Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                        Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                        Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                        Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                        Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                        Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                        Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                        Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                        Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                        Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                        Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                        Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                        Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                        Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                        Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                        Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                        Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                        Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                        Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                        Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                        Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                        Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                        Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                        Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                        Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                        Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                        Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                        Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                        Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                        Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                        Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                        Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                        Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                        Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                        Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                        Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                        Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                        Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                        Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                        Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                        Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                        Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                        Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                        Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                        Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                        Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                        Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                        Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                        Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                        Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                        Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                        Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                        Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                        Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                        Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                        Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                        Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                        Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                        Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                        Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                        Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                        Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                        Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                        Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                        Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                        Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                        Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                        Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                        Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                        Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                        Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                        Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                        Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                        Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                        Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                        Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                        Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                        Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                        Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                        Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                        Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                        Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                        Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                        Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                        Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                        zero,
                        zero,
                        ]  
                    
                
                
                
 
            ent_i=dqpi2_i+[evo]+dqpi_i+[evo]+dqdqpi2_i
            ent_q=dqpi2_q+[evo]+dqpi_q+[evo]+dqdqpi2_q
            
            
            marker=[Idle(1000),Idle(3600,marker1=1,marker2=1),Idle(1000)]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ESPIN_TOMO.SEQ')
            
            # Reference
            self.waves.append(Waveform( '01_I.WFM',marker) )
            self.waves.append(Waveform( '01_Q.WFM',marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)            
            
            
            self.waves.append(Waveform( '02_I.WFM', p1_i+marker) )
            self.waves.append(Waveform( '02_Q.WFM', p1_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '03_I.WFM', p3_i+marker) )
            self.waves.append(Waveform( '03_Q.WFM', p3_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '04_I.WFM', p1_i+[Idle(250)]+p3_i+marker) )
            self.waves.append(Waveform( '04_Q.WFM', p1_q+[Idle(250)]+p3_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            

            # Diagonal local
            self.waves.append(Waveform( '05_I.WFM', ent_i + [zero,]+marker) )
            self.waves.append(Waveform( '05_Q.WFM', ent_q + [zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '06_I.WFM', ent_i + [Idle(250)]+p1_i+marker) )
            self.waves.append(Waveform( '06_Q.WFM', ent_q + [Idle(250)]+p1_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '07_I.WFM', ent_i + [Idle(250)]+p2_i+marker) )
            self.waves.append(Waveform( '07_Q.WFM', ent_q + [Idle(250)]+p2_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '08_I.WFM', ent_i + [Idle(250)]+p3_i+marker) )
            self.waves.append(Waveform( '08_Q.WFM', ent_q + [Idle(250)]+p3_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            self.waves.append(Waveform( '09_I.WFM', ent_i + [Idle(250)]+p4_i+marker) )
            self.waves.append(Waveform( '09_Q.WFM', ent_q + [Idle(250)]+p4_q+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)
            
            #global

            
            self.waves.append(Waveform( '10_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(250),p['pi + 0'],Idle(int(101000*1.2)-pi_1-250),p['pi/2 + 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '10_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(250),p['pi + 90'],Idle(int(101000*1.2)-pi_1-250),p['pi/2 + 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '11_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(int(101000*1.2)-pi_1-250),Idle(250),p['pi + 0'],p['pi/2 + 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '11_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(int(101000*1.2)-pi_1-250),Idle(250),p['pi + 90'],p['pi/2 + 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)     

            self.waves.append(Waveform( '12_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(250),p['pi - 0'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 + 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '12_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(250),p['pi - 90'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 + 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '13_I.WFM', ent_i + [Idle(250),p['pi/2 + 0 2'],Idle(int(101000*1.2)),p['pi + 0 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 0'],p['pi/2 + 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '13_Q.WFM', ent_q + [Idle(250),p['pi/2 + 90 2'],Idle(int(101000*1.2)),p['pi + 90 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 90'],p['pi/2 + 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)    

            self.waves.append(Waveform( '14_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(250),p['pi + 0'],Idle(int(101000*1.2)-250-pi_1),p['pi/2 - 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '14_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(250),p['pi + 90'],Idle(int(101000*1.2)-250-pi_1),p['pi/2 - 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '15_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(int(101000*1.2)-250-pi_1),Idle(250),p['pi + 0'],p['pi/2 - 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '15_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(int(101000*1.2)-250-pi_1),Idle(250),p['pi + 90'],p['pi/2 - 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)    

            self.waves.append(Waveform( '16_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(250),p['pi - 0'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 - 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '16_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(250),p['pi - 90'],Idle(int(101000*1.2)-250-pi_2),p['pi/2 - 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)        

            self.waves.append(Waveform( '17_I.WFM', ent_i + [Idle(250),p['pi/2 - 0 2'],Idle(int(101000*1.2)),p['pi - 0 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 0'],p['pi/2 - 0 2'], zero,]+marker) )
            self.waves.append(Waveform( '17_Q.WFM', ent_q + [Idle(250),p['pi/2 - 90 2'],Idle(int(101000*1.2)),p['pi - 90 2'],Idle(int(101000*1.2)-250-pi_2),Idle(250),p['pi - 90'],p['pi/2 - 90 2'], zero,]+marker) )
            self.main_seq.append(*self.waves[-2:], wait=True)   
            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ESPIN_TOMO.SEQ')
        AWG.set_vpp(self.vpp)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class CNOT_Rabi( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
   
    freq_2 = Range(low=1, high=20e9, value=2914331439, desc='frequency 2nd trans [Hz]', label='frequency 2nd trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], t + 5000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         ),
                                 HGroup( Item('power',width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='CNOT nucular rabi', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            self.waves = []
            self.main_seq = Sequence('0_DQH.SEQ')
            
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            
                   
            dqpi_i = [  zero,
                        Sin(108,f1,-1.0153,0.24849) + Sin(108,f2,-2.3066,0.063945), 
                        Sin(108,f1,-2.7644,0.18213) + Sin(108,f2,0.25867,0.25181), 
                        Sin(108,f1,0.85619,0.27575) + Sin(108,f2,-0.20542,0.19656), 
                        Sin(108,f1,-0.79391,0.23905) + Sin(108,f2,0.64778,0.20069), 
                        Sin(108,f1,-0.63583,0.064335) + Sin(108,f2,-0.074105,0.10666), 
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin(108,f1,0.55554,0.24849) + Sin(108,f2,-0.73576,0.063945), 
                        Sin(108,f1,-1.1936,0.18213) + Sin(108,f2,1.8295,0.25181), 
                        Sin(108,f1,2.427,0.27575) + Sin(108,f2,1.3654,0.19656), 
                        Sin(108,f1,0.77689,0.23905) + Sin(108,f2,2.2186,0.20069), 
                        Sin(108,f1,0.93496,0.064335) + Sin(108,f2,1.4967,0.10666), 
                        zero,
                   ]
            
            
            

            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1

            p['pi + 0']     = Sin( 580*1.2, f1, 0 ,1) 
            p['pi + 90']    = Sin( 580*1.2, f1, np.pi/2 ,1)
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            

            sup_x=Waveform('SUP1_X.WFM', pi_1_i)
            sup_y=Waveform('SUP1_Y.WFM', pi_1_q)
            #sup_x=Waveform('SUP1_X.WFM', dqpi_i)
            #sup_y=Waveform('SUP1_Y.WFM', dqpi_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)

            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                #map_x = Waveform(name_x, [mod]+dqpi_i, t_0)
                #map_y = Waveform(name_y, [mod]+dqpi_q , t_0)
                map_x = Waveform(name_x, [mod]+ pi_1_i, t_0)
                map_y = Waveform(name_y, [mod]+ pi_1_q , t_0)
                
                self.waves.append(map_x)
                self.waves.append(map_y)
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                self.main_seq.append(sub_seq,wait=True)
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(self.main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
           
class EntFID( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    start_time = Range(low=1., high=1e7, value=500., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e7, value=5000., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e6, value=75., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)

    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], t + 4*self.evolution+25000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_3', 'freq_4', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress','evolution',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('power', width=30),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      

                                         ),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),
                                         Item('evolution', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Ent FID', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling  



            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            
            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
            swap_i = [  zero,
                        Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                        Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                        Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                        Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                        Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                        Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                        Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                        Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                        Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                        Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                        Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                        Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                        Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                        Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                        Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                        Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                        Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                        Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                        Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                        Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                        Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                        Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                        Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                        Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                        Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                        Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                        Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                        Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                        Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                        Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                        Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                        Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                        Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                        Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                        Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                        Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                        Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                        Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                        Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                        Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                        Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                        Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                        Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                        Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                        Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                        Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                        Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                        Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                        Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                        Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                        Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                        Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                        Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                        Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                        Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                        Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                        Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                        Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                        Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                        Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                        Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                        Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                        Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                        Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                        Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                        Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                        Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                        Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                        Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                        Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                        Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                        Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                        Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                        Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                        Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                        Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                        Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                        Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                        Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                        Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                        Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                        Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                        Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                        Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                        Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                        Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                        Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                        Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                        Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                        Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                        Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                        Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                        Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                        Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                        Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                        Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                        Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                        Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                        Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                        Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                        Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                        Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                        Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                        Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                        Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                        Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                        Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                        Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                        Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                        Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                        Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                        Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                        Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                        Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                        Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                        Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                        Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                        Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                        Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                        Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                        Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                        Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                        Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                        Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                        Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                        Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                        Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                        Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                        Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                        Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                        Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                        Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                        Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                        Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                        Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                        Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                        Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                        Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                        Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                        Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                        Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                        zero,
                        zero,
                        ]  
            # Pulses
            p = {}
            # ms= 0 <> ms = +1

            
            

            
            sup_x=Waveform('SUP1_X.WFM', dqpi2_i+[Idle(self.evolution*1.2)]+dqpi_i+[Idle(self.evolution*1.2)]+dqdqpi2_i+swap_i+[Idle(250)]+swap_i[::-1]+[Idle(250)]+p3_i)
            sup_y=Waveform('SUP1_Y.WFM', dqpi2_q+[Idle(self.evolution*1.2)]+dqpi_q+[Idle(self.evolution*1.2)]+dqdqpi2_q+swap_q+[Idle(250)]+swap_q[::-1]+[Idle(250)]+p3_q)
            waves.append(sup_x)
            waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+dqdqpi2_i[::-1], t_0)
                ref_y = Waveform(name_y, [mod]+dqdqpi2_q[::-1], t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = self.evolution*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+dqpi_i[::-1], t_0)
                map_y = Waveform(name_y, [mod]+dqpi_q[::-1], t_0)
                waves.append(map_x)
                waves.append(map_y)
                
                t_3 = self.evolution*1.2 - map_x.stub
                repeat_3 = int(t_3 / 256)
                mod.duration = int(t_3 % 256)
                
                t_0 += map_x.duration + repeat_3 * 256
                
                name_x = 'REA_X%04i.WFM' % i
                name_y = 'REA_Y%04i.WFM' % i
                
                rea_x = Waveform(name_x, [mod]+dqpi2_i[::-1], t_0)
                rea_y = Waveform(name_y, [mod]+dqpi2_q[::-1], t_0)
                waves.append(rea_x)
                waves.append(rea_y)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                sub_seq.append(evo, evo,repeat=repeat_3)
                sub_seq.append(rea_x, rea_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class EntFIDCS( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        sequence.append( (['current','current2'], 2e6) )
        sequence.append( (['current2']      , wait) )
        sequence.append( ([ ]                 , 300e3) )
        sequence.append( ([ ]                 , wait) )
        sequence.append( (['laser']                 , laser) )
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_3', 'freq_4', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress','evolution',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('power', width=30),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      

                                         ),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),
                                         Item('evolution', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Ent FID Charge state', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling  
                

            p1_i = [ zero,
                    Sin( 38, f1, -0.197396,  0.067520) + Sin( 38, f2, -0.860962, 0.004762)+ Sin( 38, f3, 2.243690, 0.064043)+ Sin( 38, f4, 0.440543, 0.005325),
                    Sin( 37, f1, -0.197677,  0.041475) + Sin( 37, f2, 1.296790, 0.014410)+ Sin( 37, f3, 2.026470, 0.059612)+ Sin( 37, f4, 0.708258, 0.002260),
                    Sin( 35, f1, -2.338010,  0.005918) + Sin( 35, f2, 1.465030, 0.025151)+ Sin( 35, f3, 1.828310, 0.051589)+ Sin( 35, f4, 2.414240, 0.001426),
                    Sin( 33, f1, -3.089580,  0.046360) + Sin( 33, f2, 1.539660, 0.030221)+ Sin( 33, f3, 1.702100, 0.043050)+ Sin( 33, f4, 2.812060, 0.002301),
                    Sin( 33, f1, -3.118970,  0.071777) + Sin( 33, f2, 1.576420, 0.030002)+ Sin( 33, f3, 1.703360, 0.034556)+ Sin( 33, f4, 2.491720, 0.001786),
                    Sin( 33, f1, -3.102650,  0.081269) + Sin( 33, f2, 1.611630, 0.023005)+ Sin( 33, f3, 1.881300, 0.031149)+ Sin( 33, f4, 1.593380, 0.001624),
                    Sin( 33, f1, -3.048540,  0.079207) + Sin( 33, f2, 1.677580, 0.011745)+ Sin( 33, f3, 2.100840, 0.039044)+ Sin( 33, f4, 1.018380, 0.002662),
                    Sin( 33, f1, -2.933760,  0.065210) + Sin( 33, f2, 2.466800, 0.001409)+ Sin( 33, f3, 2.171260, 0.058363)+ Sin( 33, f4, 0.861985, 0.003550),
                    Sin( 33, f1, -2.570940,  0.036031) + Sin( 33, f2, -1.733010, 0.004074)+ Sin( 33, f3, 2.176390, 0.080520)+ Sin( 33, f4, 0.789497, 0.003528),
                    Sin( 33, f1, -0.834564,  0.032164) + Sin( 33, f2, -1.743050, 0.001139)+ Sin( 33, f3, 2.203210, 0.094276)+ Sin( 33, f4, 0.673148, 0.002666),
                    Sin( 33, f1, -0.340096,  0.078477) + Sin( 33, f2, 1.538110, 0.006688)+ Sin( 33, f3, 2.245850, 0.099339)+ Sin( 33, f4, 0.427767, 0.001586),
                    Sin( 33, f1, -0.242395,  0.106059) + Sin( 33, f2, 1.519460, 0.014720)+ Sin( 33, f3, 2.274510, 0.101556)+ Sin( 33, f4, 0.071149, 0.000798),
                    Sin( 34, f1, -0.203189,  0.115475) + Sin( 34, f2, 1.491140, 0.021274)+ Sin( 34, f3, 2.290620, 0.103120)+ Sin( 34, f4, 0.312547, 0.000613),
                    Sin( 34, f1, -0.176324,  0.117425) + Sin( 34, f2, 1.452650, 0.024555)+ Sin( 34, f3, 2.297750, 0.103619)+ Sin( 34, f4, 1.653530, 0.000684),
                    Sin( 34, f1, -0.158415,  0.117675) + Sin( 34, f2, 1.418960, 0.025965)+ Sin( 34, f3, 2.301960, 0.103687)+ Sin( 34, f4, 1.995020, 0.001310),
                    Sin( 34, f1, -0.150949,  0.117650) + Sin( 34, f2, 1.404830, 0.026171)+ Sin( 34, f3, 2.303370, 0.103673)+ Sin( 34, f4, 2.033910, 0.001581),
                    Sin( 34, f1, -0.155570,  0.117618) + Sin( 34, f2, 1.418840, 0.025458)+ Sin( 34, f3, 2.301970, 0.103686)+ Sin( 34, f4, 1.956930, 0.001325),
                    Sin( 34, f1, -0.172967,  0.117308) + Sin( 34, f2, 1.456980, 0.023553)+ Sin( 34, f3, 2.297740, 0.103616)+ Sin( 34, f4, 1.563490, 0.000737),
                    Sin( 34, f1, -0.202885,  0.115111) + Sin( 34, f2, 1.507770, 0.019802)+ Sin( 34, f3, 2.290570, 0.103116)+ Sin( 34, f4, 0.367419, 0.000683),
                    Sin( 33, f1, -0.249749,  0.104573) + Sin( 33, f2, 1.562710, 0.012938)+ Sin( 33, f3, 2.274450, 0.101550)+ Sin( 33, f4, 0.112290, 0.000821),
                    Sin( 33, f1, -0.367773,  0.074893) + Sin( 33, f2, 1.656050, 0.004993)+ Sin( 33, f3, 2.245780, 0.099332)+ Sin( 33, f4, 0.436107, 0.001572),
                    Sin( 33, f1, -0.966942,  0.030007) + Sin( 33, f2, -1.870270, 0.002371)+ Sin( 33, f3, 2.203020, 0.094291)+ Sin( 33, f4, 0.677072, 0.002619),
                    Sin( 33, f1, -2.590600,  0.038655) + Sin( 33, f2, -1.808680, 0.004359)+ Sin( 33, f3, 2.176010, 0.080568)+ Sin( 33, f4, 0.791001, 0.003470),
                    Sin( 33, f1, -2.928210,  0.065996) + Sin( 33, f2, 2.288610, 0.002139)+ Sin( 33, f3, 2.170770, 0.058424)+ Sin( 33, f4, 0.860579, 0.003503),
                    Sin( 33, f1, -3.044520,  0.078917) + Sin( 33, f2, 1.692500, 0.013100)+ Sin( 33, f3, 2.100430, 0.039098)+ Sin( 33, f4, 1.014360, 0.002634),
                    Sin( 33, f1, -3.102510,  0.080449) + Sin( 33, f2, 1.628920, 0.024401)+ Sin( 33, f3, 1.881360, 0.031192)+ Sin( 33, f4, 1.586020, 0.001611),
                    Sin( 33, f1, -3.125870,  0.070561) + Sin( 33, f2, 1.597210, 0.030927)+ Sin( 33, f3, 1.703560, 0.034584)+ Sin( 33, f4, 2.480370, 0.001771),
                    Sin( 33, f1, -3.111430,  0.044910) + Sin( 33, f2, 1.560630, 0.030323)+ Sin( 33, f3, 1.702130, 0.043069)+ Sin( 33, f4, 2.797320, 0.002284),
                    Sin( 35, f1, -2.363720,  0.004189) + Sin( 35, f2, 1.473210, 0.024177)+ Sin( 35, f3, 1.828270, 0.051594)+ Sin( 35, f4, 2.379480, 0.001436),
                    Sin( 37, f1, -0.176210,  0.041739) + Sin( 37, f2, 1.137640, 0.013071)+ Sin( 37, f3, 2.026480, 0.059592)+ Sin( 37, f4, 0.716987, 0.002303),
                    Sin( 38, f1, -0.208611,  0.067704) + Sin( 38, f2, -0.600561, 0.011626)+ Sin( 38, f3, 2.243870, 0.064003)+ Sin( 38, f4, 0.442541, 0.005339),
                    zero,
               ]
        
            p1_q = [ zero,
                    Sin( 38, f1, 1.373400,  0.067520) + Sin( 38, f2, 0.709834, 0.004762)+ Sin( 38, f3, 3.814486, 0.064043)+ Sin( 38, f4, 2.011339, 0.005325),
                    Sin( 37, f1, 1.373119,  0.041475) + Sin( 37, f2, 2.867586, 0.014410)+ Sin( 37, f3, 3.597266, 0.059612)+ Sin( 37, f4, 2.279054, 0.002260),
                    Sin( 35, f1, -0.767214,  0.005918) + Sin( 35, f2, 3.035826, 0.025151)+ Sin( 35, f3, 3.399106, 0.051589)+ Sin( 35, f4, 3.985036, 0.001426),
                    Sin( 33, f1, -1.518784,  0.046360) + Sin( 33, f2, 3.110456, 0.030221)+ Sin( 33, f3, 3.272896, 0.043050)+ Sin( 33, f4, 4.382856, 0.002301),
                    Sin( 33, f1, -1.548174,  0.071777) + Sin( 33, f2, 3.147216, 0.030002)+ Sin( 33, f3, 3.274156, 0.034556)+ Sin( 33, f4, 4.062516, 0.001786),
                    Sin( 33, f1, -1.531854,  0.081269) + Sin( 33, f2, 3.182426, 0.023005)+ Sin( 33, f3, 3.452096, 0.031149)+ Sin( 33, f4, 3.164176, 0.001624),
                    Sin( 33, f1, -1.477744,  0.079207) + Sin( 33, f2, 3.248376, 0.011745)+ Sin( 33, f3, 3.671636, 0.039044)+ Sin( 33, f4, 2.589176, 0.002662),
                    Sin( 33, f1, -1.362964,  0.065210) + Sin( 33, f2, 4.037596, 0.001409)+ Sin( 33, f3, 3.742056, 0.058363)+ Sin( 33, f4, 2.432781, 0.003550),
                    Sin( 33, f1, -1.000144,  0.036031) + Sin( 33, f2, -0.162214, 0.004074)+ Sin( 33, f3, 3.747186, 0.080520)+ Sin( 33, f4, 2.360293, 0.003528),
                    Sin( 33, f1, 0.736232,  0.032164) + Sin( 33, f2, -0.172254, 0.001139)+ Sin( 33, f3, 3.774006, 0.094276)+ Sin( 33, f4, 2.243944, 0.002666),
                    Sin( 33, f1, 1.230700,  0.078477) + Sin( 33, f2, 3.108906, 0.006688)+ Sin( 33, f3, 3.816646, 0.099339)+ Sin( 33, f4, 1.998563, 0.001586),
                    Sin( 33, f1, 1.328401,  0.106059) + Sin( 33, f2, 3.090256, 0.014720)+ Sin( 33, f3, 3.845306, 0.101556)+ Sin( 33, f4, 1.641945, 0.000798),
                    Sin( 34, f1, 1.367607,  0.115475) + Sin( 34, f2, 3.061936, 0.021274)+ Sin( 34, f3, 3.861416, 0.103120)+ Sin( 34, f4, 1.883343, 0.000613),
                    Sin( 34, f1, 1.394472,  0.117425) + Sin( 34, f2, 3.023446, 0.024555)+ Sin( 34, f3, 3.868546, 0.103619)+ Sin( 34, f4, 3.224326, 0.000684),
                    Sin( 34, f1, 1.412381,  0.117675) + Sin( 34, f2, 2.989756, 0.025965)+ Sin( 34, f3, 3.872756, 0.103687)+ Sin( 34, f4, 3.565816, 0.001310),
                    Sin( 34, f1, 1.419847,  0.117650) + Sin( 34, f2, 2.975626, 0.026171)+ Sin( 34, f3, 3.874166, 0.103673)+ Sin( 34, f4, 3.604706, 0.001581),
                    Sin( 34, f1, 1.415226,  0.117618) + Sin( 34, f2, 2.989636, 0.025458)+ Sin( 34, f3, 3.872766, 0.103686)+ Sin( 34, f4, 3.527726, 0.001325),
                    Sin( 34, f1, 1.397829,  0.117308) + Sin( 34, f2, 3.027776, 0.023553)+ Sin( 34, f3, 3.868536, 0.103616)+ Sin( 34, f4, 3.134286, 0.000737),
                    Sin( 34, f1, 1.367911,  0.115111) + Sin( 34, f2, 3.078566, 0.019802)+ Sin( 34, f3, 3.861366, 0.103116)+ Sin( 34, f4, 1.938215, 0.000683),
                    Sin( 33, f1, 1.321047,  0.104573) + Sin( 33, f2, 3.133506, 0.012938)+ Sin( 33, f3, 3.845246, 0.101550)+ Sin( 33, f4, 1.683086, 0.000821),
                    Sin( 33, f1, 1.203023,  0.074893) + Sin( 33, f2, 3.226846, 0.004993)+ Sin( 33, f3, 3.816576, 0.099332)+ Sin( 33, f4, 2.006903, 0.001572),
                    Sin( 33, f1, 0.603854,  0.030007) + Sin( 33, f2, -0.299474, 0.002371)+ Sin( 33, f3, 3.773816, 0.094291)+ Sin( 33, f4, 2.247868, 0.002619),
                    Sin( 33, f1, -1.019804,  0.038655) + Sin( 33, f2, -0.237884, 0.004359)+ Sin( 33, f3, 3.746806, 0.080568)+ Sin( 33, f4, 2.361797, 0.003470),
                    Sin( 33, f1, -1.357414,  0.065996) + Sin( 33, f2, 3.859406, 0.002139)+ Sin( 33, f3, 3.741566, 0.058424)+ Sin( 33, f4, 2.431375, 0.003503),
                    Sin( 33, f1, -1.473724,  0.078917) + Sin( 33, f2, 3.263296, 0.013100)+ Sin( 33, f3, 3.671226, 0.039098)+ Sin( 33, f4, 2.585156, 0.002634),
                    Sin( 33, f1, -1.531714,  0.080449) + Sin( 33, f2, 3.199716, 0.024401)+ Sin( 33, f3, 3.452156, 0.031192)+ Sin( 33, f4, 3.156816, 0.001611),
                    Sin( 33, f1, -1.555074,  0.070561) + Sin( 33, f2, 3.168006, 0.030927)+ Sin( 33, f3, 3.274356, 0.034584)+ Sin( 33, f4, 4.051166, 0.001771),
                    Sin( 33, f1, -1.540634,  0.044910) + Sin( 33, f2, 3.131426, 0.030323)+ Sin( 33, f3, 3.272926, 0.043069)+ Sin( 33, f4, 4.368116, 0.002284),
                    Sin( 35, f1, -0.792924,  0.004189) + Sin( 35, f2, 3.044006, 0.024177)+ Sin( 35, f3, 3.399066, 0.051594)+ Sin( 35, f4, 3.950276, 0.001436),
                    Sin( 37, f1, 1.394586,  0.041739) + Sin( 37, f2, 2.708436, 0.013071)+ Sin( 37, f3, 3.597276, 0.059592)+ Sin( 37, f4, 2.287783, 0.002303),
                    Sin( 38, f1, 1.362185,  0.067704) + Sin( 38, f2, 0.970235, 0.011626)+ Sin( 38, f3, 3.814666, 0.064003)+ Sin( 38, f4, 2.013337, 0.005339),
                    zero,
               ]
                   
                   
            p2_i = [ zero,
                    Sin( 41, f1, -1.143210,  0.001872) + Sin( 41, f2, 0.141098, 0.064884)+ Sin( 41, f3, -0.137788, 0.006580)+ Sin( 41, f4, 0.829341, 0.062481),
                    Sin( 39, f1, -1.503310,  0.002561) + Sin( 39, f2, 0.171980, 0.040216)+ Sin( 39, f3, -0.192813, 0.007205)+ Sin( 39, f4, 0.906369, 0.061712),
                    Sin( 35, f1, -1.609360,  0.003339) + Sin( 35, f2, 2.549600, 0.009418)+ Sin( 35, f3, -0.238748, 0.006851)+ Sin( 35, f4, 0.975851, 0.055245),
                    Sin( 33, f1, -1.638790,  0.003785) + Sin( 33, f2, 3.058830, 0.052864)+ Sin( 33, f3, -0.270633, 0.006014)+ Sin( 33, f4, 1.025260, 0.047466),
                    Sin( 31, f1, -1.642260,  0.003622) + Sin( 31, f2, 3.082250, 0.076429)+ Sin( 31, f3, -0.285000, 0.004768)+ Sin( 31, f4, 1.041750, 0.041367),
                    Sin( 30, f1, -1.644340,  0.002897) + Sin( 30, f2, 3.076860, 0.082686)+ Sin( 30, f3, -0.271447, 0.003627)+ Sin( 30, f4, 1.009410, 0.038740),
                    Sin( 30, f1, -1.684680,  0.001892) + Sin( 30, f2, 3.055390, 0.076943)+ Sin( 30, f3, -0.219592, 0.003038)+ Sin( 30, f4, 0.934499, 0.041717),
                    Sin( 31, f1, -1.913180,  0.001057) + Sin( 31, f2, 3.001010, 0.059574)+ Sin( 31, f3, -0.162486, 0.003325)+ Sin( 31, f4, 0.859260, 0.053055),
                    Sin( 32, f1, -2.468310,  0.000859) + Sin( 32, f2, 2.772680, 0.028768)+ Sin( 32, f3, -0.143610, 0.004390)+ Sin( 32, f4, 0.823248, 0.073954),
                    Sin( 33, f1, -2.661280,  0.001292) + Sin( 33, f2, 0.597798, 0.021418)+ Sin( 33, f3, -0.148864, 0.005712)+ Sin( 33, f4, 0.815557, 0.098694),
                    Sin( 34, f1, -2.585990,  0.001962) + Sin( 34, f2, 0.205578, 0.062407)+ Sin( 34, f3, -0.158220, 0.006487)+ Sin( 34, f4, 0.806232, 0.115657),
                    Sin( 34, f1, -2.477520,  0.002609) + Sin( 34, f2, 0.140167, 0.090336)+ Sin( 34, f3, -0.172494, 0.006119)+ Sin( 34, f4, 0.789425, 0.120807),
                    Sin( 35, f1, -2.345100,  0.003086) + Sin( 35, f2, 0.117701, 0.103770)+ Sin( 35, f3, -0.201660, 0.005033)+ Sin( 35, f4, 0.778844, 0.120518),
                    Sin( 36, f1, -2.177150,  0.003352) + Sin( 36, f2, 0.106984, 0.107922)+ Sin( 36, f3, -0.274039, 0.003723)+ Sin( 36, f4, 0.778663, 0.119799),
                    Sin( 36, f1, -1.972950,  0.003495) + Sin( 36, f2, 0.100972, 0.108782)+ Sin( 36, f3, -0.394750, 0.002671)+ Sin( 36, f4, 0.781575, 0.119526),
                    Sin( 36, f1, -1.761890,  0.003611) + Sin( 36, f2, 0.100041, 0.108909)+ Sin( 36, f3, -0.469940, 0.002301)+ Sin( 36, f4, 0.782973, 0.119480),
                    Sin( 36, f1, -1.578680,  0.003663) + Sin( 36, f2, 0.104496, 0.108767)+ Sin( 36, f3, -0.395126, 0.002686)+ Sin( 36, f4, 0.781614, 0.119530),
                    Sin( 36, f1, -1.440650,  0.003553) + Sin( 36, f2, 0.113587, 0.107521)+ Sin( 36, f3, -0.275141, 0.003746)+ Sin( 36, f4, 0.778702, 0.119805),
                    Sin( 35, f1, -1.345550,  0.003191) + Sin( 35, f2, 0.126804, 0.101886)+ Sin( 35, f3, -0.202482, 0.005051)+ Sin( 35, f4, 0.778872, 0.120524),
                    Sin( 34, f1, -1.280190,  0.002602) + Sin( 34, f2, 0.152354, 0.086048)+ Sin( 34, f3, -0.173266, 0.006119)+ Sin( 34, f4, 0.789581, 0.120792),
                    Sin( 34, f1, -1.245770,  0.001899) + Sin( 34, f2, 0.227547, 0.056127)+ Sin( 34, f3, -0.160365, 0.006464)+ Sin( 34, f4, 0.806786, 0.115555),
                    Sin( 33, f1, -1.271200,  0.001254) + Sin( 33, f2, 0.799086, 0.015740)+ Sin( 33, f3, -0.153329, 0.005676)+ Sin( 33, f4, 0.816790, 0.098460),
                    Sin( 32, f1, -1.522280,  0.000949) + Sin( 32, f2, 2.864750, 0.033113)+ Sin( 32, f3, -0.150687, 0.004356)+ Sin( 32, f4, 0.825488, 0.073671),
                    Sin( 31, f1, -1.887590,  0.001241) + Sin( 31, f2, 3.030660, 0.062146)+ Sin( 31, f3, -0.169328, 0.003308)+ Sin( 31, f4, 0.862585, 0.052833),
                    Sin( 30, f1, -2.034960,  0.002023) + Sin( 30, f2, 3.072950, 0.078090)+ Sin( 30, f3, -0.220382, 0.003042)+ Sin( 30, f4, 0.938065, 0.041588),
                    Sin( 30, f1, -2.067310,  0.002958) + Sin( 30, f2, 3.087400, 0.083123)+ Sin( 30, f3, -0.265853, 0.003648)+ Sin( 30, f4, 1.011710, 0.038683),
                    Sin( 31, f1, -2.064360,  0.003644) + Sin( 31, f2, 3.086300, 0.076501)+ Sin( 31, f3, -0.277736, 0.004802)+ Sin( 31, f4, 1.042080, 0.041355),
                    Sin( 32, f1, -2.043260,  0.003785) + Sin( 32, f2, 3.050720, 0.052623)+ Sin( 32, f3, -0.265114, 0.005976)+ Sin( 32, f4, 1.024600, 0.047596),
                    Sin( 35, f1, -1.980130,  0.003378) + Sin( 35, f2, 2.471920, 0.009778)+ Sin( 35, f3, -0.236083, 0.006876)+ Sin( 35, f4, 0.975049, 0.055241),
                    Sin( 39, f1, -1.831000,  0.002633) + Sin( 39, f2, 0.205128, 0.040646)+ Sin( 39, f3, -0.191949, 0.007220)+ Sin( 39, f4, 0.905689, 0.061711),
                    Sin( 41, f1, -1.528610,  0.001890) + Sin( 41, f2, 0.171083, 0.065173)+ Sin( 41, f3, -0.137908, 0.006582)+ Sin( 41, f4, 0.829026, 0.062474),
                    zero,
                    ]
        
            p2_q = [ zero,
                    Sin( 41, f1, 0.427586,  0.001872) + Sin( 41, f2, 1.711894, 0.064884)+ Sin( 41, f3, 1.433008, 0.006580)+ Sin( 41, f4, 2.400137, 0.062481),
                    Sin( 39, f1, 0.067486,  0.002561) + Sin( 39, f2, 1.742776, 0.040216)+ Sin( 39, f3, 1.377983, 0.007205)+ Sin( 39, f4, 2.477165, 0.061712),
                    Sin( 35, f1, -0.038564,  0.003339) + Sin( 35, f2, 4.120396, 0.009418)+ Sin( 35, f3, 1.332048, 0.006851)+ Sin( 35, f4, 2.546647, 0.055245),
                    Sin( 33, f1, -0.067994,  0.003785) + Sin( 33, f2, 4.629626, 0.052864)+ Sin( 33, f3, 1.300163, 0.006014)+ Sin( 33, f4, 2.596056, 0.047466),
                    Sin( 31, f1, -0.071464,  0.003622) + Sin( 31, f2, 4.653046, 0.076429)+ Sin( 31, f3, 1.285796, 0.004768)+ Sin( 31, f4, 2.612546, 0.041367),
                    Sin( 30, f1, -0.073544,  0.002897) + Sin( 30, f2, 4.647656, 0.082686)+ Sin( 30, f3, 1.299349, 0.003627)+ Sin( 30, f4, 2.580206, 0.038740),
                    Sin( 30, f1, -0.113884,  0.001892) + Sin( 30, f2, 4.626186, 0.076943)+ Sin( 30, f3, 1.351204, 0.003038)+ Sin( 30, f4, 2.505295, 0.041717),
                    Sin( 31, f1, -0.342384,  0.001057) + Sin( 31, f2, 4.571806, 0.059574)+ Sin( 31, f3, 1.408310, 0.003325)+ Sin( 31, f4, 2.430056, 0.053055),
                    Sin( 32, f1, -0.897514,  0.000859) + Sin( 32, f2, 4.343476, 0.028768)+ Sin( 32, f3, 1.427186, 0.004390)+ Sin( 32, f4, 2.394044, 0.073954),
                    Sin( 33, f1, -1.090484,  0.001292) + Sin( 33, f2, 2.168594, 0.021418)+ Sin( 33, f3, 1.421932, 0.005712)+ Sin( 33, f4, 2.386353, 0.098694),
                    Sin( 34, f1, -1.015194,  0.001962) + Sin( 34, f2, 1.776374, 0.062407)+ Sin( 34, f3, 1.412576, 0.006487)+ Sin( 34, f4, 2.377028, 0.115657),
                    Sin( 34, f1, -0.906724,  0.002609) + Sin( 34, f2, 1.710963, 0.090336)+ Sin( 34, f3, 1.398302, 0.006119)+ Sin( 34, f4, 2.360221, 0.120807),
                    Sin( 35, f1, -0.774304,  0.003086) + Sin( 35, f2, 1.688497, 0.103770)+ Sin( 35, f3, 1.369136, 0.005033)+ Sin( 35, f4, 2.349640, 0.120518),
                    Sin( 36, f1, -0.606354,  0.003352) + Sin( 36, f2, 1.677780, 0.107922)+ Sin( 36, f3, 1.296757, 0.003723)+ Sin( 36, f4, 2.349459, 0.119799),
                    Sin( 36, f1, -0.402154,  0.003495) + Sin( 36, f2, 1.671768, 0.108782)+ Sin( 36, f3, 1.176046, 0.002671)+ Sin( 36, f4, 2.352371, 0.119526),
                    Sin( 36, f1, -0.191094,  0.003611) + Sin( 36, f2, 1.670837, 0.108909)+ Sin( 36, f3, 1.100856, 0.002301)+ Sin( 36, f4, 2.353769, 0.119480),
                    Sin( 36, f1, -0.007884,  0.003663) + Sin( 36, f2, 1.675292, 0.108767)+ Sin( 36, f3, 1.175670, 0.002686)+ Sin( 36, f4, 2.352410, 0.119530),
                    Sin( 36, f1, 0.130146,  0.003553) + Sin( 36, f2, 1.684383, 0.107521)+ Sin( 36, f3, 1.295655, 0.003746)+ Sin( 36, f4, 2.349498, 0.119805),
                    Sin( 35, f1, 0.225246,  0.003191) + Sin( 35, f2, 1.697600, 0.101886)+ Sin( 35, f3, 1.368314, 0.005051)+ Sin( 35, f4, 2.349668, 0.120524),
                    Sin( 34, f1, 0.290606,  0.002602) + Sin( 34, f2, 1.723150, 0.086048)+ Sin( 34, f3, 1.397530, 0.006119)+ Sin( 34, f4, 2.360377, 0.120792),
                    Sin( 34, f1, 0.325026,  0.001899) + Sin( 34, f2, 1.798343, 0.056127)+ Sin( 34, f3, 1.410431, 0.006464)+ Sin( 34, f4, 2.377582, 0.115555),
                    Sin( 33, f1, 0.299596,  0.001254) + Sin( 33, f2, 2.369882, 0.015740)+ Sin( 33, f3, 1.417467, 0.005676)+ Sin( 33, f4, 2.387586, 0.098460),
                    Sin( 32, f1, 0.048516,  0.000949) + Sin( 32, f2, 4.435546, 0.033113)+ Sin( 32, f3, 1.420109, 0.004356)+ Sin( 32, f4, 2.396284, 0.073671),
                    Sin( 31, f1, -0.316794,  0.001241) + Sin( 31, f2, 4.601456, 0.062146)+ Sin( 31, f3, 1.401468, 0.003308)+ Sin( 31, f4, 2.433381, 0.052833),
                    Sin( 30, f1, -0.464164,  0.002023) + Sin( 30, f2, 4.643746, 0.078090)+ Sin( 30, f3, 1.350414, 0.003042)+ Sin( 30, f4, 2.508861, 0.041588),
                    Sin( 30, f1, -0.496514,  0.002958) + Sin( 30, f2, 4.658196, 0.083123)+ Sin( 30, f3, 1.304943, 0.003648)+ Sin( 30, f4, 2.582506, 0.038683),
                    Sin( 31, f1, -0.493564,  0.003644) + Sin( 31, f2, 4.657096, 0.076501)+ Sin( 31, f3, 1.293060, 0.004802)+ Sin( 31, f4, 2.612876, 0.041355),
                    Sin( 32, f1, -0.472464,  0.003785) + Sin( 32, f2, 4.621516, 0.052623)+ Sin( 32, f3, 1.305682, 0.005976)+ Sin( 32, f4, 2.595396, 0.047596),
                    Sin( 35, f1, -0.409334,  0.003378) + Sin( 35, f2, 4.042716, 0.009778)+ Sin( 35, f3, 1.334713, 0.006876)+ Sin( 35, f4, 2.545845, 0.055241),
                    Sin( 39, f1, -0.260204,  0.002633) + Sin( 39, f2, 1.775924, 0.040646)+ Sin( 39, f3, 1.378847, 0.007220)+ Sin( 39, f4, 2.476485, 0.061711),
                    Sin( 41, f1, 0.042186,  0.001890) + Sin( 41, f2, 1.741879, 0.065173)+ Sin( 41, f3, 1.432888, 0.006582)+ Sin( 41, f4, 2.399822, 0.062474),
                    zero,
               ]

                                          
            p3_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
               ]
        
            p3_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
               ]
                   
            p4_i = [ zero,
                    Sin( 264, f1, 0.477829,  0.000011) + Sin( 264, f2, -1.438920, 0.000020)+ Sin( 264, f3, 2.464900, 0.000448)+ Sin( 264, f4, -0.672882, 0.038469),
                    Sin( 264, f1, 0.477833,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, 2.578190, 0.000904)+ Sin( 264, f4, -2.925910, 0.105232),
                    Sin( 264, f1, 0.477835,  0.000011) + Sin( 264, f2, -1.438930, 0.000020)+ Sin( 264, f3, -0.110267, 0.000974)+ Sin( 264, f4, -0.676001, 0.038735),
                    zero,
               ]
        
            p4_q = [ zero,
                    Sin( 264, f1, 2.048625,  0.000011) + Sin( 264, f2, 0.131876, 0.000020)+ Sin( 264, f3, 4.035696, 0.000448)+ Sin( 264, f4, 0.897914, 0.038469),
                    Sin( 264, f1, 2.048629,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 4.148986, 0.000904)+ Sin( 264, f4, -1.355114, 0.105232),
                    Sin( 264, f1, 2.048631,  0.000011) + Sin( 264, f2, 0.131866, 0.000020)+ Sin( 264, f3, 1.460529, 0.000974)+ Sin( 264, f4, 0.894795, 0.038735),
                    zero,
               ]                     

            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076691) + Sin( 59, f2, 0.509851, 0.064920)+ Sin( 59, f3, -2.442730, 0.017479)+ Sin( 59, f4, 2.249760, 0.006587),
                        Sin( 59, f1, 0.886809,  0.083711) + Sin( 59, f2, -0.959098, 0.025309)+ Sin( 59, f3, -0.059114, 0.013683)+ Sin( 59, f4, -0.302780, 0.034202),
                        Sin( 59, f1, 1.273630,  0.047548) + Sin( 59, f2, -1.576120, 0.059929)+ Sin( 59, f3, 0.113813, 0.034441)+ Sin( 59, f4, -0.535770, 0.022989),
                        Sin( 59, f1, 2.362590,  0.059015) + Sin( 59, f2, -1.633910, 0.048963)+ Sin( 59, f3, 0.120950, 0.021223)+ Sin( 59, f4, -3.109850, 0.025033),
                        Sin( 59, f1, 2.550860,  0.084077) + Sin( 59, f2, 3.108950, 0.042909)+ Sin( 59, f3, -3.115300, 0.045037)+ Sin( 59, f4, 3.002540, 0.069725),
                        Sin( 59, f1, 2.626020,  0.101112) + Sin( 59, f2, 2.700690, 0.104059)+ Sin( 59, f3, -3.089160, 0.098452)+ Sin( 59, f4, 3.054410, 0.098611),
                        Sin( 59, f1, 2.634870,  0.125457) + Sin( 59, f2, 2.807540, 0.110106)+ Sin( 59, f3, -3.077250, 0.108091)+ Sin( 59, f4, 3.129320, 0.111106),
                        Sin( 59, f1, 2.680490,  0.130010) + Sin( 59, f2, -2.821910, 0.059639)+ Sin( 59, f3, -3.132500, 0.075085)+ Sin( 59, f4, -3.108110, 0.108677),
                        Sin( 59, f1, 2.780060,  0.100822) + Sin( 59, f2, -1.681530, 0.059408)+ Sin( 59, f3, 0.483849, 0.014032)+ Sin( 59, f4, -3.119530, 0.077077),
                        Sin( 59, f1, 2.085750,  0.043230) + Sin( 59, f2, -1.922590, 0.061883)+ Sin( 59, f3, 0.143190, 0.026723)+ Sin( 59, f4, 2.613300, 0.004477),
                        Sin( 59, f1, 0.585793,  0.094169) + Sin( 59, f2, -2.680070, 0.049205)+ Sin( 59, f3, -3.031940, 0.020896)+ Sin( 59, f4, 0.021265, 0.055067),
                        Sin( 59, f1, 0.363607,  0.133373) + Sin( 59, f2, 2.594850, 0.046694)+ Sin( 59, f3, -3.024710, 0.056684)+ Sin( 59, f4, -0.042994, 0.072316),
                        Sin( 59, f1, 0.369677,  0.125759) + Sin( 59, f2, 2.715720, 0.066081)+ Sin( 59, f3, -2.962560, 0.072688)+ Sin( 59, f4, -0.146017, 0.055884),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076691) + Sin( 59, f2, 2.080647, 0.064920)+ Sin( 59, f3, -0.871934, 0.017479)+ Sin( 59, f4, 3.820556, 0.006587),
                        Sin( 59, f1, 2.457605,  0.083711) + Sin( 59, f2, 0.611698, 0.025309)+ Sin( 59, f3, 1.511683, 0.013683)+ Sin( 59, f4, 1.268016, 0.034202),
                        Sin( 59, f1, 2.844426,  0.047548) + Sin( 59, f2, -0.005324, 0.059929)+ Sin( 59, f3, 1.684609, 0.034441)+ Sin( 59, f4, 1.035026, 0.022989),
                        Sin( 59, f1, 3.933386,  0.059015) + Sin( 59, f2, -0.063114, 0.048963)+ Sin( 59, f3, 1.691746, 0.021223)+ Sin( 59, f4, -1.539054, 0.025033),
                        Sin( 59, f1, 4.121656,  0.084077) + Sin( 59, f2, 4.679746, 0.042909)+ Sin( 59, f3, -1.544504, 0.045037)+ Sin( 59, f4, 4.573336, 0.069725),
                        Sin( 59, f1, 4.196816,  0.101112) + Sin( 59, f2, 4.271486, 0.104059)+ Sin( 59, f3, -1.518364, 0.098452)+ Sin( 59, f4, 4.625206, 0.098611),
                        Sin( 59, f1, 4.205666,  0.125457) + Sin( 59, f2, 4.378336, 0.110106)+ Sin( 59, f3, -1.506454, 0.108091)+ Sin( 59, f4, 4.700116, 0.111106),
                        Sin( 59, f1, 4.251286,  0.130010) + Sin( 59, f2, -1.251114, 0.059639)+ Sin( 59, f3, -1.561704, 0.075085)+ Sin( 59, f4, -1.537314, 0.108677),
                        Sin( 59, f1, 4.350856,  0.100822) + Sin( 59, f2, -0.110734, 0.059408)+ Sin( 59, f3, 2.054645, 0.014032)+ Sin( 59, f4, -1.548734, 0.077077),
                        Sin( 59, f1, 3.656546,  0.043230) + Sin( 59, f2, -0.351794, 0.061883)+ Sin( 59, f3, 1.713986, 0.026723)+ Sin( 59, f4, 4.184096, 0.004477),
                        Sin( 59, f1, 2.156589,  0.094169) + Sin( 59, f2, -1.109274, 0.049205)+ Sin( 59, f3, -1.461144, 0.020896)+ Sin( 59, f4, 1.592062, 0.055067),
                        Sin( 59, f1, 1.934403,  0.133373) + Sin( 59, f2, 4.165646, 0.046694)+ Sin( 59, f3, -1.453914, 0.056684)+ Sin( 59, f4, 1.527802, 0.072316),
                        Sin( 59, f1, 1.940473,  0.125759) + Sin( 59, f2, 4.286516, 0.066081)+ Sin( 59, f3, -1.391764, 0.072688)+ Sin( 59, f4, 1.424779, 0.055884),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 25, f1, 2.410560,  0.052626) + Sin( 25, f2, 2.811580, 0.079275)+ Sin( 25, f3, 1.818960, 0.012092)+ Sin( 25, f4, 0.104260, 0.025445),
                        Sin( 25, f1, -2.432480,  0.068221) + Sin( 25, f2, -2.442000, 0.101938)+ Sin( 25, f3, -2.571290, 0.024302)+ Sin( 25, f4, -2.236490, 0.046621),
                        Sin( 25, f1, -1.794940,  0.085486) + Sin( 25, f2, -2.188820, 0.147638)+ Sin( 25, f3, -2.267880, 0.045600)+ Sin( 25, f4, -2.516910, 0.107918),
                        Sin( 25, f1, -1.178790,  0.088906) + Sin( 25, f2, -2.118890, 0.152588)+ Sin( 25, f3, -1.873840, 0.040916)+ Sin( 25, f4, -2.475810, 0.130696),
                        Sin( 25, f1, -0.601920,  0.081986) + Sin( 25, f2, -1.869720, 0.136033)+ Sin( 25, f3, -0.644331, 0.033833)+ Sin( 25, f4, -2.341600, 0.132018),
                        Sin( 25, f1, 0.264154,  0.072271) + Sin( 25, f2, -1.311870, 0.134371)+ Sin( 25, f3, 0.237169, 0.061412)+ Sin( 25, f4, -2.212980, 0.126478),
                        Sin( 25, f1, 0.992040,  0.095216) + Sin( 25, f2, -0.963174, 0.158327)+ Sin( 25, f3, 0.597223, 0.086029)+ Sin( 25, f4, -2.118210, 0.120098),
                        Sin( 25, f1, 1.219570,  0.112115) + Sin( 25, f2, -0.877062, 0.169327)+ Sin( 25, f3, 0.793510, 0.091759)+ Sin( 25, f4, -2.143030, 0.121788),
                        Sin( 25, f1, 1.018870,  0.110984) + Sin( 25, f2, -0.895779, 0.165400)+ Sin( 25, f3, 1.001740, 0.067882)+ Sin( 25, f4, -2.280610, 0.132318),
                        Sin( 25, f1, 0.212038,  0.102091) + Sin( 25, f2, -1.106000, 0.130645)+ Sin( 25, f3, 2.549510, 0.023212)+ Sin( 25, f4, -2.421980, 0.135221),
                        Sin( 25, f1, -0.667135,  0.157868) + Sin( 25, f2, -2.270770, 0.100921)+ Sin( 25, f3, -2.586180, 0.089108)+ Sin( 25, f4, -2.680990, 0.104121),
                        Sin( 25, f1, -0.821230,  0.186949) + Sin( 25, f2, -3.067490, 0.129786)+ Sin( 25, f3, -2.437670, 0.121579)+ Sin( 25, f4, 0.806734, 0.047762),
                        Sin( 25, f1, -0.886097,  0.180687) + Sin( 25, f2, 2.708620, 0.142566)+ Sin( 25, f3, -2.374770, 0.125669)+ Sin( 25, f4, 0.706358, 0.135487),
                        Sin( 25, f1, -1.042260,  0.161985) + Sin( 25, f2, 2.474730, 0.165402)+ Sin( 25, f3, -2.341640, 0.121742)+ Sin( 25, f4, 0.819336, 0.139095),
                        Sin( 25, f1, -1.242070,  0.147629) + Sin( 25, f2, 2.401200, 0.176286)+ Sin( 25, f3, -2.335010, 0.116102)+ Sin( 25, f4, 0.972805, 0.124521),
                        Sin( 25, f1, -1.305170,  0.144732) + Sin( 25, f2, 2.385820, 0.178822)+ Sin( 25, f3, -2.335930, 0.110523)+ Sin( 25, f4, 1.057870, 0.118079),
                        Sin( 25, f1, -1.178460,  0.151201) + Sin( 25, f2, 2.403340, 0.175962)+ Sin( 25, f3, -2.312650, 0.106990)+ Sin( 25, f4, 0.879526, 0.133514),
                        Sin( 25, f1, -0.983373,  0.168087) + Sin( 25, f2, 2.482990, 0.164452)+ Sin( 25, f3, -2.281520, 0.106965)+ Sin( 25, f4, 0.785431, 0.143866),
                        Sin( 25, f1, -0.860617,  0.184430) + Sin( 25, f2, 2.732900, 0.141081)+ Sin( 25, f3, -2.317390, 0.110916)+ Sin( 25, f4, 0.729053, 0.137461),
                        Sin( 25, f1, -0.809880,  0.188302) + Sin( 25, f2, -3.008580, 0.131177)+ Sin( 25, f3, -2.440680, 0.114654)+ Sin( 25, f4, 0.883370, 0.038718),
                        Sin( 25, f1, -0.690684,  0.163016) + Sin( 25, f2, -2.277940, 0.112708)+ Sin( 25, f3, -2.637740, 0.103421)+ Sin( 25, f4, -2.592280, 0.117887),
                        Sin( 25, f1, -0.022501,  0.100357) + Sin( 25, f2, -1.124180, 0.134076)+ Sin( 25, f3, -3.045170, 0.042929)+ Sin( 25, f4, -2.367720, 0.137163),
                        Sin( 25, f1, 0.964217,  0.094068) + Sin( 25, f2, -0.882997, 0.167528)+ Sin( 25, f3, 1.063060, 0.046336)+ Sin( 25, f4, -2.250210, 0.131211),
                        Sin( 25, f1, 1.271920,  0.101661) + Sin( 25, f2, -0.860671, 0.171693)+ Sin( 25, f3, 0.748393, 0.078994)+ Sin( 25, f4, -2.087960, 0.118195),
                        Sin( 25, f1, 1.047960,  0.092933) + Sin( 25, f2, -0.934417, 0.161741)+ Sin( 25, f3, 0.526470, 0.079912)+ Sin( 25, f4, -2.046320, 0.115449),
                        Sin( 25, f1, 0.428645,  0.080663) + Sin( 25, f2, -1.253690, 0.136862)+ Sin( 25, f3, 0.210217, 0.061428)+ Sin( 25, f4, -2.189000, 0.124790),
                        Sin( 25, f1, -0.305226,  0.085168) + Sin( 25, f2, -1.828330, 0.134663)+ Sin( 25, f3, -0.406111, 0.032390)+ Sin( 25, f4, -2.339390, 0.133759),
                        Sin( 25, f1, -0.861571,  0.087125) + Sin( 25, f2, -2.109630, 0.151110)+ Sin( 25, f3, -1.843790, 0.026475)+ Sin( 25, f4, -2.465470, 0.131654),
                        Sin( 25, f1, -1.569860,  0.073017) + Sin( 25, f2, -2.198420, 0.144020)+ Sin( 25, f3, -2.417620, 0.033301)+ Sin( 25, f4, -2.529030, 0.115347),
                        Sin( 25, f1, -2.440360,  0.065894) + Sin( 25, f2, -2.465370, 0.095533)+ Sin( 25, f3, -2.647370, 0.018841)+ Sin( 25, f4, -2.474760, 0.064514),
                        Sin( 25, f1, 2.694680,  0.064396) + Sin( 25, f2, 2.687160, 0.074426)+ Sin( 25, f3, 0.097953, 0.006015)+ Sin( 25, f4, 0.686851, 0.012070),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 25, f1, 3.981356,  0.052626) + Sin( 25, f2, 4.382376, 0.079275)+ Sin( 25, f3, 3.389756, 0.012092)+ Sin( 25, f4, 1.675056, 0.025445),
                        Sin( 25, f1, -0.861684,  0.068221) + Sin( 25, f2, -0.871204, 0.101938)+ Sin( 25, f3, -1.000494, 0.024302)+ Sin( 25, f4, -0.665694, 0.046621),
                        Sin( 25, f1, -0.224144,  0.085486) + Sin( 25, f2, -0.618024, 0.147638)+ Sin( 25, f3, -0.697084, 0.045600)+ Sin( 25, f4, -0.946114, 0.107918),
                        Sin( 25, f1, 0.392006,  0.088906) + Sin( 25, f2, -0.548094, 0.152588)+ Sin( 25, f3, -0.303044, 0.040916)+ Sin( 25, f4, -0.905014, 0.130696),
                        Sin( 25, f1, 0.968876,  0.081986) + Sin( 25, f2, -0.298924, 0.136033)+ Sin( 25, f3, 0.926465, 0.033833)+ Sin( 25, f4, -0.770804, 0.132018),
                        Sin( 25, f1, 1.834950,  0.072271) + Sin( 25, f2, 0.258926, 0.134371)+ Sin( 25, f3, 1.807965, 0.061412)+ Sin( 25, f4, -0.642184, 0.126478),
                        Sin( 25, f1, 2.562836,  0.095216) + Sin( 25, f2, 0.607622, 0.158327)+ Sin( 25, f3, 2.168019, 0.086029)+ Sin( 25, f4, -0.547414, 0.120098),
                        Sin( 25, f1, 2.790366,  0.112115) + Sin( 25, f2, 0.693734, 0.169327)+ Sin( 25, f3, 2.364306, 0.091759)+ Sin( 25, f4, -0.572234, 0.121788),
                        Sin( 25, f1, 2.589666,  0.110984) + Sin( 25, f2, 0.675017, 0.165400)+ Sin( 25, f3, 2.572536, 0.067882)+ Sin( 25, f4, -0.709814, 0.132318),
                        Sin( 25, f1, 1.782834,  0.102091) + Sin( 25, f2, 0.464796, 0.130645)+ Sin( 25, f3, 4.120306, 0.023212)+ Sin( 25, f4, -0.851184, 0.135221),
                        Sin( 25, f1, 0.903661,  0.157868) + Sin( 25, f2, -0.699974, 0.100921)+ Sin( 25, f3, -1.015384, 0.089108)+ Sin( 25, f4, -1.110194, 0.104121),
                        Sin( 25, f1, 0.749566,  0.186949) + Sin( 25, f2, -1.496694, 0.129786)+ Sin( 25, f3, -0.866874, 0.121579)+ Sin( 25, f4, 2.377530, 0.047762),
                        Sin( 25, f1, 0.684699,  0.180687) + Sin( 25, f2, 4.279416, 0.142566)+ Sin( 25, f3, -0.803974, 0.125669)+ Sin( 25, f4, 2.277154, 0.135487),
                        Sin( 25, f1, 0.528536,  0.161985) + Sin( 25, f2, 4.045526, 0.165402)+ Sin( 25, f3, -0.770844, 0.121742)+ Sin( 25, f4, 2.390132, 0.139095),
                        Sin( 25, f1, 0.328726,  0.147629) + Sin( 25, f2, 3.971996, 0.176286)+ Sin( 25, f3, -0.764214, 0.116102)+ Sin( 25, f4, 2.543601, 0.124521),
                        Sin( 25, f1, 0.265626,  0.144732) + Sin( 25, f2, 3.956616, 0.178822)+ Sin( 25, f3, -0.765134, 0.110523)+ Sin( 25, f4, 2.628666, 0.118079),
                        Sin( 25, f1, 0.392336,  0.151201) + Sin( 25, f2, 3.974136, 0.175962)+ Sin( 25, f3, -0.741854, 0.106990)+ Sin( 25, f4, 2.450322, 0.133514),
                        Sin( 25, f1, 0.587423,  0.168087) + Sin( 25, f2, 4.053786, 0.164452)+ Sin( 25, f3, -0.710724, 0.106965)+ Sin( 25, f4, 2.356227, 0.143866),
                        Sin( 25, f1, 0.710179,  0.184430) + Sin( 25, f2, 4.303696, 0.141081)+ Sin( 25, f3, -0.746594, 0.110916)+ Sin( 25, f4, 2.299849, 0.137461),
                        Sin( 25, f1, 0.760916,  0.188302) + Sin( 25, f2, -1.437784, 0.131177)+ Sin( 25, f3, -0.869884, 0.114654)+ Sin( 25, f4, 2.454166, 0.038718),
                        Sin( 25, f1, 0.880112,  0.163016) + Sin( 25, f2, -0.707144, 0.112708)+ Sin( 25, f3, -1.066944, 0.103421)+ Sin( 25, f4, -1.021484, 0.117887),
                        Sin( 25, f1, 1.548296,  0.100357) + Sin( 25, f2, 0.446616, 0.134076)+ Sin( 25, f3, -1.474374, 0.042929)+ Sin( 25, f4, -0.796924, 0.137163),
                        Sin( 25, f1, 2.535013,  0.094068) + Sin( 25, f2, 0.687799, 0.167528)+ Sin( 25, f3, 2.633856, 0.046336)+ Sin( 25, f4, -0.679414, 0.131211),
                        Sin( 25, f1, 2.842716,  0.101661) + Sin( 25, f2, 0.710125, 0.171693)+ Sin( 25, f3, 2.319189, 0.078994)+ Sin( 25, f4, -0.517164, 0.118195),
                        Sin( 25, f1, 2.618756,  0.092933) + Sin( 25, f2, 0.636379, 0.161741)+ Sin( 25, f3, 2.097266, 0.079912)+ Sin( 25, f4, -0.475524, 0.115449),
                        Sin( 25, f1, 1.999441,  0.080663) + Sin( 25, f2, 0.317106, 0.136862)+ Sin( 25, f3, 1.781013, 0.061428)+ Sin( 25, f4, -0.618204, 0.124790),
                        Sin( 25, f1, 1.265570,  0.085168) + Sin( 25, f2, -0.257534, 0.134663)+ Sin( 25, f3, 1.164685, 0.032390)+ Sin( 25, f4, -0.768594, 0.133759),
                        Sin( 25, f1, 0.709225,  0.087125) + Sin( 25, f2, -0.538834, 0.151110)+ Sin( 25, f3, -0.272994, 0.026475)+ Sin( 25, f4, -0.894674, 0.131654),
                        Sin( 25, f1, 0.000936,  0.073017) + Sin( 25, f2, -0.627624, 0.144020)+ Sin( 25, f3, -0.846824, 0.033301)+ Sin( 25, f4, -0.958234, 0.115347),
                        Sin( 25, f1, -0.869564,  0.065894) + Sin( 25, f2, -0.894574, 0.095533)+ Sin( 25, f3, -1.076574, 0.018841)+ Sin( 25, f4, -0.903964, 0.064514),
                        Sin( 25, f1, 4.265476,  0.064396) + Sin( 25, f2, 4.257956, 0.074426)+ Sin( 25, f3, 1.668750, 0.006015)+ Sin( 25, f4, 2.257647, 0.012070),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018660,  0.105665) + Sin( 54, f2, 2.514800, 0.034570)+ Sin( 54, f3, 2.114970, 0.021605)+ Sin( 54, f4, 1.110750, 0.079582),
                        Sin( 54, f1, 2.109270,  0.100152) + Sin( 54, f2, -2.782730, 0.011667)+ Sin( 54, f3, 2.591650, 0.028858)+ Sin( 54, f4, 1.290570, 0.071191),
                        Sin( 54, f1, 2.586260,  0.063494) + Sin( 54, f2, -1.322930, 0.048104)+ Sin( 54, f3, 3.041530, 0.031695)+ Sin( 54, f4, 1.558600, 0.032954),
                        Sin( 54, f1, -2.599330,  0.072046) + Sin( 54, f2, -1.409940, 0.085531)+ Sin( 54, f3, -2.385450, 0.060949)+ Sin( 54, f4, -2.328370, 0.016272),
                        Sin( 54, f1, -2.604240,  0.077528) + Sin( 54, f2, -1.697510, 0.125665)+ Sin( 54, f3, -2.074580, 0.124155)+ Sin( 54, f4, -2.642990, 0.012879),
                        Sin( 54, f1, 2.192260,  0.077258) + Sin( 54, f2, -1.924330, 0.154200)+ Sin( 54, f3, -2.201330, 0.119025)+ Sin( 54, f4, 1.343910, 0.060773),
                        Sin( 54, f1, 1.559540,  0.154439) + Sin( 54, f2, -2.027320, 0.163238)+ Sin( 54, f3, -2.744120, 0.102510)+ Sin( 54, f4, 1.138800, 0.119471),
                        Sin( 54, f1, 1.389280,  0.172485) + Sin( 54, f2, -2.056020, 0.163556)+ Sin( 54, f3, -2.982330, 0.109292)+ Sin( 54, f4, 1.041010, 0.138021),
                        Sin( 54, f1, 1.483360,  0.151349) + Sin( 54, f2, -2.031740, 0.166229)+ Sin( 54, f3, -2.724330, 0.114088)+ Sin( 54, f4, 1.005930, 0.115284),
                        Sin( 54, f1, 2.128610,  0.062494) + Sin( 54, f2, -1.924750, 0.157783)+ Sin( 54, f3, -2.316690, 0.133188)+ Sin( 54, f4, 1.028490, 0.045061),
                        Sin( 54, f1, -2.570250,  0.080487) + Sin( 54, f2, -1.716870, 0.131227)+ Sin( 54, f3, -2.229910, 0.133875)+ Sin( 54, f4, -2.560540, 0.023169),
                        Sin( 54, f1, -2.678710,  0.082522) + Sin( 54, f2, -1.547460, 0.089746)+ Sin( 54, f3, -2.735220, 0.073221)+ Sin( 54, f4, -2.722280, 0.029770),
                        Sin( 54, f1, 2.606450,  0.069934) + Sin( 54, f2, -1.608420, 0.048468)+ Sin( 54, f3, 2.884370, 0.045625)+ Sin( 54, f4, 1.878580, 0.030477),
                        Sin( 54, f1, 2.052150,  0.099285) + Sin( 54, f2, -2.856890, 0.011033)+ Sin( 54, f3, 2.555860, 0.028158)+ Sin( 54, f4, 1.330060, 0.066270),
                        Sin( 54, f1, 2.006690,  0.105611) + Sin( 54, f2, 1.982670, 0.023698)+ Sin( 54, f3, 1.017930, 0.013159)+ Sin( 54, f4, 1.144780, 0.076791),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589456,  0.105665) + Sin( 54, f2, 4.085596, 0.034570)+ Sin( 54, f3, 3.685766, 0.021605)+ Sin( 54, f4, 2.681546, 0.079582),
                        Sin( 54, f1, 3.680066,  0.100152) + Sin( 54, f2, -1.211934, 0.011667)+ Sin( 54, f3, 4.162446, 0.028858)+ Sin( 54, f4, 2.861366, 0.071191),
                        Sin( 54, f1, 4.157056,  0.063494) + Sin( 54, f2, 0.247866, 0.048104)+ Sin( 54, f3, 4.612326, 0.031695)+ Sin( 54, f4, 3.129396, 0.032954),
                        Sin( 54, f1, -1.028534,  0.072046) + Sin( 54, f2, 0.160856, 0.085531)+ Sin( 54, f3, -0.814654, 0.060949)+ Sin( 54, f4, -0.757574, 0.016272),
                        Sin( 54, f1, -1.033444,  0.077528) + Sin( 54, f2, -0.126714, 0.125665)+ Sin( 54, f3, -0.503784, 0.124155)+ Sin( 54, f4, -1.072194, 0.012879),
                        Sin( 54, f1, 3.763056,  0.077258) + Sin( 54, f2, -0.353534, 0.154200)+ Sin( 54, f3, -0.630534, 0.119025)+ Sin( 54, f4, 2.914706, 0.060773),
                        Sin( 54, f1, 3.130336,  0.154439) + Sin( 54, f2, -0.456524, 0.163238)+ Sin( 54, f3, -1.173324, 0.102510)+ Sin( 54, f4, 2.709596, 0.119471),
                        Sin( 54, f1, 2.960076,  0.172485) + Sin( 54, f2, -0.485224, 0.163556)+ Sin( 54, f3, -1.411534, 0.109292)+ Sin( 54, f4, 2.611806, 0.138021),
                        Sin( 54, f1, 3.054156,  0.151349) + Sin( 54, f2, -0.460944, 0.166229)+ Sin( 54, f3, -1.153534, 0.114088)+ Sin( 54, f4, 2.576726, 0.115284),
                        Sin( 54, f1, 3.699406,  0.062494) + Sin( 54, f2, -0.353954, 0.157783)+ Sin( 54, f3, -0.745894, 0.133188)+ Sin( 54, f4, 2.599286, 0.045061),
                        Sin( 54, f1, -0.999454,  0.080487) + Sin( 54, f2, -0.146074, 0.131227)+ Sin( 54, f3, -0.659114, 0.133875)+ Sin( 54, f4, -0.989744, 0.023169),
                        Sin( 54, f1, -1.107914,  0.082522) + Sin( 54, f2, 0.023336, 0.089746)+ Sin( 54, f3, -1.164424, 0.073221)+ Sin( 54, f4, -1.151484, 0.029770),
                        Sin( 54, f1, 4.177246,  0.069934) + Sin( 54, f2, -0.037624, 0.048468)+ Sin( 54, f3, 4.455166, 0.045625)+ Sin( 54, f4, 3.449376, 0.030477),
                        Sin( 54, f1, 3.622946,  0.099285) + Sin( 54, f2, -1.286094, 0.011033)+ Sin( 54, f3, 4.126656, 0.028158)+ Sin( 54, f4, 2.900856, 0.066270),
                        Sin( 54, f1, 3.577486,  0.105611) + Sin( 54, f2, 3.553466, 0.023698)+ Sin( 54, f3, 2.588726, 0.013159)+ Sin( 54, f4, 2.715576, 0.076791),
                        zero,
                        zero,
                        ]                 
            
            swap_i = [  zero,
                        Sin( 94, f1, 0.805172,  0.194270) + Sin( 94, f2, 1.948880, 0.139248)+ Sin( 94, f3, 2.547750, 0.036307)+ Sin( 94, f4, 2.451420, 0.003174),
                        Sin( 93, f1, 2.186170,  0.170397) + Sin( 93, f2, 2.713350, 0.092304)+ Sin( 93, f3, 2.522340, 0.035369)+ Sin( 93, f4, -1.863810, 0.019851),
                        Sin( 94, f1, 2.496390,  0.134673) + Sin( 94, f2, -2.577090, 0.087416)+ Sin( 94, f3, 2.150460, 0.008949)+ Sin( 94, f4, -1.859250, 0.032748),
                        Sin( 90, f1, 2.827230,  0.062593) + Sin( 90, f2, -2.120480, 0.077487)+ Sin( 90, f3, -0.675363, 0.026340)+ Sin( 90, f4, -1.791510, 0.029133),
                        Sin( 90, f1, -3.117050,  0.027948) + Sin( 90, f2, -1.531170, 0.055452)+ Sin( 90, f3, -0.767521, 0.045109)+ Sin( 90, f4, -1.768120, 0.008127),
                        Sin( 91, f1, 2.233110,  0.038181) + Sin( 91, f2, -1.727490, 0.049492)+ Sin( 91, f3, -0.765254, 0.040441)+ Sin( 91, f4, 1.517640, 0.008783),
                        Sin( 92, f1, 2.192500,  0.071940) + Sin( 92, f2, -1.640770, 0.032888)+ Sin( 92, f3, -0.355789, 0.016886)+ Sin( 92, f4, 1.729740, 0.009961),
                        Sin( 94, f1, 2.359730,  0.050373) + Sin( 94, f2, -0.689825, 0.015335)+ Sin( 94, f3, 1.694760, 0.020541)+ Sin( 94, f4, 2.873040, 0.011296),
                        Sin( 95, f1, 2.755130,  0.011126) + Sin( 95, f2, -1.052590, 0.030421)+ Sin( 95, f3, 2.198310, 0.035613)+ Sin( 95, f4, -2.586140, 0.024789),
                        Sin( 95, f1, -2.455700,  0.005587) + Sin( 95, f2, -1.593830, 0.031108)+ Sin( 95, f3, 2.633880, 0.036659)+ Sin( 95, f4, -2.268750, 0.028973),
                        Sin( 95, f1, 2.028160,  0.019500) + Sin( 95, f2, -1.866370, 0.025345)+ Sin( 95, f3, -3.086110, 0.033814)+ Sin( 95, f4, -2.095950, 0.018554),
                        Sin( 94, f1, 1.651630,  0.022085) + Sin( 94, f2, -1.604190, 0.014267)+ Sin( 94, f3, -2.487270, 0.031017)+ Sin( 94, f4, -1.542310, 0.008406),
                        Sin( 93, f1, 0.517038,  0.002650) + Sin( 93, f2, -1.831720, 0.018771)+ Sin( 93, f3, -1.818390, 0.022771)+ Sin( 93, f4, 0.005110, 0.006296),
                        Sin( 93, f1, -1.534130,  0.020871) + Sin( 93, f2, -1.971900, 0.025118)+ Sin( 93, f3, -0.586256, 0.016386)+ Sin( 93, f4, 1.894270, 0.004794),
                        Sin( 93, f1, 1.236170,  0.003855) + Sin( 93, f2, -1.858530, 0.022939)+ Sin( 93, f3, 0.406213, 0.027897)+ Sin( 93, f4, -2.915720, 0.013227),
                        Sin( 93, f1, 1.199990,  0.025967) + Sin( 93, f2, -1.553200, 0.008824)+ Sin( 93, f3, 0.618220, 0.035758)+ Sin( 93, f4, -2.613360, 0.021361),
                        Sin( 93, f1, 0.537929,  0.018409) + Sin( 93, f2, -1.742640, 0.020949)+ Sin( 93, f3, 0.461022, 0.025338)+ Sin( 93, f4, -2.565330, 0.025384),
                        Sin( 94, f1, -0.869053,  0.021841) + Sin( 94, f2, -1.747790, 0.028712)+ Sin( 94, f3, -0.914360, 0.011598)+ Sin( 94, f4, -2.316030, 0.019655),
                        Sin( 93, f1, 0.433952,  0.013970) + Sin( 93, f2, -1.670070, 0.022201)+ Sin( 93, f3, -1.966930, 0.023586)+ Sin( 93, f4, -1.689740, 0.012257),
                        Sin( 92, f1, 1.143130,  0.039089) + Sin( 92, f2, -0.660965, 0.004423)+ Sin( 92, f3, -2.313020, 0.025402)+ Sin( 92, f4, -1.490170, 0.013904),
                        Sin( 92, f1, 1.150500,  0.027787) + Sin( 92, f2, -1.113080, 0.011510)+ Sin( 92, f3, -2.843000, 0.019236)+ Sin( 92, f4, -1.635180, 0.017204),
                        Sin( 93, f1, -1.589000,  0.008111) + Sin( 93, f2, -1.508910, 0.028157)+ Sin( 93, f3, 2.631190, 0.020106)+ Sin( 93, f4, -2.007240, 0.017373),
                        Sin( 94, f1, -2.476370,  0.004090) + Sin( 94, f2, -1.646800, 0.029450)+ Sin( 94, f3, 2.128290, 0.026566)+ Sin( 94, f4, -2.543990, 0.016494),
                        Sin( 94, f1, 1.391740,  0.030788) + Sin( 94, f2, -1.688660, 0.008781)+ Sin( 94, f3, 1.736780, 0.024413)+ Sin( 94, f4, -3.105300, 0.015175),
                        Sin( 94, f1, 1.193590,  0.030256) + Sin( 94, f2, -2.617480, 0.003049)+ Sin( 94, f3, 0.915003, 0.013442)+ Sin( 94, f4, 2.942180, 0.014708),
                        Sin( 94, f1, -0.741574,  0.006159) + Sin( 94, f2, -1.940890, 0.024870)+ Sin( 94, f3, -0.548408, 0.015467)+ Sin( 94, f4, 3.002800, 0.014086),
                        Sin( 93, f1, -1.982960,  0.009743) + Sin( 93, f2, -1.792340, 0.032488)+ Sin( 93, f3, -0.982727, 0.019021)+ Sin( 93, f4, -2.731590, 0.017381),
                        Sin( 93, f1, 1.663210,  0.023759) + Sin( 93, f2, -1.518540, 0.017635)+ Sin( 93, f3, -0.819812, 0.011504)+ Sin( 93, f4, -2.108030, 0.026393),
                        Sin( 93, f1, 1.365390,  0.031535) + Sin( 93, f2, -0.434830, 0.006408)+ Sin( 93, f3, 0.526161, 0.006661)+ Sin( 93, f4, -1.860760, 0.029386),
                        Sin( 94, f1, 0.499708,  0.010127) + Sin( 94, f2, -1.742850, 0.019893)+ Sin( 94, f3, 1.784380, 0.008385)+ Sin( 94, f4, -1.865720, 0.025771),
                        Sin( 95, f1, -0.991666,  0.014632) + Sin( 95, f2, -1.859510, 0.029523)+ Sin( 95, f3, 2.598740, 0.016671)+ Sin( 95, f4, -1.596480, 0.014671),
                        Sin( 95, f1, 1.133110,  0.022815) + Sin( 95, f2, -1.756450, 0.017547)+ Sin( 95, f3, 2.819510, 0.021309)+ Sin( 95, f4, 0.929576, 0.003708),
                        Sin( 96, f1, 1.248650,  0.034944) + Sin( 96, f2, 0.517077, 0.005332)+ Sin( 96, f3, -3.083070, 0.014482)+ Sin( 96, f4, 2.469440, 0.007645),
                        Sin( 95, f1, 0.801080,  0.009825) + Sin( 95, f2, -1.633800, 0.020044)+ Sin( 95, f3, -1.894260, 0.011319)+ Sin( 95, f4, -2.869390, 0.010170),
                        Sin( 94, f1, -1.370280,  0.014775) + Sin( 94, f2, -1.665280, 0.035255)+ Sin( 94, f3, -1.271330, 0.013551)+ Sin( 94, f4, -2.767990, 0.019223),
                        Sin( 94, f1, 1.330750,  0.016894) + Sin( 94, f2, -1.535490, 0.024542)+ Sin( 94, f3, -0.366297, 0.011233)+ Sin( 94, f4, -2.381520, 0.026520),
                        Sin( 94, f1, 1.318040,  0.035703) + Sin( 94, f2, 0.741502, 0.007624)+ Sin( 94, f3, 0.465032, 0.017492)+ Sin( 94, f4, -1.827100, 0.019133),
                        Sin( 95, f1, 0.966537,  0.015730) + Sin( 95, f2, -1.895030, 0.008777)+ Sin( 95, f3, 0.803792, 0.017654)+ Sin( 95, f4, -1.405840, 0.008353),
                        Sin( 96, f1, -1.417710,  0.019050) + Sin( 96, f2, -1.801550, 0.031005)+ Sin( 96, f3, 1.705700, 0.011333)+ Sin( 96, f4, -0.869421, 0.005781),
                        Sin( 96, f1, 1.770540,  0.005135) + Sin( 96, f2, -1.626330, 0.028441)+ Sin( 96, f3, 2.628310, 0.017152)+ Sin( 96, f4, 0.642078, 0.003288),
                        Sin( 96, f1, 1.438370,  0.031370) + Sin( 96, f2, -0.098368, 0.006425)+ Sin( 96, f3, 2.983140, 0.017493)+ Sin( 96, f4, -3.088870, 0.012949),
                        Sin( 95, f1, 1.137390,  0.019552) + Sin( 95, f2, -1.951750, 0.008965)+ Sin( 95, f3, -2.691220, 0.012407)+ Sin( 95, f4, -2.652550, 0.025533),
                        Sin( 94, f1, -0.905295,  0.014592) + Sin( 94, f2, -2.009110, 0.028775)+ Sin( 94, f3, -2.087650, 0.009519)+ Sin( 94, f4, -2.638660, 0.028134),
                        Sin( 94, f1, 0.852091,  0.010442) + Sin( 94, f2, -1.854620, 0.028023)+ Sin( 94, f3, -0.376291, 0.004389)+ Sin( 94, f4, -2.527370, 0.025444),
                        Sin( 94, f1, 1.397950,  0.035897) + Sin( 94, f2, -0.276613, 0.006540)+ Sin( 94, f3, 0.401917, 0.015994)+ Sin( 94, f4, -1.898110, 0.016120),
                        Sin( 95, f1, 1.227730,  0.022175) + Sin( 95, f2, -0.975409, 0.006973)+ Sin( 95, f3, 0.260064, 0.018033)+ Sin( 95, f4, -1.143980, 0.014266),
                        Sin( 96, f1, -1.002920,  0.017616) + Sin( 96, f2, -1.742710, 0.032756)+ Sin( 96, f3, -0.634988, 0.008619)+ Sin( 96, f4, -1.203930, 0.014275),
                        Sin( 96, f1, 0.086115,  0.009438) + Sin( 96, f2, -1.607160, 0.035480)+ Sin( 96, f3, -2.317810, 0.014433)+ Sin( 96, f4, -1.593610, 0.012645),
                        Sin( 96, f1, 1.325340,  0.038895) + Sin( 96, f2, -0.344742, 0.010373)+ Sin( 96, f3, -2.798080, 0.020380)+ Sin( 96, f4, -2.255570, 0.013145),
                        Sin( 95, f1, 1.308440,  0.028345) + Sin( 95, f2, 0.642583, 0.005402)+ Sin( 95, f3, 3.010100, 0.018418)+ Sin( 95, f4, -2.798200, 0.015109),
                        Sin( 94, f1, -1.517810,  0.014832) + Sin( 94, f2, -1.757070, 0.022468)+ Sin( 94, f3, 2.347570, 0.019567)+ Sin( 94, f4, -3.088020, 0.016418),
                        Sin( 93, f1, -1.933410,  0.018401) + Sin( 93, f2, -1.667160, 0.031985)+ Sin( 93, f3, 1.871030, 0.024251)+ Sin( 93, f4, -3.065440, 0.014857),
                        Sin( 93, f1, 1.672810,  0.017373) + Sin( 93, f2, -1.175930, 0.013351)+ Sin( 93, f3, 1.489490, 0.022153)+ Sin( 93, f4, -2.771870, 0.013876),
                        Sin( 93, f1, 1.115910,  0.019780) + Sin( 93, f2, -2.784140, 0.001446)+ Sin( 93, f3, 0.567171, 0.009934)+ Sin( 93, f4, -2.164510, 0.020823),
                        Sin( 94, f1, -0.545938,  0.020983) + Sin( 94, f2, -2.011430, 0.025467)+ Sin( 94, f3, -1.071240, 0.022258)+ Sin( 94, f4, -1.900580, 0.026606),
                        Sin( 94, f1, -0.778006,  0.022441) + Sin( 94, f2, -1.702370, 0.033811)+ Sin( 94, f3, -1.218570, 0.035187)+ Sin( 94, f4, -1.910620, 0.019175),
                        Sin( 95, f1, 1.283630,  0.019150) + Sin( 95, f2, -1.134150, 0.023745)+ Sin( 95, f3, -1.016260, 0.030905)+ Sin( 95, f4, -1.715530, 0.007549),
                        Sin( 94, f1, 1.603990,  0.026267) + Sin( 94, f2, -0.402752, 0.017902)+ Sin( 94, f3, -0.206657, 0.019876)+ Sin( 94, f4, 0.789114, 0.005674),
                        Sin( 93, f1, 0.367994,  0.010764) + Sin( 93, f2, -1.627040, 0.022388)+ Sin( 93, f3, 0.956900, 0.023426)+ Sin( 93, f4, 1.981620, 0.007928),
                        Sin( 93, f1, -0.298635,  0.025472) + Sin( 93, f2, -1.951260, 0.039163)+ Sin( 93, f3, 1.696710, 0.030220)+ Sin( 93, f4, -2.822300, 0.013693),
                        Sin( 92, f1, 0.945742,  0.025928) + Sin( 92, f2, -1.395550, 0.025344)+ Sin( 92, f3, 2.274750, 0.034360)+ Sin( 92, f4, -2.401170, 0.022974),
                        Sin( 94, f1, 1.635280,  0.025981) + Sin( 94, f2, 0.849479, 0.015292)+ Sin( 94, f3, 2.786300, 0.037543)+ Sin( 94, f4, -2.220710, 0.028039),
                        Sin( 94, f1, 2.134250,  0.024410) + Sin( 94, f2, 2.652380, 0.009011)+ Sin( 94, f3, -3.038440, 0.037490)+ Sin( 94, f4, -1.777080, 0.022344),
                        Sin( 94, f1, 2.517090,  0.043359) + Sin( 94, f2, -2.597180, 0.031369)+ Sin( 94, f3, -2.644530, 0.024337)+ Sin( 94, f4, -0.721380, 0.013428),
                        Sin( 94, f1, 2.385000,  0.054338) + Sin( 94, f2, -2.806850, 0.044509)+ Sin( 94, f3, -0.385297, 0.010579)+ Sin( 94, f4, 0.348426, 0.010936),
                        Sin( 92, f1, 1.852100,  0.024984) + Sin( 92, f2, 2.633440, 0.029579)+ Sin( 92, f3, 0.168754, 0.038037)+ Sin( 92, f4, 1.021510, 0.006540),
                        Sin( 89, f1, 1.546220,  0.038743) + Sin( 89, f2, 2.737330, 0.055844)+ Sin( 89, f3, 0.186495, 0.046963)+ Sin( 89, f4, -3.025390, 0.011910),
                        Sin( 88, f1, 2.142670,  0.087924) + Sin( 88, f2, -2.709240, 0.091271)+ Sin( 88, f3, 0.130135, 0.034066)+ Sin( 88, f4, -2.754750, 0.031224),
                        Sin( 87, f1, 2.321660,  0.144242) + Sin( 87, f2, -2.541460, 0.099213)+ Sin( 87, f3, 0.087421, 0.005306)+ Sin( 87, f4, -2.615110, 0.031689),
                        Sin( 82, f1, 2.736380,  0.148020) + Sin( 82, f2, -1.534390, 0.093600)+ Sin( 82, f3, -3.088750, 0.021847)+ Sin( 82, f4, -2.580420, 0.015253),
                        Sin( 85, f1, -2.376100,  0.190527) + Sin( 85, f2, -0.714135, 0.172072)+ Sin( 85, f3, -2.877550, 0.035055)+ Sin( 85, f4, 0.926797, 0.002451),
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin( 94, f1, 2.375968,  0.194270) + Sin( 94, f2, 3.519676, 0.139248)+ Sin( 94, f3, 4.118546, 0.036307)+ Sin( 94, f4, 4.022216, 0.003174),
                        Sin( 93, f1, 3.756966,  0.170397) + Sin( 93, f2, 4.284146, 0.092304)+ Sin( 93, f3, 4.093136, 0.035369)+ Sin( 93, f4, -0.293014, 0.019851),
                        Sin( 94, f1, 4.067186,  0.134673) + Sin( 94, f2, -1.006294, 0.087416)+ Sin( 94, f3, 3.721256, 0.008949)+ Sin( 94, f4, -0.288454, 0.032748),
                        Sin( 90, f1, 4.398026,  0.062593) + Sin( 90, f2, -0.549684, 0.077487)+ Sin( 90, f3, 0.895433, 0.026340)+ Sin( 90, f4, -0.220714, 0.029133),
                        Sin( 90, f1, -1.546254,  0.027948) + Sin( 90, f2, 0.039626, 0.055452)+ Sin( 90, f3, 0.803275, 0.045109)+ Sin( 90, f4, -0.197324, 0.008127),
                        Sin( 91, f1, 3.803906,  0.038181) + Sin( 91, f2, -0.156694, 0.049492)+ Sin( 91, f3, 0.805542, 0.040441)+ Sin( 91, f4, 3.088436, 0.008783),
                        Sin( 92, f1, 3.763296,  0.071940) + Sin( 92, f2, -0.069974, 0.032888)+ Sin( 92, f3, 1.215007, 0.016886)+ Sin( 92, f4, 3.300536, 0.009961),
                        Sin( 94, f1, 3.930526,  0.050373) + Sin( 94, f2, 0.880971, 0.015335)+ Sin( 94, f3, 3.265556, 0.020541)+ Sin( 94, f4, 4.443836, 0.011296),
                        Sin( 95, f1, 4.325926,  0.011126) + Sin( 95, f2, 0.518206, 0.030421)+ Sin( 95, f3, 3.769106, 0.035613)+ Sin( 95, f4, -1.015344, 0.024789),
                        Sin( 95, f1, -0.884904,  0.005587) + Sin( 95, f2, -0.023034, 0.031108)+ Sin( 95, f3, 4.204676, 0.036659)+ Sin( 95, f4, -0.697954, 0.028973),
                        Sin( 95, f1, 3.598956,  0.019500) + Sin( 95, f2, -0.295574, 0.025345)+ Sin( 95, f3, -1.515314, 0.033814)+ Sin( 95, f4, -0.525154, 0.018554),
                        Sin( 94, f1, 3.222426,  0.022085) + Sin( 94, f2, -0.033394, 0.014267)+ Sin( 94, f3, -0.916474, 0.031017)+ Sin( 94, f4, 0.028486, 0.008406),
                        Sin( 93, f1, 2.087834,  0.002650) + Sin( 93, f2, -0.260924, 0.018771)+ Sin( 93, f3, -0.247594, 0.022771)+ Sin( 93, f4, 1.575907, 0.006296),
                        Sin( 93, f1, 0.036666,  0.020871) + Sin( 93, f2, -0.401104, 0.025118)+ Sin( 93, f3, 0.984540, 0.016386)+ Sin( 93, f4, 3.465066, 0.004794),
                        Sin( 93, f1, 2.806966,  0.003855) + Sin( 93, f2, -0.287734, 0.022939)+ Sin( 93, f3, 1.977009, 0.027897)+ Sin( 93, f4, -1.344924, 0.013227),
                        Sin( 93, f1, 2.770786,  0.025967) + Sin( 93, f2, 0.017596, 0.008824)+ Sin( 93, f3, 2.189016, 0.035758)+ Sin( 93, f4, -1.042564, 0.021361),
                        Sin( 93, f1, 2.108725,  0.018409) + Sin( 93, f2, -0.171844, 0.020949)+ Sin( 93, f3, 2.031818, 0.025338)+ Sin( 93, f4, -0.994534, 0.025384),
                        Sin( 94, f1, 0.701743,  0.021841) + Sin( 94, f2, -0.176994, 0.028712)+ Sin( 94, f3, 0.656436, 0.011598)+ Sin( 94, f4, -0.745234, 0.019655),
                        Sin( 93, f1, 2.004748,  0.013970) + Sin( 93, f2, -0.099274, 0.022201)+ Sin( 93, f3, -0.396134, 0.023586)+ Sin( 93, f4, -0.118944, 0.012257),
                        Sin( 92, f1, 2.713926,  0.039089) + Sin( 92, f2, 0.909831, 0.004423)+ Sin( 92, f3, -0.742224, 0.025402)+ Sin( 92, f4, 0.080626, 0.013904),
                        Sin( 92, f1, 2.721296,  0.027787) + Sin( 92, f2, 0.457716, 0.011510)+ Sin( 92, f3, -1.272204, 0.019236)+ Sin( 92, f4, -0.064384, 0.017204),
                        Sin( 93, f1, -0.018204,  0.008111) + Sin( 93, f2, 0.061886, 0.028157)+ Sin( 93, f3, 4.201986, 0.020106)+ Sin( 93, f4, -0.436444, 0.017373),
                        Sin( 94, f1, -0.905574,  0.004090) + Sin( 94, f2, -0.076004, 0.029450)+ Sin( 94, f3, 3.699086, 0.026566)+ Sin( 94, f4, -0.973194, 0.016494),
                        Sin( 94, f1, 2.962536,  0.030788) + Sin( 94, f2, -0.117864, 0.008781)+ Sin( 94, f3, 3.307576, 0.024413)+ Sin( 94, f4, -1.534504, 0.015175),
                        Sin( 94, f1, 2.764386,  0.030256) + Sin( 94, f2, -1.046684, 0.003049)+ Sin( 94, f3, 2.485799, 0.013442)+ Sin( 94, f4, 4.512976, 0.014708),
                        Sin( 94, f1, 0.829222,  0.006159) + Sin( 94, f2, -0.370094, 0.024870)+ Sin( 94, f3, 1.022388, 0.015467)+ Sin( 94, f4, 4.573596, 0.014086),
                        Sin( 93, f1, -0.412164,  0.009743) + Sin( 93, f2, -0.221544, 0.032488)+ Sin( 93, f3, 0.588069, 0.019021)+ Sin( 93, f4, -1.160794, 0.017381),
                        Sin( 93, f1, 3.234006,  0.023759) + Sin( 93, f2, 0.052256, 0.017635)+ Sin( 93, f3, 0.750984, 0.011504)+ Sin( 93, f4, -0.537234, 0.026393),
                        Sin( 93, f1, 2.936186,  0.031535) + Sin( 93, f2, 1.135966, 0.006408)+ Sin( 93, f3, 2.096957, 0.006661)+ Sin( 93, f4, -0.289964, 0.029386),
                        Sin( 94, f1, 2.070504,  0.010127) + Sin( 94, f2, -0.172054, 0.019893)+ Sin( 94, f3, 3.355176, 0.008385)+ Sin( 94, f4, -0.294924, 0.025771),
                        Sin( 95, f1, 0.579130,  0.014632) + Sin( 95, f2, -0.288714, 0.029523)+ Sin( 95, f3, 4.169536, 0.016671)+ Sin( 95, f4, -0.025684, 0.014671),
                        Sin( 95, f1, 2.703906,  0.022815) + Sin( 95, f2, -0.185654, 0.017547)+ Sin( 95, f3, 4.390306, 0.021309)+ Sin( 95, f4, 2.500372, 0.003708),
                        Sin( 96, f1, 2.819446,  0.034944) + Sin( 96, f2, 2.087873, 0.005332)+ Sin( 96, f3, -1.512274, 0.014482)+ Sin( 96, f4, 4.040236, 0.007645),
                        Sin( 95, f1, 2.371876,  0.009825) + Sin( 95, f2, -0.063004, 0.020044)+ Sin( 95, f3, -0.323464, 0.011319)+ Sin( 95, f4, -1.298594, 0.010170),
                        Sin( 94, f1, 0.200516,  0.014775) + Sin( 94, f2, -0.094484, 0.035255)+ Sin( 94, f3, 0.299466, 0.013551)+ Sin( 94, f4, -1.197194, 0.019223),
                        Sin( 94, f1, 2.901546,  0.016894) + Sin( 94, f2, 0.035306, 0.024542)+ Sin( 94, f3, 1.204499, 0.011233)+ Sin( 94, f4, -0.810724, 0.026520),
                        Sin( 94, f1, 2.888836,  0.035703) + Sin( 94, f2, 2.312298, 0.007624)+ Sin( 94, f3, 2.035828, 0.017492)+ Sin( 94, f4, -0.256304, 0.019133),
                        Sin( 95, f1, 2.537333,  0.015730) + Sin( 95, f2, -0.324234, 0.008777)+ Sin( 95, f3, 2.374588, 0.017654)+ Sin( 95, f4, 0.164956, 0.008353),
                        Sin( 96, f1, 0.153086,  0.019050) + Sin( 96, f2, -0.230754, 0.031005)+ Sin( 96, f3, 3.276496, 0.011333)+ Sin( 96, f4, 0.701375, 0.005781),
                        Sin( 96, f1, 3.341336,  0.005135) + Sin( 96, f2, -0.055534, 0.028441)+ Sin( 96, f3, 4.199106, 0.017152)+ Sin( 96, f4, 2.212874, 0.003288),
                        Sin( 96, f1, 3.009166,  0.031370) + Sin( 96, f2, 1.472428, 0.006425)+ Sin( 96, f3, 4.553936, 0.017493)+ Sin( 96, f4, -1.518074, 0.012949),
                        Sin( 95, f1, 2.708186,  0.019552) + Sin( 95, f2, -0.380954, 0.008965)+ Sin( 95, f3, -1.120424, 0.012407)+ Sin( 95, f4, -1.081754, 0.025533),
                        Sin( 94, f1, 0.665501,  0.014592) + Sin( 94, f2, -0.438314, 0.028775)+ Sin( 94, f3, -0.516854, 0.009519)+ Sin( 94, f4, -1.067864, 0.028134),
                        Sin( 94, f1, 2.422887,  0.010442) + Sin( 94, f2, -0.283824, 0.028023)+ Sin( 94, f3, 1.194505, 0.004389)+ Sin( 94, f4, -0.956574, 0.025444),
                        Sin( 94, f1, 2.968746,  0.035897) + Sin( 94, f2, 1.294183, 0.006540)+ Sin( 94, f3, 1.972713, 0.015994)+ Sin( 94, f4, -0.327314, 0.016120),
                        Sin( 95, f1, 2.798526,  0.022175) + Sin( 95, f2, 0.595387, 0.006973)+ Sin( 95, f3, 1.830860, 0.018033)+ Sin( 95, f4, 0.426816, 0.014266),
                        Sin( 96, f1, 0.567876,  0.017616) + Sin( 96, f2, -0.171914, 0.032756)+ Sin( 96, f3, 0.935808, 0.008619)+ Sin( 96, f4, 0.366866, 0.014275),
                        Sin( 96, f1, 1.656911,  0.009438) + Sin( 96, f2, -0.036364, 0.035480)+ Sin( 96, f3, -0.747014, 0.014433)+ Sin( 96, f4, -0.022814, 0.012645),
                        Sin( 96, f1, 2.896136,  0.038895) + Sin( 96, f2, 1.226054, 0.010373)+ Sin( 96, f3, -1.227284, 0.020380)+ Sin( 96, f4, -0.684774, 0.013145),
                        Sin( 95, f1, 2.879236,  0.028345) + Sin( 95, f2, 2.213379, 0.005402)+ Sin( 95, f3, 4.580896, 0.018418)+ Sin( 95, f4, -1.227404, 0.015109),
                        Sin( 94, f1, 0.052986,  0.014832) + Sin( 94, f2, -0.186274, 0.022468)+ Sin( 94, f3, 3.918366, 0.019567)+ Sin( 94, f4, -1.517224, 0.016418),
                        Sin( 93, f1, -0.362614,  0.018401) + Sin( 93, f2, -0.096364, 0.031985)+ Sin( 93, f3, 3.441826, 0.024251)+ Sin( 93, f4, -1.494644, 0.014857),
                        Sin( 93, f1, 3.243606,  0.017373) + Sin( 93, f2, 0.394866, 0.013351)+ Sin( 93, f3, 3.060286, 0.022153)+ Sin( 93, f4, -1.201074, 0.013876),
                        Sin( 93, f1, 2.686706,  0.019780) + Sin( 93, f2, -1.213344, 0.001446)+ Sin( 93, f3, 2.137967, 0.009934)+ Sin( 93, f4, -0.593714, 0.020823),
                        Sin( 94, f1, 1.024858,  0.020983) + Sin( 94, f2, -0.440634, 0.025467)+ Sin( 94, f3, 0.499556, 0.022258)+ Sin( 94, f4, -0.329784, 0.026606),
                        Sin( 94, f1, 0.792790,  0.022441) + Sin( 94, f2, -0.131574, 0.033811)+ Sin( 94, f3, 0.352226, 0.035187)+ Sin( 94, f4, -0.339824, 0.019175),
                        Sin( 95, f1, 2.854426,  0.019150) + Sin( 95, f2, 0.436646, 0.023745)+ Sin( 95, f3, 0.554536, 0.030905)+ Sin( 95, f4, -0.144734, 0.007549),
                        Sin( 94, f1, 3.174786,  0.026267) + Sin( 94, f2, 1.168044, 0.017902)+ Sin( 94, f3, 1.364139, 0.019876)+ Sin( 94, f4, 2.359910, 0.005674),
                        Sin( 93, f1, 1.938790,  0.010764) + Sin( 93, f2, -0.056244, 0.022388)+ Sin( 93, f3, 2.527696, 0.023426)+ Sin( 93, f4, 3.552416, 0.007928),
                        Sin( 93, f1, 1.272161,  0.025472) + Sin( 93, f2, -0.380464, 0.039163)+ Sin( 93, f3, 3.267506, 0.030220)+ Sin( 93, f4, -1.251504, 0.013693),
                        Sin( 92, f1, 2.516538,  0.025928) + Sin( 92, f2, 0.175246, 0.025344)+ Sin( 92, f3, 3.845546, 0.034360)+ Sin( 92, f4, -0.830374, 0.022974),
                        Sin( 94, f1, 3.206076,  0.025981) + Sin( 94, f2, 2.420275, 0.015292)+ Sin( 94, f3, 4.357096, 0.037543)+ Sin( 94, f4, -0.649914, 0.028039),
                        Sin( 94, f1, 3.705046,  0.024410) + Sin( 94, f2, 4.223176, 0.009011)+ Sin( 94, f3, -1.467644, 0.037490)+ Sin( 94, f4, -0.206284, 0.022344),
                        Sin( 94, f1, 4.087886,  0.043359) + Sin( 94, f2, -1.026384, 0.031369)+ Sin( 94, f3, -1.073734, 0.024337)+ Sin( 94, f4, 0.849416, 0.013428),
                        Sin( 94, f1, 3.955796,  0.054338) + Sin( 94, f2, -1.236054, 0.044509)+ Sin( 94, f3, 1.185499, 0.010579)+ Sin( 94, f4, 1.919222, 0.010936),
                        Sin( 92, f1, 3.422896,  0.024984) + Sin( 92, f2, 4.204236, 0.029579)+ Sin( 92, f3, 1.739550, 0.038037)+ Sin( 92, f4, 2.592306, 0.006540),
                        Sin( 89, f1, 3.117016,  0.038743) + Sin( 89, f2, 4.308126, 0.055844)+ Sin( 89, f3, 1.757291, 0.046963)+ Sin( 89, f4, -1.454594, 0.011910),
                        Sin( 88, f1, 3.713466,  0.087924) + Sin( 88, f2, -1.138444, 0.091271)+ Sin( 88, f3, 1.700931, 0.034066)+ Sin( 88, f4, -1.183954, 0.031224),
                        Sin( 87, f1, 3.892456,  0.144242) + Sin( 87, f2, -0.970664, 0.099213)+ Sin( 87, f3, 1.658218, 0.005306)+ Sin( 87, f4, -1.044314, 0.031689),
                        Sin( 82, f1, 4.307176,  0.148020) + Sin( 82, f2, 0.036406, 0.093600)+ Sin( 82, f3, -1.517954, 0.021847)+ Sin( 82, f4, -1.009624, 0.015253),
                        Sin( 85, f1, -0.805304,  0.190527) + Sin( 85, f2, 0.856661, 0.172072)+ Sin( 85, f3, -1.306754, 0.035055)+ Sin( 85, f4, 2.497593, 0.002451),
                        zero,
                        zero,
                        ] 
            p = {}
            # ms= 0 <> ms = +1

            
            
            marker = Waveform('MARKER.WFM', [Idle(1000),Idle(3600,marker1=1,marker2=1),Idle(1000)])
            waves.append(marker)
             
            
            sup_x=Waveform('SUP1_X.WFM', dqpi2_i+[Idle(self.evolution*1.2)]+dqpi_i+[Idle(self.evolution*1.2)]+dqdqpi2_i)
            sup_y=Waveform('SUP1_Y.WFM', dqpi2_q+[Idle(self.evolution*1.2)]+dqpi_q+[Idle(self.evolution*1.2)]+dqdqpi2_q)
            waves.append(sup_x)
            waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+dqdqpi2_i[::-1], t_0)
                ref_y = Waveform(name_y, [mod]+dqdqpi2_q[::-1], t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = self.evolution*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+dqpi_i[::-1], t_0)
                map_y = Waveform(name_y, [mod]+dqpi_q[::-1], t_0)
                waves.append(map_x)
                waves.append(map_y)
                
                t_3 = self.evolution*1.2 - map_x.stub
                repeat_3 = int(t_3 / 256)
                mod.duration = int(t_3 % 256)
                
                t_0 += map_x.duration + repeat_3 * 256
                
                name_x = 'REA_X%04i.WFM' % i
                name_y = 'REA_Y%04i.WFM' % i
                
                rea_x = Waveform(name_x, [mod]+dqpi2_i[::-1], t_0)
                rea_y = Waveform(name_y, [mod]+dqpi2_q[::-1], t_0)
                waves.append(rea_x)
                waves.append(rea_y)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                sub_seq.append(evo, evo,repeat=repeat_3)
                sub_seq.append(rea_x, rea_y)
                sub_seq.append(marker, marker)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
            
            # name = 'REF_1.SEQ'
            # sub_seq=Sequence(name)
            # sub_seq.append(marker, marker)
            # AWG.upload(sub_seq)
            # main_seq.append(sub_seq,wait=True)
            
            # name_x = 'REF_2I.WFM' 
            # name_y = 'REF_2Q.WFM'
            # rea_x = Waveform(name_x, p1_i+[Idle(250)]+p3_i)
            # rea_y = Waveform(name_y, p1_q+[Idle(250)]+p3_q)
            # waves.append(rea_x)
            # waves.append(rea_y)
            # name = 'REF_2.SEQ'
            # sub_seq=Sequence(name)
            # sub_seq.append(rea_x, rea_y)
            # sub_seq.append(marker, marker)
            # AWG.upload(sub_seq)
            # main_seq.append(sub_seq,wait=True)
            
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
                  
class EntFIDStor( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    evolution = Range(low=0., high=100000., value=12500., desc='free evolution time between creation and tomography [ns]', label='evo [ns]', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2783585592, desc='frequency [Hz]', label='frequency [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958948862, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818819214 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928676667  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)

    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], t + 4*self.evolution+30000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_3', 'freq_4', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress','evolution',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('power', width=30),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      

                                         ),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),
                                         Item('evolution', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Ent FID', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling  
      
            dqpi2_i = [ zero,
                        Sin( 59, f1, 1.093540,  0.076130) + Sin( 59, f2, 0.509851, 0.062588)+ Sin( 59, f3, -2.442730, 0.017227)+ Sin( 59, f4, 2.249760, 0.005961),
                        Sin( 59, f1, 0.886809,  0.083293) + Sin( 59, f2, -0.959098, 0.023318)+ Sin( 59, f3, -0.059114, 0.013474)+ Sin( 59, f4, -0.302780, 0.031838),
                        Sin( 59, f1, 1.273630,  0.046666) + Sin( 59, f2, -1.576120, 0.057356)+ Sin( 59, f3, 0.113813, 0.034072)+ Sin( 59, f4, -0.535770, 0.021166),
                        Sin( 59, f1, 2.362590,  0.058144) + Sin( 59, f2, -1.633910, 0.046235)+ Sin( 59, f3, 0.120950, 0.020934)+ Sin( 59, f4, -3.109850, 0.023095),
                        Sin( 59, f1, 2.550860,  0.083665) + Sin( 59, f2, 3.108950, 0.040261)+ Sin( 59, f3, -3.115300, 0.044660)+ Sin( 59, f4, 3.002540, 0.067334),
                        Sin( 59, f1, 2.626020,  0.100853) + Sin( 59, f2, 2.700690, 0.103885)+ Sin( 59, f3, -3.089160, 0.098830)+ Sin( 59, f4, 3.054410, 0.097615),
                        Sin( 59, f1, 2.634870,  0.124770) + Sin( 59, f2, 2.807540, 0.109907)+ Sin( 59, f3, -3.077250, 0.108478)+ Sin( 59, f4, 3.129320, 0.110198),
                        Sin( 59, f1, 2.680490,  0.129205) + Sin( 59, f2, -2.821910, 0.057056)+ Sin( 59, f3, -3.132500, 0.075094)+ Sin( 59, f4, -3.108110, 0.107773),
                        Sin( 59, f1, 2.780060,  0.100565) + Sin( 59, f2, -1.681530, 0.056816)+ Sin( 59, f3, 0.483849, 0.013819)+ Sin( 59, f4, -3.119530, 0.075077),
                        Sin( 59, f1, 2.085750,  0.042373) + Sin( 59, f2, -1.922590, 0.059395)+ Sin( 59, f3, 0.143190, 0.026391)+ Sin( 59, f4, 2.613300, 0.004043),
                        Sin( 59, f1, 0.585793,  0.093897) + Sin( 59, f2, -2.680070, 0.046475)+ Sin( 59, f3, -3.031940, 0.020610)+ Sin( 59, f4, 0.021265, 0.052260),
                        Sin( 59, f1, 0.363607,  0.132480) + Sin( 59, f2, 2.594850, 0.043986)+ Sin( 59, f3, -3.024710, 0.056371)+ Sin( 59, f4, -0.042994, 0.070056),
                        Sin( 59, f1, 0.369677,  0.125064) + Sin( 59, f2, 2.715720, 0.063816)+ Sin( 59, f3, -2.962560, 0.072648)+ Sin( 59, f4, -0.146017, 0.053080),
                        zero,
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 59, f1, 2.664336,  0.076130) + Sin( 59, f2, 2.080647, 0.062588)+ Sin( 59, f3, -0.871934, 0.017227)+ Sin( 59, f4, 3.820556, 0.005961),
                        Sin( 59, f1, 2.457605,  0.083293) + Sin( 59, f2, 0.611698, 0.023318)+ Sin( 59, f3, 1.511683, 0.013474)+ Sin( 59, f4, 1.268016, 0.031838),
                        Sin( 59, f1, 2.844426,  0.046666) + Sin( 59, f2, -0.005324, 0.057356)+ Sin( 59, f3, 1.684609, 0.034072)+ Sin( 59, f4, 1.035026, 0.021166),
                        Sin( 59, f1, 3.933386,  0.058144) + Sin( 59, f2, -0.063114, 0.046235)+ Sin( 59, f3, 1.691746, 0.020934)+ Sin( 59, f4, -1.539054, 0.023095),
                        Sin( 59, f1, 4.121656,  0.083665) + Sin( 59, f2, 4.679746, 0.040261)+ Sin( 59, f3, -1.544504, 0.044660)+ Sin( 59, f4, 4.573336, 0.067334),
                        Sin( 59, f1, 4.196816,  0.100853) + Sin( 59, f2, 4.271486, 0.103885)+ Sin( 59, f3, -1.518364, 0.098830)+ Sin( 59, f4, 4.625206, 0.097615),
                        Sin( 59, f1, 4.205666,  0.124770) + Sin( 59, f2, 4.378336, 0.109907)+ Sin( 59, f3, -1.506454, 0.108478)+ Sin( 59, f4, 4.700116, 0.110198),
                        Sin( 59, f1, 4.251286,  0.129205) + Sin( 59, f2, -1.251114, 0.057056)+ Sin( 59, f3, -1.561704, 0.075094)+ Sin( 59, f4, -1.537314, 0.107773),
                        Sin( 59, f1, 4.350856,  0.100565) + Sin( 59, f2, -0.110734, 0.056816)+ Sin( 59, f3, 2.054645, 0.013819)+ Sin( 59, f4, -1.548734, 0.075077),
                        Sin( 59, f1, 3.656546,  0.042373) + Sin( 59, f2, -0.351794, 0.059395)+ Sin( 59, f3, 1.713986, 0.026391)+ Sin( 59, f4, 4.184096, 0.004043),
                        Sin( 59, f1, 2.156589,  0.093897) + Sin( 59, f2, -1.109274, 0.046475)+ Sin( 59, f3, -1.461144, 0.020610)+ Sin( 59, f4, 1.592062, 0.052260),
                        Sin( 59, f1, 1.934403,  0.132480) + Sin( 59, f2, 4.165646, 0.043986)+ Sin( 59, f3, -1.453914, 0.056371)+ Sin( 59, f4, 1.527802, 0.070056),
                        Sin( 59, f1, 1.940473,  0.125064) + Sin( 59, f2, 4.286516, 0.063816)+ Sin( 59, f3, -1.391764, 0.072648)+ Sin( 59, f4, 1.424779, 0.053080),
                        zero,
                        zero,
                    ]
            dqpi_i = [  zero,
                        Sin( 92, f1, -0.454538,  0.103268) + Sin( 92, f2, 0.113813, 0.083348)+ Sin( 92, f3, 1.035260, 0.039526)+ Sin( 92, f4, -0.235299, 0.060181),
                        Sin( 92, f1, -1.242230,  0.082551) + Sin( 92, f2, 2.342580, 0.112927)+ Sin( 92, f3, 0.683590, 0.023966)+ Sin( 92, f4, -1.392770, 0.052857),
                        Sin( 92, f1, -0.570051,  0.081753) + Sin( 92, f2, 2.421540, 0.108091)+ Sin( 92, f3, 3.110800, 0.050681)+ Sin( 92, f4, -1.104930, 0.071553),
                        Sin( 92, f1, 1.613880,  0.046939) + Sin( 92, f2, 0.358534, 0.092163)+ Sin( 92, f3, 0.301257, 0.030780)+ Sin( 92, f4, 2.443500, 0.077083),
                        Sin( 92, f1, 2.452450,  0.072463) + Sin( 92, f2, 0.179178, 0.086158)+ Sin( 92, f3, 0.877995, 0.080878)+ Sin( 92, f4, 2.088550, 0.055870),
                        Sin( 92, f1, -0.026582,  0.065331) + Sin( 92, f2, 1.312160, 0.021794)+ Sin( 92, f3, -0.733777, 0.083284)+ Sin( 92, f4, 2.707670, 0.071625),
                        Sin( 92, f1, 0.185420,  0.089660) + Sin( 92, f2, 2.896840, 0.088713)+ Sin( 92, f3, -0.951154, 0.063644)+ Sin( 92, f4, -0.256942, 0.018436),
                        Sin( 92, f1, 2.154040,  0.063936) + Sin( 92, f2, 2.894950, 0.075998)+ Sin( 92, f3, -1.523470, 0.062110)+ Sin( 92, f4, -2.866290, 0.063553),
                        Sin( 92, f1, -0.452755,  0.053600) + Sin( 92, f2, 1.462200, 0.025371)+ Sin( 92, f3, -2.752500, 0.018863)+ Sin( 92, f4, 0.866778, 0.039607),
                        Sin( 92, f1, -0.785428,  0.130940) + Sin( 92, f2, 2.371360, 0.061561)+ Sin( 92, f3, 1.864440, 0.024270)+ Sin( 92, f4, 0.524808, 0.077120),
                        Sin( 92, f1, -0.785161,  0.130910) + Sin( 92, f2, -1.097850, 0.044052)+ Sin( 92, f3, 0.311399, 0.061460)+ Sin( 92, f4, 0.177093, 0.067005),
                        Sin( 92, f1, 2.418080,  0.076263) + Sin( 92, f2, -0.792928, 0.120430)+ Sin( 92, f3, 0.707349, 0.077137)+ Sin( 92, f4, -2.392780, 0.091332),
                        Sin( 92, f1, 2.399540,  0.125744) + Sin( 92, f2, -0.792833, 0.120517)+ Sin( 92, f3, 1.169180, 0.067201)+ Sin( 92, f4, -2.316320, 0.091997),
                        Sin( 92, f1, 2.361680,  0.090486) + Sin( 92, f2, -0.794382, 0.120697)+ Sin( 92, f3, 0.758710, 0.082666)+ Sin( 92, f4, -2.379980, 0.087343),
                        Sin( 92, f1, -0.784572,  0.130835) + Sin( 92, f2, -0.797348, 0.028802)+ Sin( 92, f3, 0.493688, 0.066926)+ Sin( 92, f4, 0.256819, 0.068131),
                        Sin( 92, f1, -0.785373,  0.130937) + Sin( 92, f2, 2.564450, 0.060220)+ Sin( 92, f3, 1.758050, 0.025936)+ Sin( 92, f4, 0.557028, 0.078751),
                        Sin( 92, f1, -0.544084,  0.075015) + Sin( 92, f2, 0.524433, 0.011388)+ Sin( 92, f3, -2.677740, 0.024689)+ Sin( 92, f4, 1.101670, 0.026620),
                        Sin( 92, f1, 1.673410,  0.037731) + Sin( 92, f2, 2.907920, 0.060105)+ Sin( 92, f3, -1.420000, 0.062482)+ Sin( 92, f4, -2.766220, 0.069645),
                        Sin( 92, f1, 0.046720,  0.092770) + Sin( 92, f2, 2.903200, 0.088746)+ Sin( 92, f3, -0.752501, 0.051731)+ Sin( 92, f4, 0.036126, 0.018399),
                        Sin( 92, f1, -0.153025,  0.079506) + Sin( 92, f2, 1.638970, 0.012389)+ Sin( 92, f3, -0.744956, 0.083483)+ Sin( 92, f4, 2.623440, 0.067547),
                        Sin( 92, f1, 2.332040,  0.056948) + Sin( 92, f2, 0.182443, 0.086099)+ Sin( 92, f3, 0.841935, 0.082136)+ Sin( 92, f4, 2.359890, 0.069574),
                        Sin( 92, f1, 1.639010,  0.052444) + Sin( 92, f2, 0.442599, 0.095738)+ Sin( 92, f3, 0.057032, 0.023826)+ Sin( 92, f4, 2.609420, 0.065344),
                        Sin( 92, f1, -0.488667,  0.087965) + Sin( 92, f2, 2.452440, 0.110080)+ Sin( 92, f3, 2.712520, 0.057271)+ Sin( 92, f4, -1.275270, 0.064742),
                        Sin( 92, f1, -1.114550,  0.088911) + Sin( 92, f2, 2.392690, 0.110481)+ Sin( 92, f3, -0.170951, 0.019454)+ Sin( 92, f4, -1.130650, 0.057024),
                        Sin( 92, f1, -0.467163,  0.102983) + Sin( 92, f2, -0.050119, 0.083821)+ Sin( 92, f3, 0.987139, 0.046402)+ Sin( 92, f4, -0.683360, 0.037041),
                        zero,
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 92, f1, 1.116258,  0.103268) + Sin( 92, f2, 1.684609, 0.083348)+ Sin( 92, f3, 2.606056, 0.039526)+ Sin( 92, f4, 1.335497, 0.060181),
                        Sin( 92, f1, 0.328566,  0.082551) + Sin( 92, f2, 3.913376, 0.112927)+ Sin( 92, f3, 2.254386, 0.023966)+ Sin( 92, f4, 0.178026, 0.052857),
                        Sin( 92, f1, 1.000745,  0.081753) + Sin( 92, f2, 3.992336, 0.108091)+ Sin( 92, f3, 4.681596, 0.050681)+ Sin( 92, f4, 0.465866, 0.071553),
                        Sin( 92, f1, 3.184676,  0.046939) + Sin( 92, f2, 1.929330, 0.092163)+ Sin( 92, f3, 1.872053, 0.030780)+ Sin( 92, f4, 4.014296, 0.077083),
                        Sin( 92, f1, 4.023246,  0.072463) + Sin( 92, f2, 1.749974, 0.086158)+ Sin( 92, f3, 2.448791, 0.080878)+ Sin( 92, f4, 3.659346, 0.055870),
                        Sin( 92, f1, 1.544214,  0.065331) + Sin( 92, f2, 2.882956, 0.021794)+ Sin( 92, f3, 0.837019, 0.083284)+ Sin( 92, f4, 4.278466, 0.071625),
                        Sin( 92, f1, 1.756216,  0.089660) + Sin( 92, f2, 4.467636, 0.088713)+ Sin( 92, f3, 0.619642, 0.063644)+ Sin( 92, f4, 1.313854, 0.018436),
                        Sin( 92, f1, 3.724836,  0.063936) + Sin( 92, f2, 4.465746, 0.075998)+ Sin( 92, f3, 0.047326, 0.062110)+ Sin( 92, f4, -1.295494, 0.063553),
                        Sin( 92, f1, 1.118041,  0.053600) + Sin( 92, f2, 3.032996, 0.025371)+ Sin( 92, f3, -1.181704, 0.018863)+ Sin( 92, f4, 2.437574, 0.039607),
                        Sin( 92, f1, 0.785368,  0.130940) + Sin( 92, f2, 3.942156, 0.061561)+ Sin( 92, f3, 3.435236, 0.024270)+ Sin( 92, f4, 2.095604, 0.077120),
                        Sin( 92, f1, 0.785635,  0.130910) + Sin( 92, f2, 0.472946, 0.044052)+ Sin( 92, f3, 1.882195, 0.061460)+ Sin( 92, f4, 1.747889, 0.067005),
                        Sin( 92, f1, 3.988876,  0.076263) + Sin( 92, f2, 0.777868, 0.120430)+ Sin( 92, f3, 2.278145, 0.077137)+ Sin( 92, f4, -0.821984, 0.091332),
                        Sin( 92, f1, 3.970336,  0.125744) + Sin( 92, f2, 0.777963, 0.120517)+ Sin( 92, f3, 2.739976, 0.067201)+ Sin( 92, f4, -0.745524, 0.091997),
                        Sin( 92, f1, 3.932476,  0.090486) + Sin( 92, f2, 0.776414, 0.120697)+ Sin( 92, f3, 2.329506, 0.082666)+ Sin( 92, f4, -0.809184, 0.087343),
                        Sin( 92, f1, 0.786224,  0.130835) + Sin( 92, f2, 0.773448, 0.028802)+ Sin( 92, f3, 2.064484, 0.066926)+ Sin( 92, f4, 1.827615, 0.068131),
                        Sin( 92, f1, 0.785423,  0.130937) + Sin( 92, f2, 4.135246, 0.060220)+ Sin( 92, f3, 3.328846, 0.025936)+ Sin( 92, f4, 2.127824, 0.078751),
                        Sin( 92, f1, 1.026712,  0.075015) + Sin( 92, f2, 2.095229, 0.011388)+ Sin( 92, f3, -1.106944, 0.024689)+ Sin( 92, f4, 2.672466, 0.026620),
                        Sin( 92, f1, 3.244206,  0.037731) + Sin( 92, f2, 4.478716, 0.060105)+ Sin( 92, f3, 0.150796, 0.062482)+ Sin( 92, f4, -1.195424, 0.069645),
                        Sin( 92, f1, 1.617516,  0.092770) + Sin( 92, f2, 4.473996, 0.088746)+ Sin( 92, f3, 0.818295, 0.051731)+ Sin( 92, f4, 1.606923, 0.018399),
                        Sin( 92, f1, 1.417771,  0.079506) + Sin( 92, f2, 3.209766, 0.012389)+ Sin( 92, f3, 0.825840, 0.083483)+ Sin( 92, f4, 4.194236, 0.067547),
                        Sin( 92, f1, 3.902836,  0.056948) + Sin( 92, f2, 1.753239, 0.086099)+ Sin( 92, f3, 2.412731, 0.082136)+ Sin( 92, f4, 3.930686, 0.069574),
                        Sin( 92, f1, 3.209806,  0.052444) + Sin( 92, f2, 2.013395, 0.095738)+ Sin( 92, f3, 1.627828, 0.023826)+ Sin( 92, f4, 4.180216, 0.065344),
                        Sin( 92, f1, 1.082129,  0.087965) + Sin( 92, f2, 4.023236, 0.110080)+ Sin( 92, f3, 4.283316, 0.057271)+ Sin( 92, f4, 0.295526, 0.064742),
                        Sin( 92, f1, 0.456246,  0.088911) + Sin( 92, f2, 3.963486, 0.110481)+ Sin( 92, f3, 1.399845, 0.019454)+ Sin( 92, f4, 0.440146, 0.057024),
                        Sin( 92, f1, 1.103633,  0.102983) + Sin( 92, f2, 1.520678, 0.083821)+ Sin( 92, f3, 2.557935, 0.046402)+ Sin( 92, f4, 0.887436, 0.037041),
                        zero,
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 54, f1, 2.018300,  0.105683) + Sin( 54, f2, 2.544370, 0.031793)+ Sin( 54, f3, 2.124710, 0.021333)+ Sin( 54, f4, 1.106500, 0.077730),
                        Sin( 54, f1, 2.107940,  0.100611) + Sin( 54, f2, -2.728500, 0.011277)+ Sin( 54, f3, 2.595420, 0.028758)+ Sin( 54, f4, 1.288230, 0.068920),
                        Sin( 54, f1, 2.575840,  0.063408) + Sin( 54, f2, -1.331710, 0.045781)+ Sin( 54, f3, 3.043670, 0.031299)+ Sin( 54, f4, 1.555790, 0.030443),
                        Sin( 54, f1, -2.610000,  0.071057) + Sin( 54, f2, -1.414230, 0.084703)+ Sin( 54, f3, -2.386890, 0.060560)+ Sin( 54, f4, -2.314930, 0.014941),
                        Sin( 54, f1, -2.606090,  0.076655) + Sin( 54, f2, -1.698230, 0.125012)+ Sin( 54, f3, -2.074640, 0.124395)+ Sin( 54, f4, -2.629390, 0.011731),
                        Sin( 54, f1, 2.189430,  0.076041) + Sin( 54, f2, -1.922630, 0.153003)+ Sin( 54, f3, -2.201840, 0.119373)+ Sin( 54, f4, 1.342690, 0.057931),
                        Sin( 54, f1, 1.554830,  0.152820) + Sin( 54, f2, -2.026130, 0.162186)+ Sin( 54, f3, -2.746020, 0.102872)+ Sin( 54, f4, 1.139280, 0.118437),
                        Sin( 54, f1, 1.387170,  0.170944) + Sin( 54, f2, -2.055090, 0.162519)+ Sin( 54, f3, -2.982980, 0.109756)+ Sin( 54, f4, 1.042020, 0.136647),
                        Sin( 54, f1, 1.484690,  0.150285) + Sin( 54, f2, -2.031540, 0.165220)+ Sin( 54, f3, -2.725630, 0.114524)+ Sin( 54, f4, 1.007010, 0.114255),
                        Sin( 54, f1, 2.131330,  0.062347) + Sin( 54, f2, -1.924500, 0.156723)+ Sin( 54, f3, -2.316670, 0.133452)+ Sin( 54, f4, 1.031100, 0.042318),
                        Sin( 54, f1, -2.569790,  0.080422) + Sin( 54, f2, -1.716980, 0.130705)+ Sin( 54, f3, -2.229870, 0.134220)+ Sin( 54, f4, -2.561750, 0.021451),
                        Sin( 54, f1, -2.669450,  0.082448) + Sin( 54, f2, -1.548840, 0.089300)+ Sin( 54, f3, -2.732130, 0.073211)+ Sin( 54, f4, -2.718460, 0.027786),
                        Sin( 54, f1, 2.619420,  0.068363) + Sin( 54, f2, -1.609040, 0.045594)+ Sin( 54, f3, 2.892010, 0.045121)+ Sin( 54, f4, 1.883520, 0.028257),
                        Sin( 54, f1, 2.056220,  0.098093) + Sin( 54, f2, -2.894530, 0.009838)+ Sin( 54, f3, 2.551020, 0.027375)+ Sin( 54, f4, 1.330440, 0.063627),
                        Sin( 54, f1, 2.008920,  0.104870) + Sin( 54, f2, 1.972030, 0.022360)+ Sin( 54, f3, 0.999274, 0.013031)+ Sin( 54, f4, 1.146140, 0.074802),
                        zero,
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 54, f1, 3.589096,  0.105683) + Sin( 54, f2, 4.115166, 0.031793)+ Sin( 54, f3, 3.695506, 0.021333)+ Sin( 54, f4, 2.677296, 0.077730),
                        Sin( 54, f1, 3.678736,  0.100611) + Sin( 54, f2, -1.157704, 0.011277)+ Sin( 54, f3, 4.166216, 0.028758)+ Sin( 54, f4, 2.859026, 0.068920),
                        Sin( 54, f1, 4.146636,  0.063408) + Sin( 54, f2, 0.239086, 0.045781)+ Sin( 54, f3, 4.614466, 0.031299)+ Sin( 54, f4, 3.126586, 0.030443),
                        Sin( 54, f1, -1.039204,  0.071057) + Sin( 54, f2, 0.156566, 0.084703)+ Sin( 54, f3, -0.816094, 0.060560)+ Sin( 54, f4, -0.744134, 0.014941),
                        Sin( 54, f1, -1.035294,  0.076655) + Sin( 54, f2, -0.127434, 0.125012)+ Sin( 54, f3, -0.503844, 0.124395)+ Sin( 54, f4, -1.058594, 0.011731),
                        Sin( 54, f1, 3.760226,  0.076041) + Sin( 54, f2, -0.351834, 0.153003)+ Sin( 54, f3, -0.631044, 0.119373)+ Sin( 54, f4, 2.913486, 0.057931),
                        Sin( 54, f1, 3.125626,  0.152820) + Sin( 54, f2, -0.455334, 0.162186)+ Sin( 54, f3, -1.175224, 0.102872)+ Sin( 54, f4, 2.710076, 0.118437),
                        Sin( 54, f1, 2.957966,  0.170944) + Sin( 54, f2, -0.484294, 0.162519)+ Sin( 54, f3, -1.412184, 0.109756)+ Sin( 54, f4, 2.612816, 0.136647),
                        Sin( 54, f1, 3.055486,  0.150285) + Sin( 54, f2, -0.460744, 0.165220)+ Sin( 54, f3, -1.154834, 0.114524)+ Sin( 54, f4, 2.577806, 0.114255),
                        Sin( 54, f1, 3.702126,  0.062347) + Sin( 54, f2, -0.353704, 0.156723)+ Sin( 54, f3, -0.745874, 0.133452)+ Sin( 54, f4, 2.601896, 0.042318),
                        Sin( 54, f1, -0.998994,  0.080422) + Sin( 54, f2, -0.146184, 0.130705)+ Sin( 54, f3, -0.659074, 0.134220)+ Sin( 54, f4, -0.990954, 0.021451),
                        Sin( 54, f1, -1.098654,  0.082448) + Sin( 54, f2, 0.021956, 0.089300)+ Sin( 54, f3, -1.161334, 0.073211)+ Sin( 54, f4, -1.147664, 0.027786),
                        Sin( 54, f1, 4.190216,  0.068363) + Sin( 54, f2, -0.038244, 0.045594)+ Sin( 54, f3, 4.462806, 0.045121)+ Sin( 54, f4, 3.454316, 0.028257),
                        Sin( 54, f1, 3.627016,  0.098093) + Sin( 54, f2, -1.323734, 0.009838)+ Sin( 54, f3, 4.121816, 0.027375)+ Sin( 54, f4, 2.901236, 0.063627),
                        Sin( 54, f1, 3.579716,  0.104870) + Sin( 54, f2, 3.542826, 0.022360)+ Sin( 54, f3, 2.570070, 0.013031)+ Sin( 54, f4, 2.716936, 0.074802),
                        zero,
                        zero,
                        ]                 
            swap_i = [  zero,
                        Sin(420,f1,-0.53494,0.15954) + Sin(420,f2,0.38615,0.10761)+Sin(420,f3,1.0033,0.043013) + Sin(420,f4,-0.67462,0.069556), 
                        Sin(420,f1,2.0013,0.097903) + Sin(420,f2,-2.9864,0.07972)+Sin(420,f3,-2.9834,0.078491) + Sin(420,f4,-2.6393,0.043704), 
                        Sin(420,f1,-2.4301,0.043816) + Sin(420,f2,-1.931,0.03786)+Sin(420,f3,-0.78862,0.051643) + Sin(420,f4,-0.23812,0.052036), 
                        Sin(420,f1,0.24158,0.020767) + Sin(420,f2,-2.1571,0.024746)+Sin(420,f3,-0.59193,0.06758) + Sin(420,f4,1.618,0.05161), 
                        Sin(420,f1,2.8262,0.0086513) + Sin(420,f2,-2.1598,0.0079453)+Sin(420,f3,-3.0769,0.050807) + Sin(420,f4,0.083232,0.012832), 
                        Sin(420,f1,0.3092,0.0027839) + Sin(420,f2,-0.39325,0.0050889)+Sin(420,f3,2.2746,0.020063) + Sin(420,f4,1.0644,0.1058), 
                        Sin(420,f1,-0.21582,0.026592) + Sin(420,f2,-2.193,0.042722)+Sin(420,f3,-0.72295,0.072278) + Sin(420,f4,-0.85719,0.027478), 
                        Sin(420,f1,2.5331,0.01682) + Sin(420,f2,-2.3882,0.040887)+Sin(420,f3,-2.2068,0.044108) + Sin(420,f4,2.2488,0.028254), 
                        Sin(420,f1,-2.5941,0.014063) + Sin(420,f2,0.83468,0.063713)+Sin(420,f3,0.07326,0.033742) + Sin(420,f4,-1.2628,0.004574), 
                        Sin(420,f1,2.0167,0.12658) + Sin(420,f2,-2.3552,0.25846)+Sin(420,f3,-2.4867,0.13574) + Sin(420,f4,2.1183,0.062707), 
                        Sin(420,f1,-1.6525,0.016428) + Sin(420,f2,0.74247,0.064913)+Sin(420,f3,1.016,0.081493) + Sin(420,f4,-0.87964,0.11241), 
                        Sin(420,f1,1.5658,0.02141) + Sin(420,f2,-2.1307,0.037332)+Sin(420,f3,-2.5311,0.01949) + Sin(420,f4,2.5785,0.023419), 
                        Sin(420,f1,0.93419,0.023278) + Sin(420,f2,-2.2102,0.040809)+Sin(420,f3,0.46746,0.030833) + Sin(420,f4,2.4272,0.011711), 
                        Sin(420,f1,1.0418,0.00070453) + Sin(420,f2,-1.5943,0.010393)+Sin(420,f3,-0.46861,0.023469) + Sin(420,f4,-2.4616,0.035398), 
                        Sin(420,f1,2.3684,0.014736) + Sin(420,f2,-0.9877,0.010025)+Sin(420,f3,-2.7092,0.018221) + Sin(420,f4,-1.3699,0.017957), 
                        Sin(420,f1,-2.3768,0.049756) + Sin(420,f2,-0.73586,0.031351)+Sin(420,f3,2.0083,0.0043402) + Sin(420,f4,1.2083,0.037954), 
                        Sin(420,f1,-1.068,0.10614) + Sin(420,f2,-0.52947,0.10222)+Sin(420,f3,-0.74694,0.088285) + Sin(420,f4,-2.7303,0.070988), 
                        Sin(420,f1,-0.045682,0.12944) + Sin(420,f2,-0.68885,0.12425)+Sin(420,f3,-1.9651,0.060603) + Sin(420,f4,0.24133,0.082755), 
                        Sin(420,f1,2.1772,0.1066) + Sin(420,f2,1.7813,0.086679)+Sin(420,f3,2.2486,0.066909) + Sin(420,f4,-2.3557,0.096271), 
                        Sin(420,f1,0.17196,0.10271) + Sin(420,f2,-1.5264,0.13149)+Sin(420,f3,-1.6646,0.062581) + Sin(420,f4,1.27,0.079276), 
                        zero,
                        zero,
                        ]  
            swap_q = [  zero,
                        Sin(420,f1,1.0359,0.15954) + Sin(420,f2,1.9569,0.10761)+Sin(420,f3,2.5741,0.043013) + Sin(420,f4,0.89618,0.069556), 
                        Sin(420,f1,3.5721,0.097903) + Sin(420,f2,-1.4156,0.07972)+Sin(420,f3,-1.4126,0.078491) + Sin(420,f4,-1.0685,0.043704), 
                        Sin(420,f1,-0.85932,0.043816) + Sin(420,f2,-0.36018,0.03786)+Sin(420,f3,0.78218,0.051643) + Sin(420,f4,1.3327,0.052036), 
                        Sin(420,f1,1.8124,0.020767) + Sin(420,f2,-0.58633,0.024746)+Sin(420,f3,0.97886,0.06758) + Sin(420,f4,3.1888,0.05161), 
                        Sin(420,f1,4.397,0.0086513) + Sin(420,f2,-0.58899,0.0079453)+Sin(420,f3,-1.5061,0.050807) + Sin(420,f4,1.654,0.012832), 
                        Sin(420,f1,1.88,0.0027839) + Sin(420,f2,1.1775,0.0050889)+Sin(420,f3,3.8454,0.020063) + Sin(420,f4,2.6352,0.1058), 
                        Sin(420,f1,1.355,0.026592) + Sin(420,f2,-0.62222,0.042722)+Sin(420,f3,0.84785,0.072278) + Sin(420,f4,0.71361,0.027478), 
                        Sin(420,f1,4.1039,0.01682) + Sin(420,f2,-0.81736,0.040887)+Sin(420,f3,-0.636,0.044108) + Sin(420,f4,3.8196,0.028254), 
                        Sin(420,f1,-1.0233,0.014063) + Sin(420,f2,2.4055,0.063713)+Sin(420,f3,1.6441,0.033742) + Sin(420,f4,0.30798,0.004574), 
                        Sin(420,f1,3.5875,0.12658) + Sin(420,f2,-0.78442,0.25846)+Sin(420,f3,-0.9159,0.13574) + Sin(420,f4,3.6891,0.062707), 
                        Sin(420,f1,-0.081715,0.016428) + Sin(420,f2,2.3133,0.064913)+Sin(420,f3,2.5868,0.081493) + Sin(420,f4,0.69116,0.11241), 
                        Sin(420,f1,3.1366,0.02141) + Sin(420,f2,-0.55991,0.037332)+Sin(420,f3,-0.96028,0.01949) + Sin(420,f4,4.1493,0.023419), 
                        Sin(420,f1,2.505,0.023278) + Sin(420,f2,-0.63942,0.040809)+Sin(420,f3,2.0383,0.030833) + Sin(420,f4,3.998,0.011711), 
                        Sin(420,f1,2.6126,0.00070453) + Sin(420,f2,-0.023511,0.010393)+Sin(420,f3,1.1022,0.023469) + Sin(420,f4,-0.89083,0.035398), 
                        Sin(420,f1,3.9392,0.014736) + Sin(420,f2,0.5831,0.010025)+Sin(420,f3,-1.1384,0.018221) + Sin(420,f4,0.20086,0.017957), 
                        Sin(420,f1,-0.80598,0.049756) + Sin(420,f2,0.83494,0.031351)+Sin(420,f3,3.5791,0.0043402) + Sin(420,f4,2.7791,0.037954), 
                        Sin(420,f1,0.50277,0.10614) + Sin(420,f2,1.0413,0.10222)+Sin(420,f3,0.82385,0.088285) + Sin(420,f4,-1.1595,0.070988), 
                        Sin(420,f1,1.5251,0.12944) + Sin(420,f2,0.88195,0.12425)+Sin(420,f3,-0.39427,0.060603) + Sin(420,f4,1.8121,0.082755), 
                        Sin(420,f1,3.748,0.1066) + Sin(420,f2,3.3521,0.086679)+Sin(420,f3,3.8194,0.066909) + Sin(420,f4,-0.78494,0.096271), 
                        Sin(420,f1,1.7428,0.10271) + Sin(420,f2,0.044438,0.13149)+Sin(420,f3,-0.093847,0.062581) + Sin(420,f4,2.8408,0.079276), 
                        zero,
                        zero,
                        ]  
                        
            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1

            
            

            
            sup_x=Waveform('SUP1_X.WFM', dqpi2_i+[Idle(self.evolution*1.2)]+dqpi_i+[Idle(self.evolution*1.2)]+dqdqpi2_i+swap_i+[Idle(100*1.2)]+swap_i)
            sup_y=Waveform('SUP1_Y.WFM', dqpi2_q+[Idle(self.evolution*1.2)]+dqpi_q+[Idle(self.evolution*1.2)]+dqdqpi2_q+swap_q+[Idle(100*1.2)]+swap_q)
            waves.append(sup_x)
            waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+dqdqpi2_i[::-1], t_0)
                ref_y = Waveform(name_y, [mod]+dqdqpi2_q[::-1], t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = self.evolution*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+dqpi_i[::-1], t_0)
                map_y = Waveform(name_y, [mod]+dqpi_q[::-1], t_0)
                waves.append(map_x)
                waves.append(map_y)
                
                t_3 = self.evolution*1.2 - map_x.stub
                repeat_3 = int(t_3 / 256)
                mod.duration = int(t_3 % 256)
                
                t_0 += map_x.duration + repeat_3 * 256
                
                name_x = 'REA_X%04i.WFM' % i
                name_y = 'REA_Y%04i.WFM' % i
                
                rea_x = Waveform(name_x, [mod]+dqpi2_i[::-1], t_0)
                rea_y = Waveform(name_y, [mod]+dqpi2_q[::-1], t_0)
                waves.append(rea_x)
                waves.append(rea_y)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                sub_seq.append(evo, evo,repeat=repeat_3)
                sub_seq.append(rea_x, rea_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
        
class EntEvo( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
   
    freq_2 = Range(low=1, high=20e9, value=2958197517.650143, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2850918343.369220 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2897817449.683641  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)

    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + 2800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_3', 'freq_4', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         ),
                                 HGroup( Item('power',width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Ent Evo', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling  
                
            dqpi2_i = [ zero,
                        Sin( 216, f1, 2.844520,  0.053500) + Sin( 216, f2, 3.130030, 0.037125)+ Sin( 216, f3, 1.158960, 0.010509)+ Sin( 216, f4, -0.984581, 0.068722),
                        Sin( 74, f1, -0.164921,  0.120380) + Sin( 74, f2, -0.064155, 0.113481)+ Sin( 74, f3, -1.872390, 0.083114)+ Sin( 74, f4, 2.062290, 0.084087),
                        Sin( 191, f1, 0.048967,  0.114275) + Sin( 191, f2, 0.105047, 0.113822)+ Sin( 191, f3, -2.088950, 0.093966)+ Sin( 191, f4, 1.882090, 0.121969),
                        Sin( 123, f1, -0.060021,  0.098849) + Sin( 123, f2, -2.866290, 0.083544)+ Sin( 123, f3, 0.971568, 0.098728)+ Sin( 123, f4, 1.854340, 0.119741),
                        Sin( 168, f1, 2.965630,  0.097608) + Sin( 168, f2, 0.177204, 0.103294)+ Sin( 168, f3, -2.053530, 0.091465)+ Sin( 168, f4, -1.113260, 0.082936),
                        zero,
                   ]
            
            dqpi2_q = [ zero,
                        Sin( 216, f1, 4.415316,  0.053500) + Sin( 216, f2, 4.700826, 0.037125)+ Sin( 216, f3, 2.729756, 0.010509)+ Sin( 216, f4, 0.586215, 0.068722),
                        Sin( 74, f1, 1.405875,  0.120380) + Sin( 74, f2, 1.506641, 0.113481)+ Sin( 74, f3, -0.301594, 0.083114)+ Sin( 74, f4, 3.633086, 0.084087),
                        Sin( 191, f1, 1.619763,  0.114275) + Sin( 191, f2, 1.675843, 0.113822)+ Sin( 191, f3, -0.518154, 0.093966)+ Sin( 191, f4, 3.452886, 0.121969),
                        Sin( 123, f1, 1.510776,  0.098849) + Sin( 123, f2, -1.295494, 0.083544)+ Sin( 123, f3, 2.542364, 0.098728)+ Sin( 123, f4, 3.425136, 0.119741),
                        Sin( 168, f1, 4.536426,  0.097608) + Sin( 168, f2, 1.748000, 0.103294)+ Sin( 168, f3, -0.482734, 0.091465)+ Sin( 168, f4, 0.457536, 0.082936),
                        zero,
                   ]
                   
            dqpi_i = [  zero,
                        Sin( 212, f1, 1.303500,  0.092981) + Sin( 212, f2, 0.918527, 0.138173)+ Sin( 212, f3, 2.388400, 0.085292)+ Sin( 212, f4, 0.063040, 0.116177),
                        Sin( 211, f1, 1.276750,  0.032189) + Sin( 211, f2, -1.419750, 0.074418)+ Sin( 211, f3, -0.757934, 0.045871)+ Sin( 211, f4, 0.180373, 0.019520),
                        Sin( 399, f1, -2.266610,  0.067917) + Sin( 399, f2, -0.785398, 0.154048)+ Sin( 399, f3, -0.785398, 0.114656)+ Sin( 399, f4, -3.083730, 0.042866),
                        Sin( 211, f1, 1.276480,  0.032197) + Sin( 211, f2, -1.420090, 0.074427)+ Sin( 211, f3, -0.758204, 0.045866)+ Sin( 211, f4, 0.179553, 0.019550),
                        Sin( 212, f1, 1.303470,  0.093014) + Sin( 212, f2, 0.918480, 0.138179)+ Sin( 212, f3, 2.388270, 0.085230)+ Sin( 212, f4, 0.063106, 0.116178),
                        zero,
                   ]
            
            dqpi_q = [  zero,
                        Sin( 212, f1, 2.874296,  0.092981) + Sin( 212, f2, 2.489323, 0.138173)+ Sin( 212, f3, 3.959196, 0.085292)+ Sin( 212, f4, 1.633836, 0.116177),
                        Sin( 211, f1, 2.847546,  0.032189) + Sin( 211, f2, 0.151046, 0.074418)+ Sin( 211, f3, 0.812862, 0.045871)+ Sin( 211, f4, 1.751169, 0.019520),
                        Sin( 399, f1, -0.695814,  0.067917) + Sin( 399, f2, 0.785398, 0.154048)+ Sin( 399, f3, 0.785398, 0.114656)+ Sin( 399, f4, -1.512934, 0.042866),
                        Sin( 211, f1, 2.847276,  0.032197) + Sin( 211, f2, 0.150706, 0.074427)+ Sin( 211, f3, 0.812592, 0.045866)+ Sin( 211, f4, 1.750349, 0.019550),
                        Sin( 212, f1, 2.874266,  0.093014) + Sin( 212, f2, 2.489276, 0.138179)+ Sin( 212, f3, 3.959066, 0.085230)+ Sin( 212, f4, 1.633902, 0.116178),
                        zero,
                   ]
            
            
            dqdqpi2_i = [ zero,
                        Sin( 169, f1, 3.115660,  0.108026) + Sin( 169, f2, 0.024475, 0.088559)+ Sin( 169, f3, -2.037980, 0.085584)+ Sin( 169, f4, -1.079800, 0.088083),
                        Sin( 118, f1, -0.026623,  0.080629) + Sin( 118, f2, -3.120290, 0.070326)+ Sin( 118, f3, 1.124230, 0.090591)+ Sin( 118, f4, 2.049170, 0.102326),
                        Sin( 258, f1, -0.036832,  0.118919) + Sin( 258, f2, 0.034620, 0.110238)+ Sin( 258, f3, -1.976970, 0.088983)+ Sin( 258, f4, 1.986350, 0.120829),
                        Sin( 231, f1, 3.108400,  0.027661) + Sin( 231, f2, -3.109150, 0.037287)+ Sin( 231, f3, 1.207120, 0.014334)+ Sin( 231, f4, -1.160740, 0.053643),
                        zero,
                   ]
            
            dqdqpi2_q = [ zero,
                        Sin( 169, f1, 4.686456,  0.108026) + Sin( 169, f2, 1.595271, 0.088559)+ Sin( 169, f3, -0.467184, 0.085584)+ Sin( 169, f4, 0.490996, 0.088083),
                        Sin( 118, f1, 1.544173,  0.080629) + Sin( 118, f2, -1.549494, 0.070326)+ Sin( 118, f3, 2.695026, 0.090591)+ Sin( 118, f4, 3.619966, 0.102326),
                        Sin( 258, f1, 1.533964,  0.118919) + Sin( 258, f2, 1.605416, 0.110238)+ Sin( 258, f3, -0.406174, 0.088983)+ Sin( 258, f4, 3.557146, 0.120829),
                        Sin( 231, f1, 4.679196,  0.027661) + Sin( 231, f2, -1.538354, 0.037287)+ Sin( 231, f3, 2.777916, 0.014334)+ Sin( 231, f4, 0.410056, 0.053643),
                        zero,
                   ]                
            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1

            
            

            
            sup_x=Waveform('SUP1_X.WFM', dqpi2_i)
            sup_y=Waveform('SUP1_Y.WFM', dqpi2_q)
            waves.append(sup_x)
            waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+dqpi_i, t_0)
                ref_y = Waveform(name_y, [mod]+dqpi_q, t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+dqdqpi2_i, t_0)
                map_y = Waveform(name_y, [mod]+dqdqpi2_q , t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
          

        

class EfieldHahn( Pulsed ):
    """ E-Field Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=1197.47, desc='length of pi/2 pulse [ns]', label='pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi32_1 = Range(low=1., high=100000., value=3372.91, desc='length of 3pi/2 pulse [ns]', label='3pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=2285.19, desc='length of pi pulse [ns]', label='pi [ns]', mode='text', auto_set=False, enter_set=True)
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    start_e = Range(low=0., high=15., value=0., desc='start voltage [V]', label='start voltage [V]', mode='text', auto_set=False, enter_set=True)
    end_e = Range(low=0., high=15., value=15., desc='end voltage [V]', label='end voltage [V]', mode='text', auto_set=False, enter_set=True)
    e_step = Range(low=0., high=15., value=1., desc='voltage step [V]', label='voltage step [V]', mode='text', auto_set=False, enter_set=True)
    
    efield_phi = Range(low=0., high=360, value=0., desc='E-Field Angle [deg]', label='E-Field angle [deg]', mode='text', auto_set=False, enter_set=True)
    
    efield = Property(trait=Array, depends_on='start_e,end_e,e_step')
    
    evolution_time = Range(low=1., high=2e7, value=27000., desc='evolution time tau [ns]', label='tau [ns]', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='laser,wait,evolution_time,pi2_1,pi_1,efield')
    sequence_length = Property(trait=Int, depends_on='sequence')
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    
    
    @cached_property
    def _get_sequence(self):
        evolution_time = self.evolution_time
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        pi_1=self.pi_1
        pi32_1=self.pi32_1
        efield=self.efield
        #pi_2=self.pi_2
        sequence = []
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * self.evolution_time + pi_1 + 2 * pi2_1 + 4000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        """
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * evolution_time + pi_1 + 2 * pi32_1 + 4000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        """
        return sequence
    
    @cached_property
    def _get_efield(self):
        return np.arange(self.start_e, self.end_e, self.e_step)

    
    @cached_property
    def _get_sequence_length(self):
        return len(self.efield)

    def _line_plot_data_default(self):
        x = self.efield
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens#[:n/2]
            #yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            #yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y)#, yp=yp)
    
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        #plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot
            
    def _efield_changed(self):
        self.line_plot_data.set_data('x', self.efield)
     
        
    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens)#[:n/2])
        #self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        
    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def _matrix_plot_default(self):
        plot = Plot(self.matrix_plot_data, width=500, height=500, resizable='hv', padding_left=60)
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'line #'
        return plot
    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi',
                         'evolution_time',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi32_1', 'pi_1',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'efield', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         #Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi32_1', width=25),
                                         Item('evolution_time', width=30),),
                                         #Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_e', width=30),
                                         Item('end_e', width=30),
                                         Item('e_step', width=30),
                                         Item('efield_phi', width=30),
                                         #Item('evolution_time', width=30),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='EField Hahn', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi'
                    'evolution_time'
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi32_1'
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.tell('AWGC:DOUT3 0')
            AWG.tell('AWGC:DOUT4 0')
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            
           
            # Pulses
            p = {}
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi, self.amp)
            
            p['3pi/2 + 0']   = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['3pi/2 + 90']  = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['3pi/2 + 180'] = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi,self.amp)
            
            zero = Idle(1)
            
            waves = []

            t_evo=self.evolution_time*sampling/1.0e9
            
            evo=Idle(t_evo)
            
            e_freq = 1./(2*t_evo)
            e_phi = self.efield_phi*np.pi/180
            
            ex_amp=1.
            ey_amp=1.
            
            pi2_phi=pi2_1/t_evo*np.pi
            pi_phi=pi_1/t_evo*np.pi
            
            wait_pi2=Idle(p['pi/2 + 0'].duration)
            wait_pi=Idle(p['pi + 0'].duration)
            wait_3pi2=Idle(p['3pi/2 + 0'].duration)
            
            seq1_i = Waveform('SEQ1_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['pi/2 + 90'], zero])
            seq1_q = Waveform('SEQ1_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['pi/2 + 180'], zero])
            seq2_i = Waveform('SEQ2_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['3pi/2 + 90'], zero])
            seq2_q = Waveform('SEQ2_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['3pi/2 + 180'], zero])
            
            ex_1 = Sin(t_evo, e_freq, -pi2_phi, ex_amp)
            ex_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ex_amp)
            
            ey_1 = Sin(t_evo, e_freq, -pi2_phi, ey_amp)
            ey_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ey_amp)
            
            main_seq = Sequence('0_EFH.SEQ')
            
            print len(self.efield)
            
            
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/36.
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                ex_1.amp=ex_amp
                ex_2.amp=ex_amp
                ey_1.amp=ey_amp
                ey_2.amp=ey_amp
                name_ex = 'SEQ1_EX%04i.WFM' % i
                name_ey = 'SEQ1_EY%04i.WFM' % i
                
                seq1_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_pi2, zero])
                seq1_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_pi2, zero])
              
                waves.extend([seq1_i, seq1_q, seq1_ex, seq1_ey])
                main_seq.append(seq1_i, seq1_q, seq1_ex, seq1_ey,wait=True)
            """
            print "second"
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                
                name_ex = 'SEQ2_EX%04i.WFM' % i
                name_ey = 'SEQ2_EY%04i.WFM' % i
                
                seq2_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_3pi2, zero])
                seq2_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_3pi2, zero])
                
                waves.extend([seq2_i, seq2_q, seq2_ex, seq2_ey])
                main_seq.append(seq2_i, seq2_q, seq2_ex, seq2_ey,wait=True)
            """                
            for w in waves:
                w.join()
            
            print "joined"
            AWG.upload(waves, mode=1)
            print "loaded waves"
            AWG.upload(main_seq)
            print "loaded main_seq"

            AWG.tell('*WAI')
            print "told wai"
            AWG.load('0_EFH.SEQ')
            print "loaded seq"

        AWG.set_vpp(4.5)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b1111 )

class EfieldDC( Pulsed ):
    """ E-Field Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    #pi2_1 = Range(low=1., high=100000., value=1197.47, desc='length of pi/2 pulse [ns]', label='pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    #pi32_1 = Range(low=1., high=100000., value=3372.91, desc='length of 3pi/2 pulse [ns]', label='3pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    #pi_1   = Range(low=1., high=100000., value=2285.19, desc='length of pi pulse [ns]', label='pi [ns]', mode='text', auto_set=False, enter_set=True)
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    ef_x = Range(low=0., high=15., value=0., desc='start voltage [V]', label='start voltage [V]', mode='text', auto_set=False, enter_set=True)
    ef_y = Range(low=0., high=15., value=15., desc='end voltage [V]', label='end voltage [V]', mode='text', auto_set=False, enter_set=True)
    # = Range(low=0., high=15., value=1., desc='voltage step [V]', label='voltage step [V]', mode='text', auto_set=False, enter_set=True)
    
    #efield_phi = Range(low=0., high=360, value=0., desc='E-Field Angle [deg]', label='E-Field angle [deg]', mode='text', auto_set=False, enter_set=True)
    
    #efield = Property(trait=Array, depends_on='start_e,end_e,e_step')
    
    #evolution_time = Range(low=1., high=2e7, value=27000., desc='evolution time tau [ns]', label='tau [ns]', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='wait')
    sequence_length = Property(trait=Int, depends_on='sequence')
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    
    
    @cached_property
    def _get_sequence(self):
        #evolution_time = self.evolution_time
        #laser = self.laser
        wait = self.wait
        #pi2_1=self.pi2_1
        #pi_1=self.pi_1
        #pi32_1=self.pi32_1
        #efield=self.efield
        #pi_2=self.pi_2
        sequence = []
        #for ef in efield:
        sub = [ #(['awgTrigger'], 100 ),
                    #([], 2 * self.evolution_time + pi_1 + 2 * pi2_1 + 4000 ),
                    #(['laser', 'trigger' ], laser ),
                 ([], wait )
                  ]
        sequence.extend(sub)
        """
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * evolution_time + pi_1 + 2 * pi32_1 + 4000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        """
        return sequence
    
    #@cached_property
    #def _get_efield(self):
    #    return np.arange(self.start_e, self.end_e, self.e_step)

    
    @cached_property
    def _get_sequence_length(self):
        return 1#len(self.efield)

    def _line_plot_data_default(self):
        x = np.arange(0, 1, 1)#self.efield
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens#[:n/2]
            #yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            #yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y)#, yp=yp)
    
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        #plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot
            
    def _efield_changed(self):
        self.line_plot_data.set_data('x', self.efield)
     
        
    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens)#[:n/2])
        #self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        
    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def _matrix_plot_default(self):
        plot = Plot(self.matrix_plot_data, width=500, height=500, resizable='hv', padding_left=60)
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'line #'
        return plot
    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi',
                         'evolution_time',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi32_1', 'pi_1',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'efield', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         #Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi32_1', width=25),
                                         Item('evolution_time', width=30),),
                                         #Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_e', width=30),
                                         Item('end_e', width=30),
                                         Item('e_step', width=30),
                                         Item('efield_phi', width=30),
                                         #Item('evolution_time', width=30),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='EField Hahn', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi'
                    'evolution_time'
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi32_1'
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.tell('AWGC:DOUT3 0')
            AWG.tell('AWGC:DOUT4 0')
            
            #pi_1 = int(self.pi_1 * sampling/1.0e9)
            #pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            #pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            
            p1=DC(100000, ef_x)
            p2=DC(100000, ef_y)
            
            # Pulses
            #p = {}
            #p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            #p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            #p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            #p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            #p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi, self.amp)
            
            #p['3pi/2 + 0']   = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            #p['3pi/2 + 90']  = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            #p['3pi/2 + 180'] = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi,self.amp)
            
            zero = Idle(1)
            
            waves = []

            #t_evo=self.evolution_time*sampling/1.0e9
            
            evo=Idle(100000)
            
            #e_freq = 1./(2*t_evo)
            #e_phi = self.efield_phi*np.pi/180
            
            #ex_amp=1.
            #ey_amp=1.
            
            #pi2_phi=pi2_1/t_evo*np.pi
            #pi_phi=pi_1/t_evo*np.pi
            
            #wait_pi2=Idle(p['pi/2 + 0'].duration)
            #wait_pi=Idle(p['pi + 0'].duration)
            #wait_3pi2=Idle(p['3pi/2 + 0'].duration)
            
            seq1_i = Waveform('SEQ1_I.WFM', [evo])
            seq1_q = Waveform('SEQ1_Q.WFM', [evo])
            
            seq3 = Waveform('SEQ3.WFM', [p1])
            seq4 = waveform('SEQ4.WFM', [p2])
            #seq2_i = Waveform('SEQ2_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['3pi/2 + 90'], zero])
            #seq2_q = Waveform('SEQ2_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['3pi/2 + 180'], zero])
            
            #ex_1 = Sin(t_evo, e_freq, -pi2_phi, ex_amp)
            #ex_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ex_amp)
            
            #ey_1 = Sin(t_evo, e_freq, -pi2_phi, ey_amp)
            #ey_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ey_amp)
            
            main_seq = Sequence('0_EFH.SEQ')
            
            #print len(self.efield)
            
            """
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/36.
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                ex_1.amp=ex_amp
                ex_2.amp=ex_amp
                ey_1.amp=ey_amp
                ey_2.amp=ey_amp
                name_ex = 'SEQ1_EX%04i.WFM' % i
                name_ey = 'SEQ1_EY%04i.WFM' % i
                
                seq1_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_pi2, zero])
                seq1_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_pi2, zero])
              
                waves.extend([seq1_i, seq1_q, seq1_ex, seq1_ey])
                main_seq.append(seq1_i, seq1_q, seq1_ex, seq1_ey,wait=True)
            
            print "second"
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                
                name_ex = 'SEQ2_EX%04i.WFM' % i
                name_ey = 'SEQ2_EY%04i.WFM' % i
                
                seq2_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_3pi2, zero])
                seq2_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_3pi2, zero])
                
                waves.extend([seq2_i, seq2_q, seq2_ex, seq2_ey])
                main_seq.append(seq2_i, seq2_q, seq2_ex, seq2_ey,wait=True)
            """                
            main_seq.append(seq1_i, seq1_q, seq3, seq4)
            waves.extend([seq1_i, seq1_q, seq3, seq4])
            for w in waves:
                w.join()
            
            print "joined"
            AWG.upload(waves, mode=1)
            print "loaded waves"
            AWG.upload(main_seq)
            print "loaded main_seq"

            AWG.tell('*WAI')
            print "told wai"
            AWG.load('0_EFH.SEQ')
            print "loaded seq"

        AWG.set_vpp(4.5)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b1111 )
        
class Efield3pi2( Pulsed ):
    """ E-Field Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=1197.47, desc='length of pi/2 pulse [ns]', label='pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi32_1 = Range(low=1., high=100000., value=3372.91, desc='length of 3pi/2 pulse [ns]', label='3pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=2285.19, desc='length of pi pulse [ns]', label='pi [ns]', mode='text', auto_set=False, enter_set=True)
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    start_e = Range(low=0., high=15., value=0., desc='start voltage [V]', label='start voltage [V]', mode='text', auto_set=False, enter_set=True)
    end_e = Range(low=0., high=15., value=15., desc='end voltage [V]', label='end voltage [V]', mode='text', auto_set=False, enter_set=True)
    e_step = Range(low=0., high=15., value=1., desc='voltage step [V]', label='voltage step [V]', mode='text', auto_set=False, enter_set=True)
    
    efield_phi = Range(low=0., high=360, value=0., desc='E-Field Angle [deg]', label='E-Field angle [deg]', mode='text', auto_set=False, enter_set=True)
    
    efield = Property(trait=Array, depends_on='start_e,end_e,e_step')
    
    evolution_time = Range(low=1., high=2e7, value=20000., desc='evolution time tau [ns]', label='tau [ns]', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='laser,wait,evolution_time,pi2_1,pi_1,efield')
    sequence_length = Property(trait=Int, depends_on='sequence')
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    
    
    @cached_property
    def _get_sequence(self):
        evolution_time = self.evolution_time
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        pi_1=self.pi_1
        pi32_1=self.pi32_1
        efield=self.efield
        #pi_2=self.pi_2
        sequence = []
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * self.evolution_time + pi_1 + 2 * pi2_1 + 4000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * evolution_time + pi_1 + 2 * pi32_1 + 4000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_efield(self):
        return np.arange(self.start_e, self.end_e, self.e_step)

    
    @cached_property
    def _get_sequence_length(self):
        return 2*len(self.efield)

    def _line_plot_data_default(self):
        x = self.efield
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens[:n/2]
            yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y, yp=yp)
    
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot
            
    def _efield_changed(self):
        self.line_plot_data.set_data('x', self.efield)
     
        
    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens[:n/2])
        self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        
    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def _matrix_plot_default(self):
        plot = Plot(self.matrix_plot_data, width=500, height=500, resizable='hv', padding_left=60)
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'line #'
        return plot
    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi',
                         'evolution_time',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi32_1', 'pi_1',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'efield', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         #Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi32_1', width=25),
                                         Item('evolution_time', width=30),),
                                         #Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_e', width=30),
                                         Item('end_e', width=30),
                                         Item('e_step', width=30),
                                         Item('efield_phi', width=30),
                                         #Item('evolution_time', width=30),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='EField Hahn', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi'
                    'evolution_time'
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi32_1'
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.tell('AWGC:DOUT3 0')
            AWG.tell('AWGC:DOUT4 0')
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            
           
            # Pulses
            p = {}
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi, self.amp)
            
            p['3pi/2 + 0']   = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['3pi/2 + 90']  = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['3pi/2 + 180'] = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi,self.amp)
            
            zero = Idle(1)
            
            waves = []

            t_evo=self.evolution_time*sampling/1.0e9
            
            evo=Idle(t_evo)
            
            e_freq = 1./(2*t_evo)
            e_phi = self.efield_phi*np.pi/180
            
            ex_amp=1.
            ey_amp=1.
            
            pi2_phi=pi2_1/t_evo*np.pi
            pi_phi=pi_1/t_evo*np.pi
            
            wait_pi2=Idle(p['pi/2 + 0'].duration)
            wait_pi=Idle(p['pi + 0'].duration)
            wait_3pi2=Idle(p['3pi/2 + 0'].duration)
            
            seq1_i = Waveform('SEQ1_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['pi/2 + 90'], zero])
            seq1_q = Waveform('SEQ1_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['pi/2 + 180'], zero])
            seq2_i = Waveform('SEQ2_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['3pi/2 + 90'], zero])
            seq2_q = Waveform('SEQ2_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['3pi/2 + 180'], zero])
            
            ex_1 = Sin(t_evo, e_freq, -pi2_phi, ex_amp)
            ex_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ex_amp)
            
            ey_1 = Sin(t_evo, e_freq, -pi2_phi, ey_amp)
            ey_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ey_amp)
            
            main_seq = Sequence('0_EFH.SEQ')
            
            print len(self.efield)
            
            
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                ex_1.amp=ex_amp
                ex_2.amp=ex_amp
                ey_1.amp=ey_amp
                ey_2.amp=ey_amp
                name_ex = 'SEQ1_EX%04i.WFM' % i
                name_ey = 'SEQ1_EY%04i.WFM' % i
                
                seq1_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_pi2, zero])
                seq1_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_pi2, zero])
              
                waves.extend([seq1_i, seq1_q, seq1_ex, seq1_ey])
                main_seq.append(seq1_i, seq1_q, seq1_ex, seq1_ey,wait=True)
            
            print "second"
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                
                name_ex = 'SEQ2_EX%04i.WFM' % i
                name_ey = 'SEQ2_EY%04i.WFM' % i
                
                seq2_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_3pi2, zero])
                seq2_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_3pi2, zero])
                
                waves.extend([seq2_i, seq2_q, seq2_ex, seq2_ey])
                main_seq.append(seq2_i, seq2_q, seq2_ex, seq2_ey,wait=True)
                            
            for w in waves:
                w.join()
            
            print "joined"
            AWG.upload(waves, mode=1)
            print "loaded waves"
            AWG.upload(main_seq)
            print "loaded main_seq"

            AWG.tell('*WAI')
            print "told wai"
            AWG.load('0_EFH.SEQ')
            print "loaded seq"

        AWG.set_vpp(4.5)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b1111 )
        
class EfieldHahnX( Pulsed ):
    """ E-Field Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=2200, desc='length of pi/2 pulse [ns]', label='pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi32_1 = Range(low=1., high=100000., value=6750, desc='length of 3pi/2 pulse [ns]', label='3pi/2 [ns]', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=4500, desc='length of pi pulse [ns]', label='pi [ns]', mode='text', auto_set=False, enter_set=True)
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    start_e = Range(low=0., high=15., value=0., desc='start voltage [V]', label='start voltage [V]', mode='text', auto_set=False, enter_set=True)
    end_e = Range(low=0., high=15., value=15., desc='end voltage [V]', label='end voltage [V]', mode='text', auto_set=False, enter_set=True)
    e_step = Range(low=0., high=15., value=1., desc='voltage step [V]', label='voltage step [V]', mode='text', auto_set=False, enter_set=True)
    
    efield_phi = Range(low=0., high=360, value=0., desc='E-Field Angle [deg]', label='E-Field angle [deg]', mode='text', auto_set=False, enter_set=True)
    
    efield = Property(trait=Array, depends_on='start_e,end_e,e_step')
    
    evolution_time = Range(low=1., high=2e7, value=100000., desc='evolution time tau [ns]', label='tau [ns]', mode='text', auto_set=False, enter_set=True)
    
    sequence = Property(trait=List, depends_on='laser,wait,evolution_time,pi2_1,pi_1,efield')
    sequence_length = Property(trait=Int, depends_on='sequence')
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    
    
    @cached_property
    def _get_sequence(self):
        evolution_time = self.evolution_time
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        pi_1=self.pi_1
        pi32_1=self.pi32_1
        efield=self.efield
        #pi_2=self.pi_2
        sequence = []
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * self.evolution_time + pi_1 + 2 * pi2_1 + 5000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        for ef in efield:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * evolution_time + pi_1 + 2 * pi32_1 + 5000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_efield(self):
        return np.arange(self.start_e, self.end_e, self.e_step)

    
    @cached_property
    def _get_sequence_length(self):
        return 2*len(self.efield)

    def _line_plot_data_default(self):
        x = self.efield
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens[:n/2]
            yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y, yp=yp)
        
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot

    def _efield_changed(self):
        self.line_plot_data.set_data('x', self.efield)
        
    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens[:n/2])
        self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        
    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def _matrix_plot_default(self):
        plot = Plot(self.matrix_plot_data, width=500, height=500, resizable='hv', padding_left=60)
        plot.index_axis.title = 'Voltage [V]'
        plot.value_axis.title = 'line #'
        return plot
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi',
                         'evolution_time',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi32_1', 'pi_1',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'efield', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         #Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi32_1', width=25),
                                         Item('evolution_time', width=30),),
                                         #Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_e', width=30),
                                         Item('end_e', width=30),
                                         Item('e_step', width=30),
                                         Item('efield_phi', width=30),
                                         #Item('evolution_time', width=30),
                                         ),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='EField Hahn with X', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_center', 'power', 'start_e', 'end_e', 'e_step', 'efield_phi'
                    'evolution_time'
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi32_1'
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            AWG.tell('AWGC:DOUT3 0')
            AWG.tell('AWGC:DOUT4 0')
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)
            
           
            # Pulses
            p = {}
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['pi/2 + 180'] = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi, self.amp)
            
            p['3pi/2 + 0']   = Sin( pi32_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['3pi/2 + 90']  = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            p['3pi/2 + 180'] = Sin( pi32_1, (self.freq - self.freq_center)/sampling, np.pi,self.amp)
            
            zero = Idle(1)
            
            waves = []

            t_evo=self.evolution_time*sampling/1.0e9
            
            evo=Idle(t_evo)
            
            e_freq = 1./(2*t_evo)
            e_phi = self.efield_phi*np.pi/180
            
            ex_amp=1.
            ey_amp=1.
            
            pi2_phi=pi2_1/t_evo*np.pi
            pi_phi=pi_1/t_evo*np.pi
            
            wait_pi2=Idle(p['pi/2 + 0'].duration)
            wait_pi=Idle(p['pi + 0'].duration)
            wait_3pi2=Idle(p['3pi/2 + 0'].duration)
            
            seq1_i = Waveform('SEQ1_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['pi/2 + 0'], zero])
            seq1_q = Waveform('SEQ1_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['pi/2 + 90'], zero])
            seq2_i = Waveform('SEQ2_I.WFM', [zero, p['pi/2 + 0'], evo, p['pi + 0'], evo, p['3pi/2 + 0'], zero])
            seq2_q = Waveform('SEQ2_Q.WFM', [zero, p['pi/2 + 90'], evo, p['pi + 90'], evo, p['3pi/2 + 90'], zero])
            
            ex_1 = Sin(t_evo, e_freq, -pi2_phi, ex_amp)
            ex_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ex_amp)
            
            ey_1 = Sin(t_evo, e_freq, -pi2_phi, ey_amp)
            ey_2 = Sin(t_evo, e_freq, -pi2_phi-pi_phi, ey_amp)
            
            main_seq = Sequence('0_EFH.SEQ')
            
            print len(self.efield)
            
            
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                ex_1.amp=ex_amp
                ex_2.amp=ex_amp
                ey_1.amp=ey_amp
                ey_2.amp=ey_amp
                name_ex = 'SEQ1_EX%04i.WFM' % i
                name_ey = 'SEQ1_EY%04i.WFM' % i
                
                seq1_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_pi2, zero])
                seq1_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_pi2, zero])
              
                waves.extend([seq1_i, seq1_q, seq1_ex, seq1_ey])
                main_seq.append(seq1_i, seq1_q, seq1_ex, seq1_ey,wait=True)
            
            print "second"
            for i, ef in enumerate(self.efield):
                print i, ef
                awg_voltage = ef/8.
                
                ex_amp=awg_voltage*np.cos(e_phi)
                ey_amp=awg_voltage*np.sin(e_phi)
                
                name_ex = 'SEQ2_EX%04i.WFM' % i
                name_ey = 'SEQ2_EY%04i.WFM' % i
                
                seq2_ex = Waveform(name_ex, [zero, wait_pi2, ex_1, wait_pi, ex_2, wait_3pi2, zero])
                seq2_ey = Waveform(name_ey, [zero, wait_pi2, ey_1, wait_pi, ey_2, wait_3pi2, zero])
                
                waves.extend([seq2_i, seq2_q, seq2_ex, seq2_ey])
                main_seq.append(seq2_i, seq2_q, seq2_ex, seq2_ey,wait=True)
             
                
            for w in waves:
                w.join()
            
            print "joined"
            AWG.upload(waves, mode=1)
            print "loaded waves"
            AWG.upload(main_seq)
            print "loaded main_seq"

            AWG.tell('*WAI')
            print "told wai"
            AWG.load('0_EFH.SEQ')
            print "loaded seq"

        AWG.set_vpp(4.5)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b1111 )        
        

class Testpulse( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    freq_2 = Range(low=1, high=20e9, value=2958197517.650143, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2850918343.369220 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2897817449.683641  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)


    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], t +1800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence

        

    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2','freq_3', 'freq_4', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),                                      
                                         ),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Test pulse', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi_2',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            waves = []
            zero = Idle(1)
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling  
            for i, t in enumerate(self.tau):
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                if t>0:
                    ref_x = Waveform(name_x, [zero,
                                            Sin( t, f1, 0.000000,  0.100000) + Sin( t, f2, 0.000000, 0.000000)+ Sin( t, f3, 0.000000, 0.000000)+ Sin( t, f4, 1.570800, 0.150000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( t, f1, 1.570796,  0.100000) + Sin( t, f2, 1.570796, 0.000000)+ Sin( t, f3, 1.570796, 0.000000)+ Sin( t, f4, 3.141596, 0.150000),
                                            zero,
                                             ]) 
                if t>360:
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            zero,
                                             ])              
                if t>(360+120):
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( t-480, f1, 0.000000,  0.000000) + Sin( t-480, f2, 0.000000, 0.140000)+ Sin( t-480, f3, -2.000000, 0.120000)+ Sin( t-480, f4, 0.000000, 0.000000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( t-480, f1, 1.570796,  0.000000) + Sin( t-480, f2, 1.570796, 0.140000)+ Sin( t-480, f3, -0.429204, 0.120000)+ Sin( t-480, f4, 1.570796, 0.000000),
                                            zero,
                                             ])                 
                if t>360+120+360:
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, 0.000000,  0.000000) + Sin( 360, f2, 0.000000, 0.140000)+ Sin( 360, f3, -2.000000, 0.120000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, 1.570796,  0.000000) + Sin( 360, f2, 1.570796, 0.140000)+ Sin( 360, f3, -0.429204, 0.120000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            zero,
                                             ])                
                if t>(360+120+360+120):
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, 0.000000,  0.000000) + Sin( 360, f2, 0.000000, 0.140000)+ Sin( 360, f3, -2.000000, 0.120000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin(t-960, f1, -1.570800,  0.100000) + Sin( t-960, f2, -0.700000, 0.130000)+ Sin( t-960, f3, 0.000000, 0.090000)+ Sin( t-960, f4, 0.000000, 0.000000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, 1.570796,  0.000000) + Sin( 360, f2, 1.570796, 0.140000)+ Sin( 360, f3, -0.429204, 0.120000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( t-960, f1, -0.000004,  0.100000) + Sin( t-960, f2, 0.870796, 0.130000)+ Sin( t-960, f3, 1.570796, 0.090000)+ Sin( t-960, f4, 1.570796, 0.000000),
                                            zero,
                                             ])
                if t>(360+120+360+120+360):
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, 0.000000,  0.000000) + Sin( 360, f2, 0.000000, 0.140000)+ Sin( 360, f3, -2.000000, 0.120000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, -1.570800,  0.100000) + Sin( 360, f2, -0.700000, 0.130000)+ Sin( 360, f3, 0.000000, 0.090000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, 1.570796,  0.000000) + Sin( 360, f2, 1.570796, 0.140000)+ Sin( 360, f3, -0.429204, 0.120000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, -0.000004,  0.100000) + Sin( 360, f2, 0.870796, 0.130000)+ Sin( 360, f3, 1.570796, 0.090000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            zero,
                                             ])
                if t>(360+120+360+120+360+120):
                    ref_x = Waveform(name_x, [zero,
                                            Sin( 360, f1, 0.000000,  0.100000) + Sin( 360, f2, 0.000000, 0.000000)+ Sin( 360, f3, 0.000000, 0.000000)+ Sin( 360, f4, 1.570800, 0.150000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, 0.000000,  0.000000) + Sin( 360, f2, 0.000000, 0.140000)+ Sin( 360, f3, -2.000000, 0.120000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( 360, f1, -1.570800,  0.100000) + Sin( 360, f2, -0.700000, 0.130000)+ Sin( 360, f3, 0.000000, 0.090000)+ Sin( 360, f4, 0.000000, 0.000000),
                                            Sin( 120, f1, 0.000000,  0.000000) + Sin( 120, f2, 0.000000, 0.000000)+ Sin( 120, f3, 0.000000, 0.000000)+ Sin( 120, f4, 0.000000, 0.000000),
                                            Sin( t-1440, f1, 0.000000,  0.000000) + Sin(  t-1440, f2, -0.700000, 0.100000)+ Sin(  t-1440, f3, -0.600000, 0.140000)+ Sin(  t-1440, f4, 0.000000, 0.100000),
                                            zero,
                                             ])
                    ref_y = Waveform(name_y, [zero,
                                            Sin( 360, f1, 1.570796,  0.100000) + Sin( 360, f2, 1.570796, 0.000000)+ Sin( 360, f3, 1.570796, 0.000000)+ Sin( 360, f4, 3.141596, 0.150000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, 1.570796,  0.000000) + Sin( 360, f2, 1.570796, 0.140000)+ Sin( 360, f3, -0.429204, 0.120000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin( 360, f1, -0.000004,  0.100000) + Sin( 360, f2, 0.870796, 0.130000)+ Sin( 360, f3, 1.570796, 0.090000)+ Sin( 360, f4, 1.570796, 0.000000),
                                            Sin( 120, f1, 1.570796,  0.000000) + Sin( 120, f2, 1.570796, 0.000000)+ Sin( 120, f3, 1.570796, 0.000000)+ Sin( 120, f4, 1.570796, 0.000000),
                                            Sin(  t-1440, f1, 1.570796,  0.000000) + Sin(  t-1440, f2, 0.870796, 0.100000)+ Sin(  t-1440, f3, 0.970796, 0.140000)+ Sin(  t-1440, f4, 1.570796, 0.100000),
                                            zero,
                                             ])


                                               
                waves.append(ref_x)
                waves.append(ref_y)
                name = 'DQH_32_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(ref_x, ref_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
                
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )            

class Hahn3pi2( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    freq = Range(low=1, high=20e9, value=2783638886, desc='frequency 1nd trans [Hz]', label='freq 1.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2958879816, desc='frequency 2nd trans [Hz]', label='freq 2.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2818893482 , desc='frequency 3nd trans [Hz]', label='freq 3.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_4 = Range(low=1, high=20e9, value=2928608208  , desc='frequency 4nd trans [Hz]', label='freq 4.trans [Hz]', mode='text', auto_set=False, enter_set=True)
    
    
    pi2_1 = Range(low=1., high=100000., value=25, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi32_1 = Range(low=1., high=100000., value=75, desc='length of 3*pi/2 pulse [ns]', label='3*pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=49, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    
   
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + 2800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + 2800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
            
        return sequence
    
    @cached_property

    def _get_sequence_length(self):
        return 2*len(self.tau)

    def _line_plot_data_default(self):
        x = self.tau
        if self.norm_intens is not None:
            n = len(self.norm_intens)
            y  = self.norm_intens[:n/2]
            yp = self.norm_intens[n/2:]
        else:
            y  = np.zeros(x.shape)
            yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y, yp=yp)
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'time [ns]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot

    def _norm_intens_changed(self):
        n = len(self.norm_intens)
        self.line_plot_data.set_data('y', self.norm_intens[:n/2])
        self.line_plot_data.set_data('yp', self.norm_intens[n/2:])
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'pi2_1','pi_1','pi32_1', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('load_button', show_label=False, width =20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                         Item('pi2_1', width=30),
                                         Item('pi_1', width=30),
                                         Item('pi32_1', width=30),
                                         ),
                                 HGroup( Item('power',width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='3pi2 Hahn Echo', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            f1 = (self.freq - self.freq_center) / sampling
            f2 = (self.freq_2 - self.freq_center) / sampling
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling

            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1

            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi32_1 = int(self.pi32_1 * sampling/1.0e9)

            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p_i = [ zero,
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.011011, 0.025460)+ Sin( 264, f4, 0.079284, 0.000512),
                    Sin( 264, f1, -1.718550,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, 3.125410, 0.095977)+ Sin( 264, f4, 0.314165, 0.001070),
                    Sin( 264, f1, -1.718560,  0.000003) + Sin( 264, f2, -2.216400, 0.000006)+ Sin( 264, f3, -0.020865, 0.025289)+ Sin( 264, f4, -2.956790, 0.000954),
                    zero,
                    zero,
               ]
        
            p_q = [ zero,
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.559785, 0.025460)+ Sin( 264, f4, 1.650080, 0.000512),
                    Sin( 264, f1, -0.147754,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 4.696206, 0.095977)+ Sin( 264, f4, 1.884961, 0.001070),
                    Sin( 264, f1, -0.147764,  0.000003) + Sin( 264, f2, -0.645604, 0.000006)+ Sin( 264, f3, 1.549932, 0.025289)+ Sin( 264, f4, -1.385994, 0.000954),
                    zero,
                    zero,
               ]
                 
            p2_q = [ zero,
                    Sin( 50, f1, -0.865164,  0.017417) + Sin( 50, f2, 0.445466, 0.091190)+ Sin( 50, f3, 1.299360, 0.073724)+ Sin( 50, f4, -0.574454, 0.062658),
                    Sin( 50, f1, -0.870644,  0.018597) + Sin( 50, f2, 0.451596, 0.089887)+ Sin( 50, f3, 1.180583, 0.047465)+ Sin( 50, f4, -0.623484, 0.061688),
                    Sin( 50, f1, -0.876684,  0.018776) + Sin( 50, f2, 0.462466, 0.091193)+ Sin( 50, f3, 0.242646, 0.014381)+ Sin( 50, f4, -0.653804, 0.061576),
                    Sin( 50, f1, -0.878614,  0.018941) + Sin( 50, f2, 0.476246, 0.094602)+ Sin( 50, f3, -1.175974, 0.023674)+ Sin( 50, f4, -0.668354, 0.062918),
                    Sin( 50, f1, -0.874044,  0.019128) + Sin( 50, f2, 0.492526, 0.099487)+ Sin( 50, f3, -1.344744, 0.027292)+ Sin( 50, f4, -0.674014, 0.066124),
                    Sin( 50, f1, -0.865164,  0.018966) + Sin( 50, f2, 0.511206, 0.105204)+ Sin( 50, f3, -1.216814, 0.019417)+ Sin( 50, f4, -0.686914, 0.075050),
                    Sin( 50, f1, -0.856754,  0.018233) + Sin( 50, f2, 0.530876, 0.111119)+ Sin( 50, f3, -0.560054, 0.011756)+ Sin( 50, f4, -0.708884, 0.090374),
                    Sin( 50, f1, -0.853074,  0.017037) + Sin( 50, f2, 0.549046, 0.116598)+ Sin( 50, f3, -0.115064, 0.012905)+ Sin( 50, f4, -0.727884, 0.104557),
                    Sin( 50, f1, -0.855414,  0.015710) + Sin( 50, f2, 0.563646, 0.120996)+ Sin( 50, f3, -0.332214, 0.014807)+ Sin( 50, f4, -0.741494, 0.112692),
                    Sin( 50, f1, -0.861204,  0.014662) + Sin( 50, f2, 0.573396, 0.123800)+ Sin( 50, f3, -0.702444, 0.018696)+ Sin( 50, f4, -0.750884, 0.116263),
                    Sin( 50, f1, -0.865464,  0.014261) + Sin( 50, f2, 0.577272, 0.124778)+ Sin( 50, f3, -0.865654, 0.021208)+ Sin( 50, f4, -0.754074, 0.117189),
                    Sin( 50, f1, -0.864794,  0.014660) + Sin( 50, f2, 0.574746, 0.123880)+ Sin( 50, f3, -0.681334, 0.015978)+ Sin( 50, f4, -0.748964, 0.116134),
                    Sin( 50, f1, -0.860734,  0.015704) + Sin( 50, f2, 0.566266, 0.121133)+ Sin( 50, f3, -0.191344, 0.011670)+ Sin( 50, f4, -0.736654, 0.112493),
                    Sin( 50, f1, -0.857904,  0.017024) + Sin( 50, f2, 0.552756, 0.116758)+ Sin( 50, f3, 0.013566, 0.011107)+ Sin( 50, f4, -0.718904, 0.104314),
                    Sin( 50, f1, -0.859594,  0.018215) + Sin( 50, f2, 0.535326, 0.111274)+ Sin( 50, f3, -0.591304, 0.011942)+ Sin( 50, f4, -0.695824, 0.090014),
                    Sin( 50, f1, -0.865414,  0.018949) + Sin( 50, f2, 0.515946, 0.105341)+ Sin( 50, f3, -1.189724, 0.021588)+ Sin( 50, f4, -0.672504, 0.074516),
                    Sin( 50, f1, -0.871774,  0.019115) + Sin( 50, f2, 0.497096, 0.099601)+ Sin( 50, f3, -1.309424, 0.029384)+ Sin( 50, f4, -0.661304, 0.065415),
                    Sin( 50, f1, -0.874454,  0.018936) + Sin( 50, f2, 0.480256, 0.094693)+ Sin( 50, f3, -1.162184, 0.024600)+ Sin( 50, f4, -0.657884, 0.062157),
                    Sin( 50, f1, -0.871864,  0.018778) + Sin( 50, f2, 0.465596, 0.091257)+ Sin( 50, f3, 0.294966, 0.014513)+ Sin( 50, f4, -0.646794, 0.061068),
                    Sin( 50, f1, -0.866744,  0.018603) + Sin( 50, f2, 0.453576, 0.089921)+ Sin( 50, f3, 1.183054, 0.048593)+ Sin( 50, f4, -0.625184, 0.061716),
                    Sin( 50, f1, -0.863634,  0.017420) + Sin( 50, f2, 0.446156, 0.091199)+ Sin( 50, f3, 1.271947, 0.074531)+ Sin( 50, f4, -0.591874, 0.063275),
                    zero,
                    zero,
               ]
        
            p2_i = [ zero,
                    Sin( 50, f1, -2.435960,  0.017417) + Sin( 50, f2, -1.125330, 0.091190)+ Sin( 50, f3, -0.271436, 0.073724)+ Sin( 50, f4, -2.145250, 0.062658),
                    Sin( 50, f1, -2.441440,  0.018597) + Sin( 50, f2, -1.119200, 0.089887)+ Sin( 50, f3, -0.390213, 0.047465)+ Sin( 50, f4, -2.194280, 0.061688),
                    Sin( 50, f1, -2.447480,  0.018776) + Sin( 50, f2, -1.108330, 0.091193)+ Sin( 50, f3, -1.328150, 0.014381)+ Sin( 50, f4, -2.224600, 0.061576),
                    Sin( 50, f1, -2.449410,  0.018941) + Sin( 50, f2, -1.094550, 0.094602)+ Sin( 50, f3, -2.746770, 0.023674)+ Sin( 50, f4, -2.239150, 0.062918),
                    Sin( 50, f1, -2.444840,  0.019128) + Sin( 50, f2, -1.078270, 0.099487)+ Sin( 50, f3, -2.915540, 0.027292)+ Sin( 50, f4, -2.244810, 0.066124),
                    Sin( 50, f1, -2.435960,  0.018966) + Sin( 50, f2, -1.059590, 0.105204)+ Sin( 50, f3, -2.787610, 0.019417)+ Sin( 50, f4, -2.257710, 0.075050),
                    Sin( 50, f1, -2.427550,  0.018233) + Sin( 50, f2, -1.039920, 0.111119)+ Sin( 50, f3, -2.130850, 0.011756)+ Sin( 50, f4, -2.279680, 0.090374),
                    Sin( 50, f1, -2.423870,  0.017037) + Sin( 50, f2, -1.021750, 0.116598)+ Sin( 50, f3, -1.685860, 0.012905)+ Sin( 50, f4, -2.298680, 0.104557),
                    Sin( 50, f1, -2.426210,  0.015710) + Sin( 50, f2, -1.007150, 0.120996)+ Sin( 50, f3, -1.903010, 0.014807)+ Sin( 50, f4, -2.312290, 0.112692),
                    Sin( 50, f1, -2.432000,  0.014662) + Sin( 50, f2, -0.997400, 0.123800)+ Sin( 50, f3, -2.273240, 0.018696)+ Sin( 50, f4, -2.321680, 0.116263),
                    Sin( 50, f1, -2.436260,  0.014261) + Sin( 50, f2, -0.993524, 0.124778)+ Sin( 50, f3, -2.436450, 0.021208)+ Sin( 50, f4, -2.324870, 0.117189),
                    Sin( 50, f1, -2.435590,  0.014660) + Sin( 50, f2, -0.996050, 0.123880)+ Sin( 50, f3, -2.252130, 0.015978)+ Sin( 50, f4, -2.319760, 0.116134),
                    Sin( 50, f1, -2.431530,  0.015704) + Sin( 50, f2, -1.004530, 0.121133)+ Sin( 50, f3, -1.762140, 0.011670)+ Sin( 50, f4, -2.307450, 0.112493),
                    Sin( 50, f1, -2.428700,  0.017024) + Sin( 50, f2, -1.018040, 0.116758)+ Sin( 50, f3, -1.557230, 0.011107)+ Sin( 50, f4, -2.289700, 0.104314),
                    Sin( 50, f1, -2.430390,  0.018215) + Sin( 50, f2, -1.035470, 0.111274)+ Sin( 50, f3, -2.162100, 0.011942)+ Sin( 50, f4, -2.266620, 0.090014),
                    Sin( 50, f1, -2.436210,  0.018949) + Sin( 50, f2, -1.054850, 0.105341)+ Sin( 50, f3, -2.760520, 0.021588)+ Sin( 50, f4, -2.243300, 0.074516),
                    Sin( 50, f1, -2.442570,  0.019115) + Sin( 50, f2, -1.073700, 0.099601)+ Sin( 50, f3, -2.880220, 0.029384)+ Sin( 50, f4, -2.232100, 0.065415),
                    Sin( 50, f1, -2.445250,  0.018936) + Sin( 50, f2, -1.090540, 0.094693)+ Sin( 50, f3, -2.732980, 0.024600)+ Sin( 50, f4, -2.228680, 0.062157),
                    Sin( 50, f1, -2.442660,  0.018778) + Sin( 50, f2, -1.105200, 0.091257)+ Sin( 50, f3, -1.275830, 0.014513)+ Sin( 50, f4, -2.217590, 0.061068),
                    Sin( 50, f1, -2.437540,  0.018603) + Sin( 50, f2, -1.117220, 0.089921)+ Sin( 50, f3, -0.387742, 0.048593)+ Sin( 50, f4, -2.195980, 0.061716),
                    Sin( 50, f1, -2.434430,  0.017420) + Sin( 50, f2, -1.124640, 0.091199)+ Sin( 50, f3, -0.298849, 0.074531)+ Sin( 50, f4, -2.162670, 0.063275),
                    zero,
                    zero,
               ]
            
            sup_x=Waveform('SUP1_X.WFM', p2_i )
            sup_y=Waveform('SUP1_Y.WFM', p2_q )
            waves.append(sup_x)
            waves.append(sup_y)
            
            
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+p_i , t_0)
                ref_y = Waveform(name_y, [mod]+p_q , t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+p2_i, t_0)
                map_y = Waveform(name_y, [mod]+p2_q, t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
                
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF3_X%04i.WFM' % i
                name_y = 'REF3_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod]+p_i , t_0)
                ref_y = Waveform(name_y, [mod]+p_q , t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t*1.2 - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP3_X%04i.WFM' % i
                name_y = 'MAP3_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+p2_i+p_i, t_0)
                map_y = Waveform(name_y, [mod]+p2_q+p_q, t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH3_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
               
                main_seq.append(sub_seq,wait=True)
                
                
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
   
class Thermopeter( Pulsed ):
    """ Double-quantum Hahn-Echo """
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    
    pi2_1 = Range(low=1., high=100000., value=25, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi2_2 = Range(low=1., high=100000., value=75, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=49, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi2_1=self.pi2_1
        pi_1=self.pi_1
        pi_2=self.pi_2
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * t + pi_1 + 2 * pi2_1 + 4 * pi_2 + 800 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        


    
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi2_2', 'pi_1', 'pi_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('pi2_2', width=25),
                                         Item('pi_2', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='Thermopeter', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )
    
    def __getstate__(self):
        """Returns current state of a selection of traits.
        Overwritten HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1', 'pi_2','pi2_2',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)
            pi2_2 = int(self.pi2_2 * sampling/1.0e9)
            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 + 0']   = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 + 90']  = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            p['pi/2 - 0']   = Sin( pi2_2, (self.freq - self.freq_center)/sampling, 0 ,self.amp)
            p['pi/2 - 90']  = Sin( pi2_2, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp)
            
            
            p['pi - 0']   = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp)
            p['pi - 90']  = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp)
            waves = []
            zero = Idle(1)
            mod = Idle(0)
            
            sup_x=Waveform('SUP1_X.WFM', [zero, p['pi/2 + 0'], zero])
            sup_y=Waveform('SUP1_Y.WFM', [zero, p['pi/2 + 90'], zero])
            waves.append(sup_x)
            waves.append(sup_y)
            evo = Waveform('EVO.WFM', Idle(256))
            waves.append(evo)

            
            sub_seq = []
            main_seq = Sequence('0_DQH.SEQ')
            
            for i, t in enumerate(self.tau):
                t_1 = t - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                ref_x = Waveform(name_x, [mod,
                                          p['pi + 0'],
                                          p['pi - 0'],
                                          p['pi + 0'],
                                         ], t_0)
                ref_y = Waveform(name_y, [mod, 
                                          p['pi + 90'],
                                          p['pi - 90'],
                                          p['pi + 90'],
                                         ], t_0)
                waves.append(ref_x)
                waves.append(ref_y)
                t_2 = t - ref_x.stub
                repeat_2 = int(t_2 / 256)
                mod.duration = int(t_2 % 256)
                
                t_0 += ref_x.duration + repeat_2 * 256
                
                name_x = 'MAP_X%04i.WFM' % i
                name_y = 'MAP_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod,
                                          p['pi/2 - 0'],
                                          zero,
                                         ], t_0)
                map_y = Waveform(name_y, [mod, 
                                          p['pi/2 - 90'],
                                          zero,
                                         ], t_0)
                
                waves.append(map_x)
                waves.append(map_y)
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(ref_x, ref_y)
                sub_seq.append(evo, evo,repeat=repeat_2)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
                
                main_seq.append(sub_seq,wait=True)
            for w in waves:
                w.join()
            AWG.upload(waves)
            AWG.upload(main_seq)

            AWG.tell('*WAI')
            AWG.load('0_DQH.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0011 )
    
class FIDCS( Pulsed ):
    """FID measurement w/ cs.
    """

    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')

    pi2_1 = Range(low=1., high=100000., value=29, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=58, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    # CS: added CS-time parameter
    charge_time   = Range(low=1., high=1e9, value=2e6, desc='integration time charge state detection', label='charge detection [ns]', mode='text', auto_set=False, enter_set=True)
   
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        max_tau = max(tau)
        sequence = []
        # CS: no for t in tau: sequence always the same for every measurement point;
        # CS: triggers to curren & current2 instead of awg
        sequence.append(  (['current', 'current2'], self.charge_time) )
        sequence.append(  (['current2'], 1000) )
        # CS: replaced t in tau with max_tau
        sequence.append(  ([  ], 200 + max_tau + 10000) )
        # CS: no trigger to counter
        sequence.append(  (['laser'] , laser) )
        # CS: no wait time
        #sequence.append(  ([                   ] , 12.5  )  )
        return sequence
        
    def _norm_intens_changed(self): # _overwrite (*override) norm_intens_changed to provide live update of fit
        self.line_plot_data.set_data('y', self.norm_intens)
        
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        # CS: dump charge_time
        self.dump_items(['freq', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'charge_time', 'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi2_1', 'pi_1',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=15),
                                         Item('load_button', show_label=False)),
                                 HGroup( Item('start_time', width=40),
                                         Item('end_time', width=40),
                                         Item('time_step', width=40),
                                         Item('charge_time', width=20),), # CS: included charge_time
                                 HGroup( Item('state', style = 'custom', show_label=False,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='CSD-FID-YOLO-SWAG-BLING', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                )

    def __getstate__(self):
        """Returns current state of a selection of traits.
        OverRIDDen HasTraits.
        """
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        # CS: included charge_time
        for key in ['freq','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi2_1', 'pi_1',
                    'charge_time',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc
    
    def prepare_awg(self):
        if self.reload:
            AWG.stop()
            AWG.set_output( 'off', 3 )
            AWG.delete_all()
            self.compile_awg_sequence()
            AWG.load('FID.SEQ')
        AWG.set_amp( 2.0 )
        AWG.set_sample( 1.0 )
        AWG.set_mode( 'E' )
        AWG.set_output( 'on', 3 )
        
    def compile_awg_sequence(self):
        zero = Idle(1)
        evo_base = Idle(256)
        tau_mod = Idle(0)
        
        # Driving Pulses
        freq = (self.freq - self.freq_center)/1e9
        
        pulse = {}
        pulse['x pi']   = Sin(self.pi_1,  freq)
        pulse['x pi/2'] = Sin(self.pi2_1, freq)
        
        phi = np.pi/2
        pulse['y pi']   = Sin(self.pi_1,  freq, phi)
        pulse['y pi/2'] = Sin(self.pi2_1, freq, phi)
        
        # WAVEFORMS
        
        # Base evolution
        evo = Waveform('EVO.WFM', evo_base)
        AWG.upload([evo,])
        
        # Flag for triggers
        flag = Waveform('FLAG.WFM', [Idle(self.laser - 1, True, True),
                                     Idle(1)
                                    ])
        AWG.upload([flag,])
        
        # superposition
        superpos_list_x = [ zero,
                            pulse['x pi/2'],
                            
                          ]
        superpos_list_y = [ zero,
                            pulse['y pi/2'],
                            
                          ]
        t_0 = 0
        sup_wfm = ( Waveform('SUPX.WFM', superpos_list_x, t_0),
                    Waveform('SUPY.WFM', superpos_list_y, t_0)
                  )
        AWG.upload(sup_wfm)

        main_seq = Sequence('FID.SEQ', None, channels=2) # is the main sequence
        
        for i, t in enumerate(self.tau):
            if t < 500: raise Exception('Puzzled subsequences require minimum evo time of 500.')
            # divide t into sup_wfm.stub + tau_repeat * (evo) + tau_mod
            tau_mod.duration = (t - sup_wfm[0].stub)  % 256
            tau_repeat = int((t - sup_wfm[0].stub) / 256)
            
            name_x = 'MAPX_%03i.WFM' % i
            name_y = 'MAPY_%03i.WFM' % i
            map_list_x = [ tau_mod,
                           pulse['x pi/2'],
                         ]
            map_list_y = [ tau_mod,
                           pulse['y pi/2'],
                         ]
                           
            t_0 += sup_wfm[0].duration + tau_repeat * 256
            map_wfm = ( Waveform(name_x, map_list_x, t_0),
                        Waveform(name_y, map_list_y, t_0)
                      )
            AWG.upload(map_wfm)
            
            # subsequence
            name = 'SUB_%03i.SEQ' %i
            sub_seq = Sequence(name, None, 2)
            sub_seq.append(sup_wfm, 1, 0)
            if tau_repeat > 0:
                sub_seq.append((evo, evo), tau_repeat, 0)
            sub_seq.append(map_wfm, 1, 0)
            sub_seq.append((flag,flag), 1, 0)
            AWG.upload(sub_seq)
            
            # Main sequence
            main_seq.append(sub_seq, 1,1)
            
        # upload
        AWG.upload(main_seq)
        
        
    def run(self):
        self.offer_pause()
        PG.High([])
        FC.SetCycles(np.inf)
        FC.SetTime(np.inf)
        FC.SetDelay(0)
        FC.SetLevel(0.6, 0.6)
        FC.Configure(self.laser, self.bin_width, self.sequence_length)
        self.previous_time = 0
        self.previous_sweeps = 0
        self.previous_count_data = FC.GetData()
        self.prepare_awg()
        MW.CW(self.freq_center)
        MW.Power(self.power)
        MW.On()
        AWG.run()
        time.sleep(5)
        FC.Start()
        time.sleep(0.1)
        PG.Sequence(self.sequence, loop=True)

        start_time = time.time()

        while True:
            self.stop_request.wait(5.0)
            if self.stop_request.isSet():
                break
            self.elapsed_time = time.time() - start_time
            runtime, cycles = FC.GetState()
            sweeps = cycles / self.previous_count_data.shape[0]
            self.elapsed_sweeps = self.previous_sweeps + sweeps
            self.progress = int( 100 * self.elapsed_sweeps / self.sweeps ) 
            self.count_data = self.previous_count_data + FC.GetData()
            if self.elapsed_sweeps > self.sweeps:
                break
            self.offer_pause()

        FC.Halt()
        MW.Off()
        PG.High(['laser', 'mw'])
        AWG.stop()
        self.state='idle'
'''        

        
class N14_Ms0_RF_sweep( Pulsed ):
    """ Double-RF pulse endor sequence """
    
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True) 
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1.0e8, value=2.e6, desc='start freq [Hz]', label='start freq [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=1.0e8, value=3.e6, desc='end freq [Hz]', label='end freq [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1.0e6, value=1.e5, desc='freq step [Hz]', label='freq step [Hz]', mode='text', auto_set=False, enter_set=True)
    
    rf_time = Range(low=1., high=200000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)

    wait_time = Range(low=1.e3, high=100.e3, value=1.e3, desc='time between rf pulse and pi_2', label='wait_time', mode='text', auto_set=False, enter_set=True) 
    
    def _get_sequence_points(self):
        return len(self.tau)    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_time = self.rf_time
        wait_time = self.wait_time
        sequence = []

        for t in tau:
            sequence.append( (['awgTrigger'], 100 ))
            sequence.append(        ([], pi_1 + pi_2))
            sequence.append(        ([],1000))
            sequence.append(        (['awgTrigger'], 100 ))
            sequence.append(        ([], rf_time))
            sequence.append(        ([],wait_time))
            sequence.append(        (['awgTrigger'], 100 ))
            sequence.append(        ([], pi_1 + pi_2))
            sequence.append(        (['laser', 'trigger' ], laser ))
            sequence.append(        ([], wait ))
            sequence.append(        (['laser'], 20e3 ))
                  
            #sequence.extend(sub)
        return sequence
        
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            rf_time = int(self.rf_time * sampling/1.0e9)

            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            p['pi - 0']   = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']  = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]

            # Waveforms
            self.waves = []
            self.main_seq = Sequence('RFSWEEP.SEQ')
                   
            d=1      
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+104+pi_2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time )) )
                self.waves.append(Waveform( name_q,Idle(rf_time )) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, t/sampling, 0 ,self.amp) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+104+pi_2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFSWEEP.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )    
    

    get_set_items = Rabi.get_set_items + ['freq','freq_2','vpp','pi_1','pi_2','rf_time','wait_time','amp']  
    
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('pi_2', width=25),
                                      Item('rf_time', width=25),
                                      Item('amp', width=25),
                                       Item('wait_time', width=25),
                                    ),                                     
                              HGroup(Item('laser', width=40),
                                     Item('wait', width=40),
                                     Item('bin_width', width= -80, enabled_when='state != "run"'),
                                     Item('record_length', width= -80, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='Ms0 RF sweep Measurement',
                       )    

class Double_RF_sweep( Pulsed ):
    """ Double-RF pulse endor sequence """
    
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True) 
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1.0e8, value=2.e6, desc='start freq [Hz]', label='start freq [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=1.0e8, value=3.e6, desc='end freq [Hz]', label='end freq [Hz]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1.0e6, value=1.e5, desc='freq step [Hz]', label='freq step [Hz]', mode='text', auto_set=False, enter_set=True)
    
    rf_time = Range(low=1., high=300000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)

    wait_time = Range(low=1.e3, high=100.e3, value=1.e3, desc='time between rf pulse and pi_2', label='wait_time', mode='text', auto_set=False, enter_set=True) 
    
    def _get_sequence_points(self):
        return 2 * len(self.tau)    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_time = self.rf_time
        wait_time = self.wait_time
        sequence = []

        for t in tau:
            sequence.append( (['awgTrigger'], 100 ))
            sequence.append(        ([], pi_1 ))
            sequence.append(        ([],1000))
            sequence.append(        (['awgTrigger'], 100 ))
            sequence.append(        ([], rf_time))
            sequence.append(        ([],wait_time))
            sequence.append(        (['awgTrigger'], 100 ))
            sequence.append(        ([], pi_1 ))
            sequence.append(        (['laser', 'trigger' ], laser ))
            sequence.append(        ([], wait ))
                  
            #sequence.extend(sub)
        return sequence
        
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            rf_time = int(self.rf_time * sampling/1.0e9)

            
            
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            p['pi - 0']   = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']  = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]

            # Waveforms
            self.waves = []
            self.main_seq = Sequence('RFSWEEP.SEQ')
                   
            d=1      
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time )) )
                self.waves.append(Waveform( name_q,Idle(rf_time )) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, t/sampling, 0 ,self.amp) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='B_I_%04i.WFM' %t
                name_q='B_Q_%04i.WFM' %t
                name_rf='B_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_2_i) )
                self.waves.append(Waveform( name_q,pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_2+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='B2_I_%04i.WFM' %t
                name_q='B2_Q_%04i.WFM' %t
                name_rf='B2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time )) )
                self.waves.append(Waveform( name_q,Idle(rf_time )) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, t/sampling, 0 ,self.amp) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='B3_I_%04i.WFM' %t
                name_q='B3_Q_%04i.WFM' %t
                name_rf='B3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_2_i) )
                self.waves.append(Waveform( name_q,pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_2+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFSWEEP.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )    
    

    get_set_items = Rabi.get_set_items + ['freq','freq_2','vpp','pi_1','pi_2','rf_time','wait_time','amp']  
    
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('pi_2', width=25),
                                      Item('rf_time', width=25),
                                      Item('amp', width=25),
                                       Item('wait_time', width=25),
                                    ),                                     
                              HGroup(Item('laser', width=40),
                                     Item('wait', width=40),
                                     Item('bin_width', width= -80, enabled_when='state != "run"'),
                                     Item('record_length', width= -80, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='Double RF sweep Measurement',
                       ) 

class Single_RF_Rabi( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=100., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=5., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)

    wait_time = Range(low=1.e3, high=100.e3, value=1.e3, desc='time between rf pulse and pi_2', label='wait_time', mode='text', auto_set=False, enter_set=True)     
     
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        rf_freq = self.rf_freq
        wait_time = self.wait_time
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100  ),
                    ([], pi_1 + 1000 ),
                    (['awgTrigger'], 100 ),
                    ([], t),
                    ([], wait_time ),
                    (['awgTrigger'], 100  ),
                    ([], pi_1 + 1000),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                   ]
            sequence.extend(sub)
            
        return sequence
        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('RFrabi.SEQ')
                 
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(t*1.2)) )
                self.waves.append(Waveform( name_q, Idle(t*1.2)) )
                self.waves.append(Waveform( name_rf,Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
              
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFrabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','vpp','pi_1','rf_freq','wait_time','amp']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('rf_freq', width=25),
                                      Item('amp', width=25),
                                      Item('wait_time', width=25),
                                    ),                                     
                              HGroup(Item('laser', width=40),
                                     Item('wait', width=40),
                                     Item('bin_width', width= -80, enabled_when='state != "run"'),
                                     Item('record_length', width= -80, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='Single RF Rabi Measurement',
                       ) 

                       
class Double_RF_Rabi( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True) 
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=100., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=5., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)

    wait_time = Range(low=1.e3, high=100.e3, value=1.e3, desc='time between rf pulse and pi_2', label='wait_time', mode='text', auto_set=False, enter_set=True)     
     
    
    def _get_sequence_points(self):
        return 2 * len(self.tau)    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        wait_time = self.wait_time
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100  ),
                    ([], pi_1 + 1000 ),
                    (['awgTrigger'], 100 ),
                    ([], t),
                    ([], wait_time ),
                    (['awgTrigger'], 100  ),
                    ([], pi_1 + 1000),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                   ]
            sequence.extend(sub)
            
        return sequence
        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('RFrabi.SEQ')
                 
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(t*1.2)) )
                self.waves.append(Waveform( name_q, Idle(t*1.2)) )
                self.waves.append(Waveform( name_rf,Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i) )
                self.waves.append(Waveform( name_q,pi_1_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                name_i='B_I_%04i.WFM' %t
                name_q='B_Q_%04i.WFM' %t
                name_rf='B_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_2_i) )
                self.waves.append(Waveform( name_q,pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_2+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='B2_I_%04i.WFM' %t
                name_q='B2_Q_%04i.WFM' %t
                name_rf='B2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(t*1.2)) )
                self.waves.append(Waveform( name_q, Idle(t*1.2)) )
                self.waves.append(Waveform( name_rf,Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                name_i='B3_I_%04i.WFM' %t
                name_q='B3_Q_%04i.WFM' %t
                name_rf='B3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_2_i) )
                self.waves.append(Waveform( name_q,pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_2+2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
              
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFrabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','vpp','pi_1','pi_2','rf_freq','wait_time','amp']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('pi_2', width=25),
                                      Item('rf_freq', width=25),
                                      Item('amp', width=25),
                                       Item('wait_time', width=25),
                                    ),                                     
                              HGroup(Item('laser', width=40),
                                     Item('wait', width=40),
                                     Item('bin_width', width= -80, enabled_when='state != "run"'),
                                     Item('record_length', width= -80, enabled_when='state != "run"'),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='Double RF Rabi Measurement',
                       ) 

class DNP_pump_test( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True) 
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=100., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=5., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)

    #pumping_time = Range(low=0., high=5.e6, value=30.e3, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=30.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    t_second = Range(low=1.e1, high=1.e3, value=1.e3, desc='second laser for pump electron spin', label='second pol time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait_time_pol', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=30.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)  
    
    repetitions = Range(low=1 , high=10 , value=1, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)
     
    
    def _get_sequence_points(self):
        return 2 * len(self.tau) 
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        t_second = self.t_second
        #wait_time = self.wait_time
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        #pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []

        for t in tau:
            sequence.append((['awgTrigger'], 100  ))
            sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
            sequence.append( (['pumping'], t ))
            sequence.append(([], wait_time_pump))
            sequence.append((['awgTrigger'], 100  ))
            sequence.append(([], 2 * pi_1 + 1000 ))
            sequence.append( (['laser', 'trigger' ], laser ))
            sequence.append( (['pumping'],  polaring_time ))
            sequence.append(([], wait_time_pol))
            
            sequence.append((['awgTrigger'], 100  ))
            sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
            sequence.append( (['pumping'], t ))
            sequence.append(([], wait_time_pump))
            sequence.append( (['pumping'], t_second ))
            sequence.append(([], wait_time_pump))
            sequence.append((['awgTrigger'], 100  ))
            sequence.append(([], 2 * pi_1 + 1000 ))
            sequence.append( (['laser', 'trigger' ], laser ))
            sequence.append( (['pumping'],  polaring_time ))
            sequence.append(([], wait_time_pol))  


        return sequence
        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            repetitions = self.repetitions
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('pump_test.SEQ')
                 
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)]))
                self.waves.append(Waveform( name_q, pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)] ))
                self.waves.append(Waveform( name_rf, [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)]))
                for i in range( repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time)) )
                self.waves.append(Waveform( name_q, Idle(rf_time)) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1 + 2 + 100 + pi_2 + 2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                name_i='B_I_%04i.WFM' %t
                name_q='B_Q_%04i.WFM' %t
                name_rf='B_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)]))
                self.waves.append(Waveform( name_q, pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)] ))
                self.waves.append(Waveform( name_rf, [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)]))
                for i in range( repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time)) )
                self.waves.append(Waveform( name_q, Idle(rf_time)) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='B3_I_%04i.WFM' %t
                name_q='B3_Q_%04i.WFM' %t
                name_rf='B3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1 + 2 + 100 + pi_2 + 2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('pump_test.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','vpp','pi_1','pi_2','rf_freq','rf_time','amp','t_second','polaring_time','wait_time_pol','wait_time_pump']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('pi_2', width=25),
                                      Item('rf_freq', width=25),
                                      Item('amp', width=25),
                                      Item('rf_time', width=25),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     #Item('pumping_time', width= -50),
                                     Item('t_second', width= -40),
                                     Item('wait_time_pump', width= -50),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='pump_test_measurement',
                       )                     
                       
class DNP_N_T1( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True) 
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=100., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=5., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)

    #pumping_time = Range(low=0., high=5.e6, value=30.e3, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=30.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait_time_pol', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=30.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)  
    
    repetitions = Range(low=1 , high=10 , value=1, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)
     
    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        #wait_time = self.wait_time
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        #pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        repetitions = self.repetitions
        sequence = []

        for t in tau:
             for i in range(repetitions):
                  sequence.append((['awgTrigger'], 100  ))
                  sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                  sequence.append( (['pumping'], t ))
                  sequence.append(([], wait_time_pump))
             sequence.append((['awgTrigger'], 100  ))
             sequence.append(([], 2 * pi_1 + 1000 ))
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))  


        return sequence
        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            repetitions = self.repetitions
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('NT1.SEQ')
                 
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)]))
                self.waves.append(Waveform( name_q, pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)] ))
                self.waves.append(Waveform( name_rf, [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)]))
                for i in range( repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='A2_I_%04i.WFM' %t
                name_q='A2_Q_%04i.WFM' %t
                name_rf='A2_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(rf_time)) )
                self.waves.append(Waveform( name_q, Idle(rf_time)) )
                self.waves.append(Waveform( name_rf,Sin( rf_time, rf_freq/sampling, 0 ,self.amp)) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                self.waves.append(Waveform( name_rf, Idle(pi_1 + 2 + 100 + pi_2 + 2) ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('NT1.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','vpp','pi_1','pi_2','rf_freq','rf_time','amp']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('vpp', width=40),                                     
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=40),
                                     Item('power', width=40),
                                     ), 
                              HGroup( Item('pi_1', width=25),
                                      Item('pi_2', width=25),
                                      Item('rf_freq', width=25),
                                      Item('amp', width=25),
                                      Item('rf_time', width=25),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     
                                     ),
                                     
                              HGroup(Item('tau_begin', width=40),
                                     Item('tau_end', width=40),
                                     Item('tau_delta', width= 40),
                                     #Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='N_T1_measurement',
                       )                     

class DNP_Rabi( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841390e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905112e9, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.902940e9, desc='frequency second transition [Hz]', label='freq 3. trans [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=15., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=4000., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=100., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=15.8e3, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)     
     
    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))    
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , t + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

           

             """
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , t +600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( (['pumping'],  50e3 ))
             sequence.append(([], wait))
             """

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            """
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            drive_x = Sin(0, (self.freq_3 - self.freq_center)/sampling, 0 ,1)
            drive_y = Sin(0, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,1)
            """
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('NPRabi.SEQ')
            
            #swap_x = Waveform('swap_x',pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)])
            #swap_y = Waveform('swap_y',pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)])
            #swap_rf = Waveform('swap_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)])   
            #self.waves.append(swap_x)
            #self.waves.append(swap_y)
            #self.waves.append(swap_rf)

           
            
            
            for t in self.tau:
            
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)]))
                self.waves.append(Waveform( name_q, pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)] ))
                self.waves.append(Waveform( name_rf, [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)]))
                for i in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name = 'SUB_%03i.SEQ' %t
                sub_seq = Sequence(name)
                sub_seq.append(swap_x,swap_y,swap_rf,repeat=int(repetitions))
                AWG.upload(sub_seq)
                self.main_seq.append(sub_seq, wait=True)
                """
                #self.main_seq.append(swap_x,swap_y,swap_rf,wait=True)
                
                tp = int( t * sampling / 1.0e9)
                drive_x.duration = tp
                drive_y.duration = tp
                #x_name = 'X_RA_%03i.WFM' % t
                #y_name = 'Y_RA_%03i.WFM' % t
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform(name_i, [zero, drive_x, zero]))
                self.waves.append(Waveform(name_q, [zero, drive_y, zero]))
                self.waves.append(Waveform(name_rf, Idle(tp+2)))
                self.main_seq.append(*self.waves[-3:], wait=True)
                #name_i='A3_I_%04i.WFM' %t
                #name_q='A3_Q_%04i.WFM' %t
                #name_rf='A3_RF_%04i.WFM' %t
                #self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                #self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                #self.waves.append(Waveform( name_rf, Idle(pi_1 + 2 + 100 + pi_2 + 2) ) )
                #self.main_seq.append(*self.waves[-3:], wait=True)


            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('NPRabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','freq_3','vpp','pi_1','pi_2','rf_freq','rf_time','amp','repetitions']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                                                         
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp', width=-40),
                                      Item('rf_time', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='DNP_Rabi',
                       ) 

class DNP_Nucle_Rabi( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.71e9, desc='frequency first transition [Hz]', label='freq 1. tran [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 3. trans [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=49, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=1., high=1e7, value=100., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=5., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp = Range(low=0., high=1.0, value=1.0, desc='Normalized amplitude of waveform', label='WFM rf amp', mode='text', auto_set=False, enter_set=True)
    #rf_time = Range(low=1., high=200000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=1, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=0.5e3, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=30.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)     
     
    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        pi_3=self.pi_3
        rf_freq = self.rf_freq
        #rf_time = self.rf_time
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))    
             for i in range(repetitions):
                    sequence.append((['awgTrigger'], 100  ))
                    sequence.append(([], 2 * pi_1 + t + 2000 ))
                    #sequence.append( (['pumping'], t ))
                    sequence.append( (['pumping'], pumping_time ))
                    sequence.append(([], wait_time_pump))
                    sequence.append( (['pumping'], pumping_time ))
                    sequence.append(([], wait_time_pump))
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_3 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( ([], wait ))


           

             """
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , t +600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( (['pumping'],  50e3 ))
             sequence.append(([], wait))
             """

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            #rf_time = int(self.rf_time * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi_3 = int(self.pi_3 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            drive_x = Sin(pi_3, (self.freq_3 - self.freq_center)/sampling, 0 ,1)
            drive_y = Sin(pi_3, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('NPRabi.SEQ')
            
            #swap_x = Waveform('swap_x',pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time)])
            #swap_y = Waveform('swap_y',pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time)])
            #swap_rf = Waveform('swap_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( rf_time, rf_freq/sampling, 0 ,self.amp)])   
            #self.waves.append(swap_x)
            #self.waves.append(swap_y)
            #self.waves.append(swap_rf)

           
            
            
            for t in self.tau:
                t = int( t * sampling/1.0e9)
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_1_i + [Idle(100)] + pi_2_i + [Idle(t)]))
                self.waves.append(Waveform( name_q, pi_1_q + [Idle(100)] + pi_2_q + [Idle(t)] ))
                self.waves.append(Waveform( name_rf, [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [Sin( t, rf_freq/sampling, 0 ,self.amp)]))
                for i in range(repetitions):
                     self.main_seq.append(*self.waves[-3:], wait=True)
                """
                name = 'SUB_%03i.SEQ' %t
                sub_seq = Sequence(name)
                sub_seq.append(swap_x,swap_y,swap_rf,repeat=int(repetitions))
                AWG.upload(sub_seq)
                self.main_seq.append(sub_seq, wait=True)
                """
                #self.main_seq.append(swap_x,swap_y,swap_rf,wait=True)
                
                #tp = int( t * sampling / 1.0e9)
                #drive_x.duration = tp
                #drive_y.duration = tp
                #x_name = 'X_RA_%03i.WFM' % t
                #y_name = 'Y_RA_%03i.WFM' % t
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform(name_i, [zero, drive_x, zero]))
                self.waves.append(Waveform(name_q, [zero, drive_y, zero]))
                self.waves.append(Waveform(name_rf, Idle(pi_3+2)))
                self.main_seq.append(*self.waves[-3:], wait=True)
                #name_i='A3_I_%04i.WFM' %t
                #name_q='A3_Q_%04i.WFM' %t
                #name_rf='A3_RF_%04i.WFM' %t
                #self.waves.append(Waveform( name_i,pi_1_i + [Idle(100)] + pi_2_i) )
                #self.waves.append(Waveform( name_q,pi_1_q + [Idle(100)] + pi_2_q) )
                #self.waves.append(Waveform( name_rf, Idle(pi_1 + 2 + 100 + pi_2 + 2) ) )
                #self.main_seq.append(*self.waves[-3:], wait=True)


            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('NPRabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','freq_3','vpp','pi_1','pi_2','pi_3','rf_freq','amp','repetitions']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                                                         
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('pi_3', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp', width=-40),
                                      #Item('rf_time', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -50),
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='DNP_Nucle_Rabi',
                       )  
                       
class Nucle_Rabi_with_DNP( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    rf_freq_label = Range(low=1, high=3, value=1, desc='choose the frequency to measure rabi', label='rf_freq_label', mode='text', auto_set=False, enter_set=True)
    freq = Range(low=1, high=20e9, value=2.841432e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905157e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839280e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902994e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)

    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2520, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2452, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=300., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=12000., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=1000., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=15.8e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    rf_freq2 = Range(low=1, high=20e9, value=7.113e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf2 = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_freq3 = Range(low=1, high=20e9, value=4.943e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)  
    amp_rf3 = Range(low=0., high=1.0, value=0.154, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    #rf_time2 = Range(low=1., high=200000., value=15.8e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)  
     
    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , t + 3300 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_freq2 = self.rf_freq2
            rf_freq3 = self.rf_freq3
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            p['pi3 - 0']     = Sin( pi_2, (self.freq_3 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi3 - 90']    = Sin( pi_2, (self.freq_3 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
                       
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            pi_3_i = [zero,p['pi3 - 0'],zero]
            pi_3_q = [zero,p['pi3 - 90'],zero]
            
            read_mw_i = Waveform('Read_mw_I', pi_3_i)
            read_mw_q = Waveform('Read_mw_Q', pi_3_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            f3 = (self.freq_3 - self.freq_center) / sampling
            f4 = (self.freq_4 - self.freq_center) / sampling
            
            if self.rf_freq_label == 1:
                    p_opt1_i = [ zero,
                            Sin(120,f1,-0.013044,0.00079917) + Sin(120,f2,-0.96712,0.00040776), 
                            Sin(120,f1,-2.6166,0.088594) + Sin(120,f2,-2.1603,0.013963), 
                            Sin(120,f1,0.8615,0.10946) + Sin(120,f2,0.13059,0.023321), 
                            Sin(120,f1,0.78269,0.14916) + Sin(120,f2,2.7421,0.12097), 
                            Sin(120,f1,0.80512,0.14634) + Sin(120,f2,-2.8774,0.1164), 
                            Sin(120,f1,-2.6941,0.11616) + Sin(120,f2,0.78914,0.1621), 
                            Sin(120,f1,0.77884,0.14754) + Sin(120,f2,1.1957,0.12308), 
                            Sin(120,f1,-0.82723,0.14151) + Sin(120,f2,0.18068,0.09943), 
                            Sin(120,f1,-2.1554,0.1263) + Sin(120,f2,2.3564,0.1608), 
                            Sin(120,f1,-0.78403,0.1491) + Sin(120,f2,1.7832,0.094112), 
                            Sin(120,f1,0.78168,0.14844) + Sin(120,f2,-2.0009,0.12604), 
                            Sin(120,f1,-1.0985,0.031866) + Sin(120,f2,-1.5941,0.099413), 
                            Sin(120,f1,-2.1074,0.12163) + Sin(120,f2,2.2827,0.15156), 
                            Sin(120,f1,2.3246,0.057477) + Sin(120,f2,2.3554,0.16196), 
                            Sin(120,f1,2.4061,0.14128) + Sin(120,f2,-2.3298,0.084344), 
                            Sin(120,f1,2.78,0.10846) + Sin(120,f2,2.6549,0.015561), 
                            Sin(120,f1,-1.2179,0.055728) + Sin(120,f2,-0.88459,0.011207), 
                            Sin(120,f1,-0.012679,0.00072051) + Sin(120,f2,-1.9722,0.0019326), 
                            zero,
                           ]
                    p_opt1_q = [ zero,
                            Sin(120,f1,1.5578,0.00079917) + Sin(120,f2,0.60368,0.00040776), 
                            Sin(120,f1,-1.0458,0.088594) + Sin(120,f2,-0.58952,0.013963), 
                            Sin(120,f1,2.4323,0.10946) + Sin(120,f2,1.7014,0.023321), 
                            Sin(120,f1,2.3535,0.14916) + Sin(120,f2,4.3129,0.12097), 
                            Sin(120,f1,2.3759,0.14634) + Sin(120,f2,-1.3066,0.1164), 
                            Sin(120,f1,-1.1233,0.11616) + Sin(120,f2,2.3599,0.1621), 
                            Sin(120,f1,2.3496,0.14754) + Sin(120,f2,2.7665,0.12308), 
                            Sin(120,f1,0.74357,0.14151) + Sin(120,f2,1.7515,0.09943), 
                            Sin(120,f1,-0.58456,0.1263) + Sin(120,f2,3.9272,0.1608), 
                            Sin(120,f1,0.78677,0.1491) + Sin(120,f2,3.354,0.094112), 
                            Sin(120,f1,2.3525,0.14844) + Sin(120,f2,-0.43008,0.12604), 
                            Sin(120,f1,0.47227,0.031866) + Sin(120,f2,-0.023254,0.099413), 
                            Sin(120,f1,-0.53662,0.12163) + Sin(120,f2,3.8535,0.15156), 
                            Sin(120,f1,3.8954,0.057477) + Sin(120,f2,3.9262,0.16196), 
                            Sin(120,f1,3.9769,0.14128) + Sin(120,f2,-0.759,0.084344), 
                            Sin(120,f1,4.3508,0.10846) + Sin(120,f2,4.2257,0.015561), 
                            Sin(120,f1,0.35293,0.055728) + Sin(120,f2,0.6862,0.011207), 
                            Sin(120,f1,1.5581,0.00072051) + Sin(120,f2,-0.40139,0.0019326), 
                            zero,
                           ]
            elif self.rf_freq_label == 3:
                    p_opt1_i = [ zero,
                             Sin(120,f3,1.6156,0.0026247) + Sin(120,f4,-2.9424,0.0011421), 
                             Sin(120,f3,1.2334,0.013977) + Sin(120,f4,-1.3217,0.06536), 
                             Sin(120,f3,-1.8261,0.041548) + Sin(120,f4,0.93775,0.13741), 
                             Sin(120,f3,-2.357,0.14799) + Sin(120,f4,0.77664,0.16076), 
                             Sin(120,f3,-2.3574,0.14913) + Sin(120,f4,-1.3343,0.11817), 
                             Sin(120,f3,-0.84043,0.13781) + Sin(120,f4,-0.78244,0.16091), 
                             Sin(120,f3,2.2415,0.13468) + Sin(120,f4,-0.7042,0.15075), 
                             Sin(120,f3,0.78855,0.14741) + Sin(120,f4,-2.3489,0.16085), 
                             Sin(120,f3,-1.6082,0.10486) + Sin(120,f4,1.9134,0.028985), 
                             Sin(120,f3,-1.1132,0.11728) + Sin(120,f4,0.78164,0.16193), 
                             Sin(120,f3,0.44861,0.11478) + Sin(120,f4,2.7283,0.11182), 
                             Sin(120,f3,0.8833,0.13589) + Sin(120,f4,2.8395,0.12005), 
                             Sin(120,f3,-0.93885,0.11711) + Sin(120,f4,1.5262,0.11372), 
                             Sin(120,f3,-1.9207,0.11032) + Sin(120,f4,-3.0049,0.11402), 
                             Sin(120,f3,2.3442,0.12255) + Sin(120,f4,-2.3596,0.16203), 
                             Sin(120,f3,-1.9799,0.048286) + Sin(120,f4,1.7361,0.049548), 
                             Sin(120,f3,1.1044,0.0054525) + Sin(120,f4,1.26,0.069315), 
                             Sin(120,f3,1.3849,0.00053443) + Sin(120,f4,0.59238,0.00036571),
                             zero,
                           ]
               
                    p_opt1_q = [ zero,
                             Sin(120,f3,3.1864,0.0026247) + Sin(120,f4,-1.3717,0.0011421), 
                             Sin(120,f3,2.8042,0.013977) + Sin(120,f4,0.24905,0.06536), 
                             Sin(120,f3,-0.25532,0.041548) + Sin(120,f4,2.5085,0.13741), 
                             Sin(120,f3,-0.7862,0.14799) + Sin(120,f4,2.3474,0.16076), 
                             Sin(120,f3,-0.78665,0.14913) + Sin(120,f4,0.23654,0.11817), 
                             Sin(120,f3,0.73037,0.13781) + Sin(120,f4,0.78835,0.16091), 
                             Sin(120,f3,3.8123,0.13468) + Sin(120,f4,0.8666,0.15075), 
                             Sin(120,f3,2.3593,0.14741) + Sin(120,f4,-0.77805,0.16085), 
                             Sin(120,f3,-0.03738,0.10486) + Sin(120,f4,3.4842,0.028985), 
                             Sin(120,f3,0.45762,0.11728) + Sin(120,f4,2.3524,0.16193), 
                             Sin(120,f3,2.0194,0.11478) + Sin(120,f4,4.2991,0.11182), 
                             Sin(120,f3,2.4541,0.13589) + Sin(120,f4,4.4103,0.12005), 
                             Sin(120,f3,0.63194,0.11711) + Sin(120,f4,3.097,0.11372), 
                             Sin(120,f3,-0.34987,0.11032) + Sin(120,f4,-1.4341,0.11402), 
                             Sin(120,f3,3.915,0.12255) + Sin(120,f4,-0.78877,0.16203), 
                             Sin(120,f3,-0.40914,0.048286) + Sin(120,f4,3.3069,0.049548), 
                             Sin(120,f3,2.6752,0.0054525) + Sin(120,f4,2.8308,0.069315), 
                             Sin(120,f3,2.9557,0.00053443) + Sin(120,f4,2.1632,0.00036571),
                             zero,
                           ]
            else:               
                    p_opt1_i = Idle(1800) 
                    p_opt1_q = Idle(1800)            
            
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('NPRabi.SEQ')
            
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for t in self.tau:
            
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for i in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 

                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, Idle(t*1.2)) )
                self.waves.append(Waveform( name_q, Idle(t*1.2)) )
                self.waves.append(Waveform( name_rf,[Sin( t*1.2, rf_freq2/sampling, 0 ,self.amp_rf2) + Sin( t*1.2, rf_freq3/sampling, 0 ,self.amp_rf3)]) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('NPRabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','freq_3','vpp','pi_1','pi_2','rf_freq','rf_freq2','rf_freq3','rf_time','amp_rf','amp_rf2','amp_rf3','repetitions']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                 
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-80),
                                      Item('rf_freq2', width=-80),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_freq3', width=-80),
                                      Item('amp_rf3', width=-40),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='Nucle_Rabi_After_DNP',
                       )                  

class QSim( Pulsed ):

    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841390e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905112e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839217e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902940e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_5 = Range(low=1, high=20e9, value=2.837051e9, desc='frequency second transition [Hz]', label='freq 5 [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2520, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2452, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=0., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=440., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=18., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=15.8e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    amp_rf2 = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time2 = Range(low=1., high=200000., value=15.8e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True)     
     
    
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        rf_time2 = self.rf_time2
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 2200 + 3300 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

           

             """
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , t +600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( (['pumping'],  50e3 ))
             sequence.append(([], wait))
             """

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_time2 = int(self.rf_time2 * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Opt pi pulse ms=0 <> ms = +1
            f1 = (self.freq_3 - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            p_opt1_i = [ zero,
                    Sin(120,f1,-0.013044,0.00079917) + Sin(120,f2,-0.96712,0.00040776), 
                    Sin(120,f1,-2.6166,0.088594) + Sin(120,f2,-2.1603,0.013963), 
                    Sin(120,f1,0.8615,0.10946) + Sin(120,f2,0.13059,0.023321), 
                    Sin(120,f1,0.78269,0.14916) + Sin(120,f2,2.7421,0.12097), 
                    Sin(120,f1,0.80512,0.14634) + Sin(120,f2,-2.8774,0.1164), 
                    Sin(120,f1,-2.6941,0.11616) + Sin(120,f2,0.78914,0.1621), 
                    Sin(120,f1,0.77884,0.14754) + Sin(120,f2,1.1957,0.12308), 
                    Sin(120,f1,-0.82723,0.14151) + Sin(120,f2,0.18068,0.09943), 
                    Sin(120,f1,-2.1554,0.1263) + Sin(120,f2,2.3564,0.1608), 
                    Sin(120,f1,-0.78403,0.1491) + Sin(120,f2,1.7832,0.094112), 
                    Sin(120,f1,0.78168,0.14844) + Sin(120,f2,-2.0009,0.12604), 
                    Sin(120,f1,-1.0985,0.031866) + Sin(120,f2,-1.5941,0.099413), 
                    Sin(120,f1,-2.1074,0.12163) + Sin(120,f2,2.2827,0.15156), 
                    Sin(120,f1,2.3246,0.057477) + Sin(120,f2,2.3554,0.16196), 
                    Sin(120,f1,2.4061,0.14128) + Sin(120,f2,-2.3298,0.084344), 
                    Sin(120,f1,2.78,0.10846) + Sin(120,f2,2.6549,0.015561), 
                    Sin(120,f1,-1.2179,0.055728) + Sin(120,f2,-0.88459,0.011207), 
                    Sin(120,f1,-0.012679,0.00072051) + Sin(120,f2,-1.9722,0.0019326), 
                    zero,
                   ]
            p_opt1_q = [ zero,
                    Sin(120,f1,1.5578,0.00079917) + Sin(120,f2,0.60368,0.00040776), 
                    Sin(120,f1,-1.0458,0.088594) + Sin(120,f2,-0.58952,0.013963), 
                    Sin(120,f1,2.4323,0.10946) + Sin(120,f2,1.7014,0.023321), 
                    Sin(120,f1,2.3535,0.14916) + Sin(120,f2,4.3129,0.12097), 
                    Sin(120,f1,2.3759,0.14634) + Sin(120,f2,-1.3066,0.1164), 
                    Sin(120,f1,-1.1233,0.11616) + Sin(120,f2,2.3599,0.1621), 
                    Sin(120,f1,2.3496,0.14754) + Sin(120,f2,2.7665,0.12308), 
                    Sin(120,f1,0.74357,0.14151) + Sin(120,f2,1.7515,0.09943), 
                    Sin(120,f1,-0.58456,0.1263) + Sin(120,f2,3.9272,0.1608), 
                    Sin(120,f1,0.78677,0.1491) + Sin(120,f2,3.354,0.094112), 
                    Sin(120,f1,2.3525,0.14844) + Sin(120,f2,-0.43008,0.12604), 
                    Sin(120,f1,0.47227,0.031866) + Sin(120,f2,-0.023254,0.099413), 
                    Sin(120,f1,-0.53662,0.12163) + Sin(120,f2,3.8535,0.15156), 
                    Sin(120,f1,3.8954,0.057477) + Sin(120,f2,3.9262,0.16196), 
                    Sin(120,f1,3.9769,0.14128) + Sin(120,f2,-0.759,0.084344), 
                    Sin(120,f1,4.3508,0.10846) + Sin(120,f2,4.2257,0.015561), 
                    Sin(120,f1,0.35293,0.055728) + Sin(120,f2,0.6862,0.011207), 
                    Sin(120,f1,1.5581,0.00072051) + Sin(120,f2,-0.40139,0.0019326), 
                    zero,
                   ]
                   
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            f3 = (self.freq_5 - self.freq_center) / sampling
            f4 = (self.freq_2 - self.freq_center) / sampling
            p_opt_sim_i = [zero,
                    Sin(120,f3,-1.4612,0.006906) + Sin(120,f4,1.0545,0.0036056), 
                    Sin(120,f3,2.9283,0.030143) + Sin(120,f4,0.99948,0.040341), 
                    Sin(120,f3,0.79481,0.13969) + Sin(120,f4,0.29139,0.10828), 
                    Sin(120,f3,0.8506,0.15491) + Sin(120,f4,-0.84387,0.1756), 
                    Sin(120,f3,2.3562,0.16879) + Sin(120,f4,-0.98281,0.15465), 
                    Sin(120,f3,-2.1647,0.14506) + Sin(120,f4,-2.5639,0.14641), 
                    Sin(120,f3,1.1512,0.015496) + Sin(120,f4,0.75092,0.18003), 
                    Sin(120,f3,-2.1297,0.13857) + Sin(120,f4,-0.55359,0.15418), 
                    Sin(120,f3,1.9381,0.12895) + Sin(120,f4,0.26695,0.13601), 
                    Sin(120,f3,2.7432,0.12569) + Sin(120,f4,-3.0818,0.10632), 
                    Sin(120,f3,2.4764,0.1533) + Sin(120,f4,0.24987,0.12719), 
                    Sin(120,f3,-1.5408,0.11853) + Sin(120,f4,-0.7557,0.17755), 
                    Sin(120,f3,0.78876,0.17118) + Sin(120,f4,-0.77881,0.1842), 
                    Sin(120,f3,0.78394,0.17139) + Sin(120,f4,2.3484,0.18388), 
                    Sin(120,f3,2.2305,0.15387) + Sin(120,f4,0.93638,0.16169), 
                    Sin(120,f3,-1.1142,0.12011) + Sin(120,f4,2.1895,0.15918), 
                    Sin(120,f3,0.55411,0.036961) + Sin(120,f4,0.50872,0.098091), 
                    Sin(120,f3,2.6139,0.0027864) + Sin(120,f4,-0.86219,0.015542),
                    zero,
                    ]
            p_opt_sim_q = [zero,
                    Sin(120,f3,0.10962,0.006906) + Sin(120,f4,2.6253,0.0036056), 
                    Sin(120,f3,4.4991,0.030143) + Sin(120,f4,2.5703,0.040341), 
                    Sin(120,f3,2.3656,0.13969) + Sin(120,f4,1.8622,0.10828), 
                    Sin(120,f3,2.4214,0.15491) + Sin(120,f4,0.72692,0.1756), 
                    Sin(120,f3,3.927,0.16879) + Sin(120,f4,0.58798,0.15465), 
                    Sin(120,f3,-0.59391,0.14506) + Sin(120,f4,-0.99314,0.14641), 
                    Sin(120,f3,2.722,0.015496) + Sin(120,f4,2.3217,0.18003), 
                    Sin(120,f3,-0.55894,0.13857) + Sin(120,f4,1.0172,0.15418), 
                    Sin(120,f3,3.5089,0.12895) + Sin(120,f4,1.8377,0.13601), 
                    Sin(120,f3,4.314,0.12569) + Sin(120,f4,-1.511,0.10632), 
                    Sin(120,f3,4.0472,0.1533) + Sin(120,f4,1.8207,0.12719), 
                    Sin(120,f3,0.03003,0.11853) + Sin(120,f4,0.8151,0.17755), 
                    Sin(120,f3,2.3596,0.17118) + Sin(120,f4,0.79198,0.1842), 
                    Sin(120,f3,2.3547,0.17139) + Sin(120,f4,3.9192,0.18388), 
                    Sin(120,f3,3.8013,0.15387) + Sin(120,f4,2.5072,0.16169), 
                    Sin(120,f3,0.45659,0.12011) + Sin(120,f4,3.7603,0.15918), 
                    Sin(120,f3,2.1249,0.036961) + Sin(120,f4,2.0795,0.098091), 
                    Sin(120,f3,4.1847,0.0027864) + Sin(120,f4,0.7086,0.015542), 
                    zero,
                    ]   

            opt2_i = Waveform('Opt2_x', p_opt_sim_i)
            opt2_q = Waveform('Opt2_y', p_opt_sim_q)
            opt2_rf = Waveform('Opt2_rf', [Idle(opt2_i.duration)])                    
            
            # rf pi/2 pulse
            Ref_rf = Sin(rf_time2, rf_freq/sampling, 0 ,self.amp_rf2)
            #p['pi2_1_rf + 90'] = Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf)
            
            # readout sequence
            read_mw_i = Waveform('Read_mw_I', pi_2_i)
            read_mw_q = Waveform('Read_mw_Q', pi_2_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('QuantumSim.SEQ')
            
            evo = Waveform('EVO.WFM', Idle(256 * 10))
            self.waves.append(evo)
           
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for t in self.tau:
                # DNP process
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for i in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # nuclear spin pi/2 pulse with different phase and nuclear spin readout pi/2 pulse with phase 0
                
                Ref_rf.phase = t/180.0 * np.pi
                #tp = int( t * sampling / 1.0e9)
                name_i = 'sup_i_%04i.WFM'%t
                name_q = 'sup_q_%04i.WFM'%t
                name_rf = 'sup_rf_%04i.WFM'%t
                
                sup_i = Waveform(name_i,[Idle(2 + Ref_rf.duration)] + p_opt_sim_i + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_q = Waveform(name_q,[Idle(2 + Ref_rf.duration)] + p_opt_sim_q + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_rf = Waveform(name_rf,[zero,Ref_rf,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Sin(Ref_rf.duration, rf_freq/sampling, 0 ,self.amp_rf2),zero])
                #sup_i = Waveform(name_i,[Idle(2 + Ref_rf.duration)]  + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                #sup_q = Waveform(name_q,[Idle(2 + Ref_rf.duration)]  + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                #sup_rf = Waveform(name_rf,[zero,Ref_rf,zero] + [Idle(evo.duration)] + [zero,Sin(Ref_rf.duration, rf_freq/sampling, 0 ,self.amp_rf2),zero])
                
                self.waves.append(sup_i)  
                self.waves.append(sup_q)
                self.waves.append(sup_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                
                
                '''
                t_offset = sup_i.duration
                name_i = 'Read_i_%04i.WFM'%t
                name_q = 'Read_q_%04i.WFM'%t
                name_rf = 'Read_rf_%04i.WFM'%t
                read_i = Waveform(name_i,[Idle(2 + tp)], t_offset)
                read_q = Waveform(name_q, [Idle(2 + tp)], t_offset)
                read_rf = Waveform(name_rf,[zero,Sin(tp, rf_freq/sampling, 0 ,self.amp_rf2),zero], t_offset)
                
                #name = 'Ref_28_01_%04i.SEQ' % t
                #sub_seq=Sequence(name)
                #sub_seq.append(sup_i, sup_q,sup_rf)
                #sub_seq.append(evo,evo,evo,repeat = repeat_1)
                #sub_seq.append(read_i, read_q,read_rf)
                #AWG.upload(sub_seq)

                self.waves.append(read_i)
                self.waves.append(read_q)
                self.waves.append(read_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)
      
                #self.main_seq.append(sub_seq,wait=True)
                
                '''
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)
                '''
                tp = int( t * sampling / 1.0e9)
                drive_x.duration = tp
                drive_y.duration = tp
                #x_name = 'X_RA_%03i.WFM' % t
                #y_name = 'Y_RA_%03i.WFM' % t
                name_i='A3_I_%04i.WFM' %t
                name_q='A3_Q_%04i.WFM' %t
                name_rf='A3_RF_%04i.WFM' %t
                self.waves.append(Waveform(name_i, [zero, drive_x, zero]))
                self.waves.append(Waveform(name_q, [zero, drive_y, zero]))
                self.waves.append(Waveform(name_rf, Idle(tp+2)))
                self.main_seq.append(*self.waves[-3:], wait=True)
                '''

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('QuantumSim.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Rabi.get_set_items + ['freq','freq_2','freq_3','vpp','pi_1','pi_2','rf_freq','rf_time','amp','repetitions']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),  
                                     Item('freq_5', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                      
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-80),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_time2', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='QuantumSim',
                       ) 
class QSim_Ref( Pulsed ):
    # with reference signal
    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841390e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905142e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839233e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902970e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_5 = Range(low=1, high=20e9, value=2.837076e9, desc='frequency second transition [Hz]', label='freq 5 [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2400, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2390, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=0., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=440., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=18., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    amp_rf2 = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time2 = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True) 

    p_opt_i = []
    p_opt_q = []
     
    def _get_sequence_points(self):
        return 2 * len(self.tau) 
    
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        rf_time2 = self.rf_time2
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             # Reference
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 2200 + 3300 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    
             
             # Quantum Simulation
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 2200 + 3300 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

           

             """
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , t +600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append( (['pumping'],  50e3 ))
             sequence.append(([], wait))
             """

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_time2 = int(self.rf_time2 * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Opt pi pulse ms=0 <> ms = +1
            f1 = (self.freq_3 - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            p_opt1_i = [ zero,
            
                    Sin(120,f1,-0.013044,0.00079917) + Sin(120,f2,-0.96712,0.00040776), 
                    Sin(120,f1,-2.6166,0.088594) + Sin(120,f2,-2.1603,0.013963), 
                    Sin(120,f1,0.8615,0.10946) + Sin(120,f2,0.13059,0.023321), 
                    Sin(120,f1,0.78269,0.14916) + Sin(120,f2,2.7421,0.12097), 
                    Sin(120,f1,0.80512,0.14634) + Sin(120,f2,-2.8774,0.1164), 
                    Sin(120,f1,-2.6941,0.11616) + Sin(120,f2,0.78914,0.1621), 
                    Sin(120,f1,0.77884,0.14754) + Sin(120,f2,1.1957,0.12308), 
                    Sin(120,f1,-0.82723,0.14151) + Sin(120,f2,0.18068,0.09943), 
                    Sin(120,f1,-2.1554,0.1263) + Sin(120,f2,2.3564,0.1608), 
                    Sin(120,f1,-0.78403,0.1491) + Sin(120,f2,1.7832,0.094112), 
                    Sin(120,f1,0.78168,0.14844) + Sin(120,f2,-2.0009,0.12604), 
                    Sin(120,f1,-1.0985,0.031866) + Sin(120,f2,-1.5941,0.099413), 
                    Sin(120,f1,-2.1074,0.12163) + Sin(120,f2,2.2827,0.15156), 
                    Sin(120,f1,2.3246,0.057477) + Sin(120,f2,2.3554,0.16196), 
                    Sin(120,f1,2.4061,0.14128) + Sin(120,f2,-2.3298,0.084344), 
                    Sin(120,f1,2.78,0.10846) + Sin(120,f2,2.6549,0.015561), 
                    Sin(120,f1,-1.2179,0.055728) + Sin(120,f2,-0.88459,0.011207), 
                    Sin(120,f1,-0.012679,0.00072051) + Sin(120,f2,-1.9722,0.0019326), 
                    zero,
                   ]
            p_opt1_q = [ zero,
                    Sin(120,f1,1.5578,0.00079917) + Sin(120,f2,0.60368,0.00040776), 
                    Sin(120,f1,-1.0458,0.088594) + Sin(120,f2,-0.58952,0.013963), 
                    Sin(120,f1,2.4323,0.10946) + Sin(120,f2,1.7014,0.023321), 
                    Sin(120,f1,2.3535,0.14916) + Sin(120,f2,4.3129,0.12097), 
                    Sin(120,f1,2.3759,0.14634) + Sin(120,f2,-1.3066,0.1164), 
                    Sin(120,f1,-1.1233,0.11616) + Sin(120,f2,2.3599,0.1621), 
                    Sin(120,f1,2.3496,0.14754) + Sin(120,f2,2.7665,0.12308), 
                    Sin(120,f1,0.74357,0.14151) + Sin(120,f2,1.7515,0.09943), 
                    Sin(120,f1,-0.58456,0.1263) + Sin(120,f2,3.9272,0.1608), 
                    Sin(120,f1,0.78677,0.1491) + Sin(120,f2,3.354,0.094112), 
                    Sin(120,f1,2.3525,0.14844) + Sin(120,f2,-0.43008,0.12604), 
                    Sin(120,f1,0.47227,0.031866) + Sin(120,f2,-0.023254,0.099413), 
                    Sin(120,f1,-0.53662,0.12163) + Sin(120,f2,3.8535,0.15156), 
                    Sin(120,f1,3.8954,0.057477) + Sin(120,f2,3.9262,0.16196), 
                    Sin(120,f1,3.9769,0.14128) + Sin(120,f2,-0.759,0.084344), 
                    Sin(120,f1,4.3508,0.10846) + Sin(120,f2,4.2257,0.015561), 
                    Sin(120,f1,0.35293,0.055728) + Sin(120,f2,0.6862,0.011207), 
                    Sin(120,f1,1.5581,0.00072051) + Sin(120,f2,-0.40139,0.0019326), 
                    zero,
                   ]
                   
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            f3 = (self.freq_5 - self.freq_center) / sampling
            f4 = (self.freq_2 - self.freq_center) / sampling
            
            p_opt_sim_i = [zero,
                    Sin(168,f3,-1.7949,0.0041836) + Sin(168,f4,-1.1965,0.0040036), 
                    Sin(168,f3,1.0039,0.054941) + Sin(168,f4,-2.6031,0.10133), 
                    Sin(168,f3,-0.86464,0.070307) + Sin(168,f4,-0.5013,0.086967), 
                    Sin(168,f3,0.87638,0.13547) + Sin(168,f4,-2.351,0.15818), 
                    Sin(168,f3,-2.8605,0.10892) + Sin(168,f4,1.7339,0.09419), 
                    Sin(168,f3,1.1313,0.099457) + Sin(168,f4,-3.0215,0.11363), 
                    Sin(168,f3,-2.9297,0.10602) + Sin(168,f4,1.5827,0.11405), 
                    Sin(168,f3,-1.2829,0.091182) + Sin(168,f4,0.058724,0.077631), 
                    Sin(168,f3,-2.7659,0.055197) + Sin(168,f4,2.1645,0.080243), 
                    Sin(168,f3,-2.5295,0.0035388) + Sin(168,f4,1.9601,-0.00021244), 
                    zero,
                    ]
            p_opt_sim_q = [zero,
                    Sin(168,f3,-0.22407,0.0041836) + Sin(168,f4,0.37434,0.0040036), 
                    Sin(168,f3,2.5747,0.054941) + Sin(168,f4,-1.0323,0.10133), 
                    Sin(168,f3,0.70615,0.070307) + Sin(168,f4,1.0695,0.086967), 
                    Sin(168,f3,2.4472,0.13547) + Sin(168,f4,-0.78016,0.15818), 
                    Sin(168,f3,-1.2897,0.10892) + Sin(168,f4,3.3047,0.09419), 
                    Sin(168,f3,2.702,0.099457) + Sin(168,f4,-1.4507,0.11363), 
                    Sin(168,f3,-1.3589,0.10602) + Sin(168,f4,3.1535,0.11405), 
                    Sin(168,f3,0.28785,0.091182) + Sin(168,f4,1.6295,0.077631), 
                    Sin(168,f3,-1.1951,0.055197) + Sin(168,f4,3.7353,0.080243), 
                    Sin(168,f3,-0.9587,0.0035388) + Sin(168,f4,3.5309,-0.00021244), 
                    zero,
                    ]
                  
            '''         
            p_opt_sim_i = [zero,        
                    Sin(120,f3,1.4466,0.00090791) + Sin(120,f4,1.5132,-0.00066944), 
                    Sin(120,f3,2.2208,0.043431) + Sin(120,f4,-0.015842,0.017236), 
                    Sin(120,f3,-2.7855,0.075817) + Sin(120,f4,-0.52313,0.14718), 
                    Sin(120,f3,-2.3376,0.17853) + Sin(120,f4,0.48671,0.16606), 
                    Sin(120,f3,-0.789,0.20049) + Sin(120,f4,-0.78314,0.21779), 
                    Sin(120,f3,-2.4378,0.15849) + Sin(120,f4,2.3548,0.21914), 
                    Sin(120,f3,-1.0563,0.15001) + Sin(120,f4,0.92824,0.080848), 
                    Sin(120,f3,2.1081,0.1642) + Sin(120,f4,2.1287,0.18086), 
                    Sin(120,f3,-0.27463,0.080892) + Sin(120,f4,-0.24323,0.13842), 
                    Sin(120,f3,-2.7543,0.15348) + Sin(120,f4,1.9828,0.15975), 
                    Sin(120,f3,-2.9274,0.1269) + Sin(120,f4,-2.3488,0.21264), 
                    Sin(120,f3,-2.5595,0.16238) + Sin(120,f4,-1.7221,0.14178), 
                    Sin(120,f3,0.67421,0.16987) + Sin(120,f4,-2.1227,0.18259), 
                    Sin(120,f3,-2.3552,0.20056) + Sin(120,f4,2.2466,0.17062), 
                    Sin(120,f3,-0.77076,0.19808) + Sin(120,f4,-0.79029,0.21835), 
                    Sin(120,f3,-2.1294,0.099091) + Sin(120,f4,2.8526,0.078397), 
                    Sin(120,f3,-0.43345,0.038518) + Sin(120,f4,2.7005,0.019367), 
                    Sin(120,f3,1.4502,0.00089071) + Sin(120,f4,2.8482,-0.00027112), 
                    zero,
                    ]
            p_opt_sim_q = [zero,
                    Sin(120,f3,3.0174,0.00090791) + Sin(120,f4,3.084,-0.00066944), 
                    Sin(120,f3,3.7916,0.043431) + Sin(120,f4,1.555,0.017236), 
                    Sin(120,f3,-1.2147,0.075817) + Sin(120,f4,1.0477,0.14718), 
                    Sin(120,f3,-0.76678,0.17853) + Sin(120,f4,2.0575,0.16606), 
                    Sin(120,f3,0.78179,0.20049) + Sin(120,f4,0.78766,0.21779), 
                    Sin(120,f3,-0.86704,0.15849) + Sin(120,f4,3.9256,0.21914), 
                    Sin(120,f3,0.51451,0.15001) + Sin(120,f4,2.499,0.080848), 
                    Sin(120,f3,3.6789,0.1642) + Sin(120,f4,3.6995,0.18086), 
                    Sin(120,f3,1.2962,0.080892) + Sin(120,f4,1.3276,0.13842), 
                    Sin(120,f3,-1.1835,0.15348) + Sin(120,f4,3.5536,0.15975), 
                    Sin(120,f3,-1.3566,0.1269) + Sin(120,f4,-0.77803,0.21264), 
                    Sin(120,f3,-0.98867,0.16238) + Sin(120,f4,-0.15126,0.14178), 
                    Sin(120,f3,2.245,0.16987) + Sin(120,f4,-0.55191,0.18259), 
                    Sin(120,f3,-0.78445,0.20056) + Sin(120,f4,3.8174,0.17062), 
                    Sin(120,f3,0.80004,0.19808) + Sin(120,f4,0.7805,0.21835), 
                    Sin(120,f3,-0.55862,0.099091) + Sin(120,f4,4.4234,0.078397), 
                    Sin(120,f3,1.1373,0.038518) + Sin(120,f4,4.2713,0.019367), 
                    Sin(120,f3,3.021,0.00089071) + Sin(120,f4,4.419,-0.00027112), 
                    zero,
                    ]   
             '''       
            #self.p_opt_i = p_opt_sim_i
            #self.p_opt_q = p_opt_sim_q
            
            opt2_i = Waveform('Opt2_x', self.p_opt_i)
            opt2_q = Waveform('Opt2_y', self.p_opt_q)
            opt2_rf = Waveform('Opt2_rf', [Idle(opt2_i.duration)])                    
            
            # rf pi/2 pulse
            Ref_rf = Sin(rf_time2, rf_freq/sampling, 0 ,self.amp_rf2)
            #p['pi2_1_rf + 90'] = Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf)
            
            # readout sequence
            read_mw_i = Waveform('Read_mw_I', pi_2_i)
            read_mw_q = Waveform('Read_mw_Q', pi_2_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('QuantumSim_ref.SEQ')
            
            evo = Waveform('EVO.WFM', Idle(256 * 10))
            self.waves.append(evo)
           
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for t in self.tau:
                # Reference Signal
                # DNP process
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for i in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # nuclear spin pi/2 pulse with different phase and nuclear spin readout pi/2 pulse with phase 0
                Ref_rf.phase = t/180.0 * np.pi
                #tp = int( t * sampling / 1.0e9)
                name_i = 'ref_sup_i_%04i.WFM'%t
                name_q = 'ref_sup_q_%04i.WFM'%t
                name_rf = 'ref_sup_rf_%04i.WFM'%t
                
                sup_i = Waveform(name_i,[Idle(2 + Ref_rf.duration)]  + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_q = Waveform(name_q,[Idle(2 + Ref_rf.duration)]  + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_rf = Waveform(name_rf,[zero,Ref_rf,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Sin(Ref_rf.duration, rf_freq/sampling, 0 ,self.amp_rf2),zero])
                
                self.waves.append(sup_i)  
                self.waves.append(sup_q)
                self.waves.append(sup_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                # Quantum Simulation Signal
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for i in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # nuclear spin pi/2 pulse with different phase and nuclear spin readout pi/2 pulse with phase 0
                #Ref_rf.phase = t/180.0 * np.pi - 24.0/180 * np.pi
                #tp = int( t * sampling / 1.0e9)
                Ref_rf.phase = t/180.0 * np.pi + self.phase/180.0 * np.pi
                name_i = 'qs_sup_i_%04i.WFM'%t
                name_q = 'qs_sup_q_%04i.WFM'%t
                name_rf = 'qs_sup_rf_%04i.WFM'%t
                
                sup_i = Waveform(name_i,[Idle(2 + Ref_rf.duration)] + self.p_opt_i + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_q = Waveform(name_q,[Idle(2 + Ref_rf.duration)] + self.p_opt_q + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_rf = Waveform(name_rf,[zero,Ref_rf,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Sin(Ref_rf.duration, rf_freq/sampling, 0 ,self.amp_rf2),zero])
                
                self.waves.append(sup_i)  
                self.waves.append(sup_q)
                self.waves.append(sup_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('QuantumSim_ref.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','freq_5','vpp','amp_mw','amp_mw2','pi_1','pi_2','rf_freq','rf_time','rf_time2','amp_rf','amp_rf2','repetitions',
    'pumping_time','wait_time_pump','polaring_time','wait_time_pol']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),  
                                     Item('freq_5', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                      
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-80),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_time2', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='QuantumSim_Ref',
                       )        

class QSim_FFT_ground( Pulsed ):
    # with reference signal
    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841390e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905142e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839233e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902970e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_5 = Range(low=1, high=20e9, value=2.837076e9, desc='frequency second transition [Hz]', label='freq 5 [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2400, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2390, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=1., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=128., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=1., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    amp_rf2 = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time2 = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True) 

    p_opt_i = []
    p_opt_q = []
     
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        rf_time2 = self.rf_time2
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             # Quantum Simulation
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 2200 + 3300 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_time2 = int(self.rf_time2 * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Opt pi pulse ms=0 <> ms = +1
            f1 = (self.freq_3 - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            p_opt1_i = [ zero,
            
                    Sin(120,f1,-0.013044,0.00079917) + Sin(120,f2,-0.96712,0.00040776), 
                    Sin(120,f1,-2.6166,0.088594) + Sin(120,f2,-2.1603,0.013963), 
                    Sin(120,f1,0.8615,0.10946) + Sin(120,f2,0.13059,0.023321), 
                    Sin(120,f1,0.78269,0.14916) + Sin(120,f2,2.7421,0.12097), 
                    Sin(120,f1,0.80512,0.14634) + Sin(120,f2,-2.8774,0.1164), 
                    Sin(120,f1,-2.6941,0.11616) + Sin(120,f2,0.78914,0.1621), 
                    Sin(120,f1,0.77884,0.14754) + Sin(120,f2,1.1957,0.12308), 
                    Sin(120,f1,-0.82723,0.14151) + Sin(120,f2,0.18068,0.09943), 
                    Sin(120,f1,-2.1554,0.1263) + Sin(120,f2,2.3564,0.1608), 
                    Sin(120,f1,-0.78403,0.1491) + Sin(120,f2,1.7832,0.094112), 
                    Sin(120,f1,0.78168,0.14844) + Sin(120,f2,-2.0009,0.12604), 
                    Sin(120,f1,-1.0985,0.031866) + Sin(120,f2,-1.5941,0.099413), 
                    Sin(120,f1,-2.1074,0.12163) + Sin(120,f2,2.2827,0.15156), 
                    Sin(120,f1,2.3246,0.057477) + Sin(120,f2,2.3554,0.16196), 
                    Sin(120,f1,2.4061,0.14128) + Sin(120,f2,-2.3298,0.084344), 
                    Sin(120,f1,2.78,0.10846) + Sin(120,f2,2.6549,0.015561), 
                    Sin(120,f1,-1.2179,0.055728) + Sin(120,f2,-0.88459,0.011207), 
                    Sin(120,f1,-0.012679,0.00072051) + Sin(120,f2,-1.9722,0.0019326), 
                    zero,
                   ]
            p_opt1_q = [ zero,
                    Sin(120,f1,1.5578,0.00079917) + Sin(120,f2,0.60368,0.00040776), 
                    Sin(120,f1,-1.0458,0.088594) + Sin(120,f2,-0.58952,0.013963), 
                    Sin(120,f1,2.4323,0.10946) + Sin(120,f2,1.7014,0.023321), 
                    Sin(120,f1,2.3535,0.14916) + Sin(120,f2,4.3129,0.12097), 
                    Sin(120,f1,2.3759,0.14634) + Sin(120,f2,-1.3066,0.1164), 
                    Sin(120,f1,-1.1233,0.11616) + Sin(120,f2,2.3599,0.1621), 
                    Sin(120,f1,2.3496,0.14754) + Sin(120,f2,2.7665,0.12308), 
                    Sin(120,f1,0.74357,0.14151) + Sin(120,f2,1.7515,0.09943), 
                    Sin(120,f1,-0.58456,0.1263) + Sin(120,f2,3.9272,0.1608), 
                    Sin(120,f1,0.78677,0.1491) + Sin(120,f2,3.354,0.094112), 
                    Sin(120,f1,2.3525,0.14844) + Sin(120,f2,-0.43008,0.12604), 
                    Sin(120,f1,0.47227,0.031866) + Sin(120,f2,-0.023254,0.099413), 
                    Sin(120,f1,-0.53662,0.12163) + Sin(120,f2,3.8535,0.15156), 
                    Sin(120,f1,3.8954,0.057477) + Sin(120,f2,3.9262,0.16196), 
                    Sin(120,f1,3.9769,0.14128) + Sin(120,f2,-0.759,0.084344), 
                    Sin(120,f1,4.3508,0.10846) + Sin(120,f2,4.2257,0.015561), 
                    Sin(120,f1,0.35293,0.055728) + Sin(120,f2,0.6862,0.011207), 
                    Sin(120,f1,1.5581,0.00072051) + Sin(120,f2,-0.40139,0.0019326), 
                    zero,
                   ]
                   
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            f3 = (self.freq_5 - self.freq_center) / sampling
            f4 = (self.freq_2 - self.freq_center) / sampling
            p_opt_sim_i = []
            p_opt_sim_q = []
            
            #file = 'D:/data/QuantumSim/luck2/QuantumSim/excited state/R-' + "%1.0f"%(18)
            #datfile = file + '/pulse_' + "%1.0f"%(18) + 'step_8_Ite-' +  "%1.0f"%(1) + 'all.dat'
            #fileHandle = open (datfile) 
            #read the cotend of the file
            #datfilelines=fileHandle.read()
            #exec datfilelines 
            #fileHandle.close() 
            #self.p_opt_i = p_opt_sim_i
            #self.p_opt_q = p_opt_sim_q
            
            # rf pi/2 pulse
            Ref_rf = Sin(rf_time2, rf_freq/sampling, 0 ,self.amp_rf2)
            #p['pi2_1_rf + 90'] = Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf)
            
            # readout sequence
            read_mw_i = Waveform('Read_mw_I', pi_2_i)
            read_mw_q = Waveform('Read_mw_Q', pi_2_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('QuantumSim_FFT.SEQ')
            
            evo = Waveform('EVO.WFM', Idle(256 * 10))
            self.waves.append(evo)
           
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for i, t in enumerate(self.tau):              
                # Quantum Simulation Signal
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for q in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # nuclear spin pi/2 pulse with different phase and nuclear spin readout pi/2 pulse with phase 0
                
                opt2_i = Waveform('Opt2_x', self.p_opt_i[i])
                opt2_q = Waveform('Opt2_y', self.p_opt_q[i])
                opt2_rf = Waveform('Opt2_rf', [Idle(opt2_i.duration)])
                
                name_i = 'qs_sup_i_%04i.WFM'%t
                name_q = 'qs_sup_q_%04i.WFM'%t
                name_rf = 'qs_sup_rf_%04i.WFM'%t
                
                sup_i = Waveform(name_i,[Idle(2 + Ref_rf.duration)] + self.p_opt_i[i] + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_q = Waveform(name_q,[Idle(2 + Ref_rf.duration)] + self.p_opt_q[i] + [Idle(evo.duration)] + [Idle(2 + Ref_rf.duration)])
                sup_rf = Waveform(name_rf,[zero,Ref_rf,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Ref_rf,zero])
                
                self.waves.append(sup_i)  
                self.waves.append(sup_q)
                self.waves.append(sup_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('QuantumSim_FFT.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','freq_5','vpp','amp_mw','amp_mw2','pi_1','pi_2','rf_freq','rf_time','rf_time2','amp_rf','amp_rf2','repetitions',
    'pumping_time','wait_time_pump','polaring_time','wait_time_pol']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),  
                                     Item('freq_5', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                      
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-80),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_time2', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='QuantumSim_FFT_ground',
                       )

class QSim_FFT_excited( Pulsed ):
    # with reference signal
    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841415e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905136e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839249e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902969e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_5 = Range(low=1, high=20e9, value=2.837074e9, desc='frequency second transition [Hz]', label='freq 5 [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2400, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2390, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=1., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=128., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=1., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='DNP rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    rf_freq2 = Range(low=1, high=20e9, value=7.113e6, desc='frequency rf [Hz]', label='QSim rf freq [Hz]', mode='text', auto_set=False, enter_set=True)  
    amp_rf2 = Range(low=0., high=1.0, value=0.18, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time2 = Range(low=1., high=200000., value=8.3e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    rf_freq3 = Range(low=1, high=20e9, value=4.943e6, desc='frequency rf [Hz]', label='QSim rf freq [Hz]', mode='text', auto_set=False, enter_set=True)  
    amp_rf3 = Range(low=0., high=1.0, value=0.155, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    #rf_time3 = Range(low=1., high=200000., value=6.44e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True) 

    p_opt_i = []
    p_opt_q = []
     
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_time = self.rf_time
        rf_time2 = self.rf_time2
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             # Quantum Simulation
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 1552 + 1680 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    

        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_freq2 = self.rf_freq2
            rf_time2 = int(self.rf_time2 * sampling/1.0e9)
            rf_freq3 = self.rf_freq3
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            pi_2_1 = int(self.pi_1 /2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            p['pi1 - 0']     = Sin( pi_1, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi1 - 90']    = Sin( pi_1, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi2 - 0']     = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi2 - 90']    = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            pi_3_i = [zero,p['pi1 - 0'],zero]
            pi_3_q = [zero,p['pi1 - 90'],zero]
            #pi_3_i = [zero,p['pi1 - 0'] + p['pi2 - 0'],zero]
            #pi_3_q = [zero,p['pi1 - 90'] + p['pi2 - 90'],zero]
            
            f1 = (self.freq_3 - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            f3 = (self.freq_5 - self.freq_center) / sampling
            f4 = (self.freq_2 - self.freq_center) / sampling
            
            # pi/2 pulse ms=0 <> ms = -1 for mi = -1 and mi = 0
            
            pi_2_1_i = [zero,
                     Sin(168,f3,-1.2613,0.0077805) + Sin(168,f4,-2.9567,0.002416), 
                     Sin(168,f3,2.5338,0.011241) + Sin(168,f4,0.38006,0.02598), 
                     Sin(168,f3,1.2495,0.030019) + Sin(168,f4,-0.72099,0.052558), 
                     Sin(168,f3,-2.1134,0.15556) + Sin(168,f4,-3.0987,0.071912), 
                     Sin(168,f3,-0.94334,0.13603) + Sin(168,f4,0.68577,0.18745), 
                     Sin(168,f3,-2.518,0.17306) + Sin(168,f4,-2.9577,0.15361), 
                     Sin(168,f3,0.85759,0.10776) + Sin(168,f4,-0.089517,0.13205), 
                     Sin(168,f3,2.0193,0.078404) + Sin(168,f4,-2.2935,0.046553), 
                     Sin(168,f3,1.1135,0.021934) + Sin(168,f4,-2.3959,0.063617), 
                     Sin(168,f3,-1.9831,0.0075863) + Sin(168,f4,2.1965,0.0025138),
                     zero,
                     ]
            pi_2_1_q = [zero,
                     Sin(168,f3,0.30949,0.0077805) + Sin(168,f4,-1.3859,0.002416), 
                     Sin(168,f3,4.1046,0.011241) + Sin(168,f4,1.9509,0.02598), 
                     Sin(168,f3,2.8202,0.030019) + Sin(168,f4,0.84981,0.052558), 
                     Sin(168,f3,-0.54262,0.15556) + Sin(168,f4,-1.5279,0.071912), 
                     Sin(168,f3,0.62745,0.13603) + Sin(168,f4,2.2566,0.18745), 
                     Sin(168,f3,-0.94724,0.17306) + Sin(168,f4,-1.3869,0.15361), 
                     Sin(168,f3,2.4284,0.10776) + Sin(168,f4,1.4813,0.13205), 
                     Sin(168,f3,3.5901,0.078404) + Sin(168,f4,-0.72272,0.046553), 
                     Sin(168,f3,2.6843,0.021934) + Sin(168,f4,-0.82512,0.063617), 
                     Sin(168,f3,-0.41229,0.0075863) + Sin(168,f4,3.7673,0.0025138),
                     zero,
                     ]  
                    
            
            # Opt pi pulse ms=0 <> ms = -1

            p_opt1_i = [ zero,
                     Sin(120,f1,1.6156,0.0026247) + Sin(120,f2,-2.9424,0.0011421), 
                     Sin(120,f1,1.2334,0.013977) + Sin(120,f2,-1.3217,0.06536), 
                     Sin(120,f1,-1.8261,0.041548) + Sin(120,f2,0.93775,0.13741), 
                     Sin(120,f1,-2.357,0.14799) + Sin(120,f2,0.77664,0.16076), 
                     Sin(120,f1,-2.3574,0.14913) + Sin(120,f2,-1.3343,0.11817), 
                     Sin(120,f1,-0.84043,0.13781) + Sin(120,f2,-0.78244,0.16091), 
                     Sin(120,f1,2.2415,0.13468) + Sin(120,f2,-0.7042,0.15075), 
                     Sin(120,f1,0.78855,0.14741) + Sin(120,f2,-2.3489,0.16085), 
                     Sin(120,f1,-1.6082,0.10486) + Sin(120,f2,1.9134,0.028985), 
                     Sin(120,f1,-1.1132,0.11728) + Sin(120,f2,0.78164,0.16193), 
                     Sin(120,f1,0.44861,0.11478) + Sin(120,f2,2.7283,0.11182), 
                     Sin(120,f1,0.8833,0.13589) + Sin(120,f2,2.8395,0.12005), 
                     Sin(120,f1,-0.93885,0.11711) + Sin(120,f2,1.5262,0.11372), 
                     Sin(120,f1,-1.9207,0.11032) + Sin(120,f2,-3.0049,0.11402), 
                     Sin(120,f1,2.3442,0.12255) + Sin(120,f2,-2.3596,0.16203), 
                     Sin(120,f1,-1.9799,0.048286) + Sin(120,f2,1.7361,0.049548), 
                     Sin(120,f1,1.1044,0.0054525) + Sin(120,f2,1.26,0.069315), 
                     Sin(120,f1,1.3849,0.00053443) + Sin(120,f2,0.59238,0.00036571),
                     zero,
                   ]
            p_opt1_q = [ zero,
                     Sin(120,f1,3.1864,0.0026247) + Sin(120,f2,-1.3717,0.0011421), 
                     Sin(120,f1,2.8042,0.013977) + Sin(120,f2,0.24905,0.06536), 
                     Sin(120,f1,-0.25532,0.041548) + Sin(120,f2,2.5085,0.13741), 
                     Sin(120,f1,-0.7862,0.14799) + Sin(120,f2,2.3474,0.16076), 
                     Sin(120,f1,-0.78665,0.14913) + Sin(120,f2,0.23654,0.11817), 
                     Sin(120,f1,0.73037,0.13781) + Sin(120,f2,0.78835,0.16091), 
                     Sin(120,f1,3.8123,0.13468) + Sin(120,f2,0.8666,0.15075), 
                     Sin(120,f1,2.3593,0.14741) + Sin(120,f2,-0.77805,0.16085), 
                     Sin(120,f1,-0.03738,0.10486) + Sin(120,f2,3.4842,0.028985), 
                     Sin(120,f1,0.45762,0.11728) + Sin(120,f2,2.3524,0.16193), 
                     Sin(120,f1,2.0194,0.11478) + Sin(120,f2,4.2991,0.11182), 
                     Sin(120,f1,2.4541,0.13589) + Sin(120,f2,4.4103,0.12005), 
                     Sin(120,f1,0.63194,0.11711) + Sin(120,f2,3.097,0.11372), 
                     Sin(120,f1,-0.34987,0.11032) + Sin(120,f2,-1.4341,0.11402), 
                     Sin(120,f1,3.915,0.12255) + Sin(120,f2,-0.78877,0.16203), 
                     Sin(120,f1,-0.40914,0.048286) + Sin(120,f2,3.3069,0.049548), 
                     Sin(120,f1,2.6752,0.0054525) + Sin(120,f2,2.8308,0.069315), 
                     Sin(120,f1,2.9557,0.00053443) + Sin(120,f2,2.1632,0.00036571), 
                     zero,
                   ]
                   
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            
            p_opt_sim_i = []
            p_opt_sim_q = []
            
                    
            '''
            datfile = '/Users/nyxu/Downloads/pulse_18step_8_Ite-2_time-0.5.dat'
            fileHandle = open (datfile) 
            #read the cotend of the file
            datfilelines=fileHandle.read()
            exec datfilelines 
            fileHandle.close() 

            self.p_opt_i = p_opt_sim_i
            self.p_opt_q = p_opt_sim_q
            '''
            
            #pi_2_1_i = Sin( pi_2_1, f1,      0  ,self.amp_mw) + Sin( pi_2_1, f3,       0 ,self.amp_mw)
            #pi_2_1_q = Sin( pi_2_1, f1, np.pi/2 ,self.amp_mw) + Sin( pi_2_1, f3, np.pi/2 ,self.amp_mw)
            pi_2_1_i = Sin(24, f3,      0  ,1) 
            pi_2_1_q = Sin(24, f3, np.pi/2 ,1)
            # rf pi/2 pulse
            Rf_pre = Sin(rf_time2, rf_freq2/sampling, 0 ,self.amp_rf2)
            Rf_read = Sin(rf_time2, rf_freq2/sampling, 0 ,self.amp_rf2) + Sin(rf_time2, rf_freq3/sampling, 0 ,self.amp_rf3) + Sin(rf_time2, rf_freq/sampling, 0 ,self.amp_rf/2)
            #p['pi2_1_rf + 90'] = Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf)
            

            # readout sequence
            read_mw_i = Waveform('Read_mw_I', pi_3_i)
            read_mw_q = Waveform('Read_mw_Q', pi_3_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('QuantumSim_FFT.SEQ')
            
            evo = Waveform('EVO.WFM', Idle(256 * 4))
            self.waves.append(evo)
           
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for i, t in enumerate(self.tau):              
                # Quantum Simulation Signal
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for q in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # first: nuclear spin pi/2 pulse and pi/2 pulse on electron spin,
                # then: optimal pulse on electron spin to do simulation
                # Finally: two nuclear spin pi/2 pulse and electron spin pi pulse to readout
                
                opt2_i = Waveform('Opt2_x', self.p_opt_i[i])
                opt2_q = Waveform('Opt2_y', self.p_opt_q[i])
                opt2_rf = Waveform('Opt2_rf', [Idle(opt2_i.duration)])
                
                opt3_i = Waveform('Opt3_x', pi_2_1_i)
                
                name_i = 'qs_sup_i_%04i.WFM'%t
                name_q = 'qs_sup_q_%04i.WFM'%t
                name_rf = 'qs_sup_rf_%04i.WFM'%t
                
                #sup_i = Waveform(name_i,  [Idle(2 + Rf_pre.duration)] + [zero,pi_2_1_i,zero]  + [Idle(500)]       + self.p_opt_i[i] + [Idle(evo.duration)] + [Idle(2 + Rf_pre.duration)])
                #sup_q = Waveform(name_q,  [Idle(2 + Rf_pre.duration)] + [zero,pi_2_1_q,zero]  + [Idle(500)]       + self.p_opt_q[i] + [Idle(evo.duration)] + [Idle(2 + Rf_pre.duration)])
                #sup_rf = Waveform(name_rf,[zero,Rf_pre,zero]          + [Idle(opt3_i.duration+2)]  + [Idle(500)]+ [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Rf_pre,zero])
                sup_i = Waveform(name_i,[Idle(2 + Rf_pre.duration)]  + self.p_opt_i[i] + [Idle(evo.duration)] + [Idle(2 + Rf_pre.duration)])
                sup_q = Waveform(name_q,[Idle(2 + Rf_pre.duration)]  + self.p_opt_q[i] + [Idle(evo.duration)] + [Idle(2 + Rf_pre.duration)])
                sup_rf = Waveform(name_rf,[zero,Rf_pre,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Rf_pre,zero])
                
                self.waves.append(sup_i)  
                self.waves.append(sup_q)
                self.waves.append(sup_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('QuantumSim_FFT.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','freq_5','vpp','amp_mw','amp_mw2','pi_1','pi_2','rf_freq','rf_time','rf_time2','amp_rf','amp_rf2','repetitions',
    'pumping_time','wait_time_pump','polaring_time','wait_time_pol']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),  
                                     Item('freq_5', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                      
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-70),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-60), 
                                    ),   
                              HGroup( 
                                      Item('rf_freq2', width=-70),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_time2', width=-60),
                                      Item('rf_freq3', width=-70),
                                      Item('amp_rf3', width=-40),
                                    ),                                        
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='QuantumSim_FFT_excited',
                       )              

class QSim_FFT_phase_ground( Pulsed ):
    # with reference signal
    #def __init__(self):
        #super(Double_RF_Rabi,self).__init__()
        
    reload = True
    
    freq = Range(low=1, high=20e9, value=2.841390e9, desc='frequency first transition [Hz]', label='freq 1 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2.905142e9, desc='frequency second transition [Hz]', label='freq 2 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_3 = Range(low=1, high=20e9, value=2.839233e9, desc='frequency second transition [Hz]', label='freq 3 [Hz]', mode='text', auto_set=False, enter_set=True)   
    freq_4 = Range(low=1, high=20e9, value=2.902970e9, desc='frequency second transition [Hz]', label='freq 4 [Hz]', mode='text', auto_set=False, enter_set=True)
    freq_5 = Range(low=1, high=20e9, value=2.837076e9, desc='frequency second transition [Hz]', label='freq 5 [Hz]', mode='text', auto_set=False, enter_set=True)     
    vpp = Range(low=0., high=4.5, value=0.6, desc='Amplitude of AWG [Vpp]', label='AWG vpp', mode='text', auto_set=False, enter_set=True) 
    pi_1   = Range(low=1., high=100000., value=2400, desc='length of first pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_2   = Range(low=1., high=100000., value=2390, desc='length of second pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    amp_mw = Range(low=0., high=1.0, value=0.015, desc='Normalized amplitude of waveform', label='tr1 amp', mode='text', auto_set=False, enter_set=True)
    amp_mw2 = Range(low=0., high=1.0, value=0.017, desc='Normalized amplitude of waveform', label='tr2 amp', mode='text', auto_set=False, enter_set=True)
   # pi_3   = Range(low=1., high=100000., value=42, desc='length of second pi pulse [ns] second transition', label='pi [ns] 3.trans', mode='text', auto_set=False, enter_set=True)
   
    power = Range(low=-100., high=25., value=10, desc='power [dBm]', label='power [dBm]', mode='text', auto_set=False, enter_set=True)
    
    tau_begin = Range(low=0., high=1e7, value=1., desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_end = Range(low=1., high=2e8, value=128., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    tau_delta = Range(low=1., high=1e6, value=1., desc='time step [ns]', label='time step [ns]', mode='text', auto_set=False, enter_set=True)
    
    rf_freq = Range(low=1, high=20e9, value=2.78e6, desc='frequency rf [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    amp_rf = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='DNP rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='DNP rf time', mode='text', auto_set=False, enter_set=True)
    amp_rf2 = Range(low=0., high=1.0, value=0.2, desc='Normalized amplitude of waveform', label='QSim rf amp', mode='text', auto_set=False, enter_set=True)
    rf_time2 = Range(low=1., high=200000., value=7.9e3, desc='rf_time', label='QSim rf time', mode='text', auto_set=False, enter_set=True)
    
    repetitions = Range(low=1 , high=10 , value=2, desc='repetition of pumping sequence', label='pumping repet', mode='text', auto_set=False, enter_set=True)

    pumping_time = Range(low=0., high=5.e6, value=150, desc='laser time for depolarization of electron spin', label='pumping time', mode='text', auto_set=False, enter_set=True)    
    polaring_time = Range(low=1.e3, high=5.e6, value=10.e3, desc='laser time for depolarization of nuclear spin', label='polaring time', mode='text', auto_set=False, enter_set=True) 
    wait_time_pol = Range(low=1.e3, high=5.e6, value=30.e3, desc='wait time after depolarization', label='wait time', mode='text', auto_set=False, enter_set=True)     
    wait_time_pump = Range(low=1.e1, high=5.e6, value=5.e3, desc='wait time after pump', label='wait_time_pump', mode='text', auto_set=False, enter_set=True) 

    p_opt_i = []
    p_opt_q = []
    
     
    def generate_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi_2=self.pi_2
        rf_freq = self.rf_freq
        rf_time = self.rf_time
        rf_time2 = self.rf_time2
        repetitions = self.repetitions
        wait_time_pump = self.wait_time_pump
        wait_time_pol = self.wait_time_pol
        pumping_time = self.pumping_time
        polaring_time = self.polaring_time
        sequence = []
        #for i in range(repetitions):
        
        for t in tau:
             # Quantum Simulation
             sequence.append( (['pumping'],  polaring_time ))
             sequence.append(([], wait_time_pol))
             # DNP process
             for i in range(repetitions):
                 sequence.append((['awgTrigger'], 100  ))
                 sequence.append(([], 2 * pi_1 + rf_time + 2000 ))
                 #sequence.append( (['pumping'], t ))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
                 sequence.append( (['pumping'], pumping_time ))
                 sequence.append(([], wait_time_pump))
             # Opt pi pulse on electron spin    
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2300 ) )  
             sequence.append( (['awgTrigger']      , 100) )
             sequence.append( ([ ]                 , 2 * rf_time2 + 5500 ) )              
             sequence.append( (['awgTrigger'] , 100) )
             sequence.append( ([ ]          , pi_2 + 600) )
             sequence.append( (['laser', 'trigger' ], laser ))
             sequence.append(([], wait))    
             
        return sequence

        
    
    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            rf_time = int(self.rf_time * sampling/1.0e9)
            rf_time2 = int(self.rf_time2 * sampling/1.0e9)
            repetitions = self.repetitions
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            pi_2 = int(self.pi_2 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,self.amp_mw)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            p['pi - 0']     = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, 0 ,self.amp_mw2)
            p['pi - 90']    = Sin( pi_2, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw2)
            
            drive_x = Sin(0, (self.freq_5 - self.freq_center)/sampling, 0 ,self.amp_mw)
            drive_y = Sin(0, (self.freq_5 - self.freq_center)/sampling, np.pi/2 ,self.amp_mw)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Opt pi pulse ms=0 <> ms = +1
            f1 = (self.freq_3 - self.freq_center) / sampling
            f2 = (self.freq_4 - self.freq_center) / sampling
            p_opt1_i = [ zero,
            
                    Sin(120,f1,-0.013044,0.00079917) + Sin(120,f2,-0.96712,0.00040776), 
                    Sin(120,f1,-2.6166,0.088594) + Sin(120,f2,-2.1603,0.013963), 
                    Sin(120,f1,0.8615,0.10946) + Sin(120,f2,0.13059,0.023321), 
                    Sin(120,f1,0.78269,0.14916) + Sin(120,f2,2.7421,0.12097), 
                    Sin(120,f1,0.80512,0.14634) + Sin(120,f2,-2.8774,0.1164), 
                    Sin(120,f1,-2.6941,0.11616) + Sin(120,f2,0.78914,0.1621), 
                    Sin(120,f1,0.77884,0.14754) + Sin(120,f2,1.1957,0.12308), 
                    Sin(120,f1,-0.82723,0.14151) + Sin(120,f2,0.18068,0.09943), 
                    Sin(120,f1,-2.1554,0.1263) + Sin(120,f2,2.3564,0.1608), 
                    Sin(120,f1,-0.78403,0.1491) + Sin(120,f2,1.7832,0.094112), 
                    Sin(120,f1,0.78168,0.14844) + Sin(120,f2,-2.0009,0.12604), 
                    Sin(120,f1,-1.0985,0.031866) + Sin(120,f2,-1.5941,0.099413), 
                    Sin(120,f1,-2.1074,0.12163) + Sin(120,f2,2.2827,0.15156), 
                    Sin(120,f1,2.3246,0.057477) + Sin(120,f2,2.3554,0.16196), 
                    Sin(120,f1,2.4061,0.14128) + Sin(120,f2,-2.3298,0.084344), 
                    Sin(120,f1,2.78,0.10846) + Sin(120,f2,2.6549,0.015561), 
                    Sin(120,f1,-1.2179,0.055728) + Sin(120,f2,-0.88459,0.011207), 
                    Sin(120,f1,-0.012679,0.00072051) + Sin(120,f2,-1.9722,0.0019326), 
                    zero,
                   ]
            p_opt1_q = [ zero,
                    Sin(120,f1,1.5578,0.00079917) + Sin(120,f2,0.60368,0.00040776), 
                    Sin(120,f1,-1.0458,0.088594) + Sin(120,f2,-0.58952,0.013963), 
                    Sin(120,f1,2.4323,0.10946) + Sin(120,f2,1.7014,0.023321), 
                    Sin(120,f1,2.3535,0.14916) + Sin(120,f2,4.3129,0.12097), 
                    Sin(120,f1,2.3759,0.14634) + Sin(120,f2,-1.3066,0.1164), 
                    Sin(120,f1,-1.1233,0.11616) + Sin(120,f2,2.3599,0.1621), 
                    Sin(120,f1,2.3496,0.14754) + Sin(120,f2,2.7665,0.12308), 
                    Sin(120,f1,0.74357,0.14151) + Sin(120,f2,1.7515,0.09943), 
                    Sin(120,f1,-0.58456,0.1263) + Sin(120,f2,3.9272,0.1608), 
                    Sin(120,f1,0.78677,0.1491) + Sin(120,f2,3.354,0.094112), 
                    Sin(120,f1,2.3525,0.14844) + Sin(120,f2,-0.43008,0.12604), 
                    Sin(120,f1,0.47227,0.031866) + Sin(120,f2,-0.023254,0.099413), 
                    Sin(120,f1,-0.53662,0.12163) + Sin(120,f2,3.8535,0.15156), 
                    Sin(120,f1,3.8954,0.057477) + Sin(120,f2,3.9262,0.16196), 
                    Sin(120,f1,3.9769,0.14128) + Sin(120,f2,-0.759,0.084344), 
                    Sin(120,f1,4.3508,0.10846) + Sin(120,f2,4.2257,0.015561), 
                    Sin(120,f1,0.35293,0.055728) + Sin(120,f2,0.6862,0.011207), 
                    Sin(120,f1,1.5581,0.00072051) + Sin(120,f2,-0.40139,0.0019326), 
                    zero,
                   ]
                   
            opt1_i = Waveform('Opt1_x', p_opt1_i)
            opt1_q = Waveform('Opt1_y', p_opt1_q)
            opt1_rf = Waveform('Opt1_rf', [Idle(opt1_i.duration)])
            
            f3 = (self.freq_5 - self.freq_center) / sampling
            f4 = (self.freq_2 - self.freq_center) / sampling
            p_opt_sim_i = []
            p_opt_sim_q = []
            
            file = 'D:/data/QuantumSim/luck2/QuantumSim/excited state/R-' + "%1.0f"%(18)
            datfile = file + '/pulse_' + "%1.0f"%(18) + 'step_8_Ite-' +  "%1.0f"%(1) + 'all.dat'
            fileHandle = open (datfile) 
            #read the cotend of the file
            datfilelines=fileHandle.read()
            exec datfilelines 
            fileHandle.close() 
            
            self.p_opt_i = p_opt_sim_i
            self.p_opt_q = p_opt_sim_q
            
            # rf pi/2 pulse
            Ref_rf = Sin(rf_time2, rf_freq/sampling, 0 ,self.amp_rf2)
            Ref_rf2 = Sin(rf_time2, rf_freq/sampling, np.pi/2 ,self.amp_rf2)
            #p['pi2_1_rf + 90'] = Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf)
            
            # readout sequence
            read_mw_i = Waveform('Read_mw_I', pi_2_i)
            read_mw_q = Waveform('Read_mw_Q', pi_2_q)
            read_mw_rf = Waveform('Read_mw_rf', [Idle(read_mw_i.duration)])
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('QuantumSim_FFT.SEQ')
            
            evo = Waveform('EVO.WFM', Idle(256 * 10))
            self.waves.append(evo)
           
            # DNP pulse sequence
            dnp_i = Waveform( 'DNP_I', pi_1_i + [Idle(100)] + pi_2_i + [Idle(rf_time + 2)])
            dnp_q = Waveform( 'DNP_Q', pi_1_q + [Idle(100)] + pi_2_q + [Idle(rf_time + 2)] )
            dnp_rf = Waveform( 'DNP_rf', [Idle(pi_1 + 2 + 100 + pi_2 + 2)] + [zero,Sin(rf_time, rf_freq/sampling, 0 ,self.amp_rf),zero])
            
            for i, t in enumerate(self.tau):              
              
                # Quantum Simulation Signal: Imaginary Part
                self.waves.append(dnp_i)
                self.waves.append(dnp_q)
                self.waves.append(dnp_rf)
                for q in range(repetitions):
                      self.main_seq.append(*self.waves[-3:], wait=True)
                # Opt pi pulse      
                self.waves.append(opt1_i)  
                self.waves.append(opt1_q)
                self.waves.append(opt1_rf)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # nuclear spin pi/2 pulse with different phase and nuclear spin readout pi/2 pulse with phase 0
                
                opt2_i = Waveform('Opt2_x', self.p_opt_i[i])
                
                name_i_im = 'qs_im_sup_i_%04i.WFM'%t
                name_q_im = 'qs_im_sup_q_%04i.WFM'%t
                name_rf_im = 'qs_im_sup_rf_%04i.WFM'%t
                
                sup_i_im = Waveform(name_i_im,[Idle(2 + Ref_rf.duration)] + self.p_opt_i[i] + [Idle(evo.duration)] + [Idle(2 + Ref_rf2.duration)])
                sup_q_im = Waveform(name_q_im,[Idle(2 + Ref_rf.duration)] + self.p_opt_q[i] + [Idle(evo.duration)] + [Idle(2 + Ref_rf2.duration)])
                sup_rf_im = Waveform(name_rf_im,[zero,Ref_rf,zero] + [Idle(opt2_i.duration)] + [Idle(evo.duration)] + [zero,Ref_rf2,zero])
                
                self.waves.append(sup_i_im)  
                self.waves.append(sup_q_im)
                self.waves.append(sup_rf_im)
                self.main_seq.append(*self.waves[-3:], wait=True) 
                
                # electron spin readout sequence
                self.waves.append(read_mw_i)
                self.waves.append(read_mw_q)
                self.waves.append(read_mw_rf)
                self.main_seq.append(*self.waves[-3:], wait=True)

            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('QuantumSim_FFT.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )       

    get_set_items = Pulsed.get_set_items + ['freq','freq_2','freq_3','freq_4','freq_5','vpp','amp_mw','amp_mw2','pi_1','pi_2','rf_freq','rf_time','rf_time2','amp_rf','amp_rf2','repetitions',
    'pumping_time','wait_time_pump','polaring_time','wait_time_pol']  
    
    traits_view = View(VGroup(HGroup(Item('load_button', show_label=False),
                                     Item('submit_button', show_label=False),
                                     Item('remove_button', show_label=False),
                                     Item('resubmit_button', show_label=False),
                                     Item('priority'),
                                     ),
                              HGroup(Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_3', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     Item('freq_4', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),  
                                     Item('freq_5', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),                                      
                                     Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=-90),
                                     
                                     ), 
                              HGroup(Item('vpp', width=-40), 
                                     Item('power', width=-40),
                                     Item('pi_1', width=-70),
                                     Item('amp_mw', width=-70),
                                     Item('pi_2', width=-70),
                                     Item('amp_mw2', width=-70),
                                    ),       
                              HGroup( 
                                      Item('rf_freq', width=-80),
                                      Item('amp_rf', width=-40),
                                      Item('rf_time', width=-80),
                                      Item('amp_rf2', width=-40),
                                      Item('rf_time2', width=-80),
                                      
                                    ),                                     
                              HGroup(Item('laser', width=-50),
                                     Item('wait', width=-50),
                                     Item('bin_width', width= -50, enabled_when='state != "run"'),
                                     Item('record_length', width= -50, enabled_when='state != "run"'),
                                     Item('polaring_time', width= -50),
                                     Item('wait_time_pol', width= -50),
                                     ),
                                     
                              HGroup(Item('tau_begin', width=-60),
                                     Item('tau_end', width=-60),
                                     Item('tau_delta', width= -60),
                                     Item('pumping_time', width= -50),
                                     Item('wait_time_pump', width= -50),
                                     Item('repetitions', width= -40),
                                    
                                     ),       

                              HGroup(Item('state', style='readonly'),
                                     Item('run_time', style='readonly', format_str='%.f', width=50),
                                     Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                     Item('expected_duration', style='readonly', editor=TextEditor(evaluate=float, format_func=lambda x:'%.f'%x), width=40),
                                     Item('progress', style='readonly'),
                                     Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),
                                     ),
                                                                         
                              ),
                       title='QuantumSim_FFTphase_ground',
                       )                       
"""    
class RF_DEER( Pulsed ):
    # Double-quantum Hahn-Echo s
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    start_time = Range(low=1., high=1e7, value=5e6, desc='start freq [Hz]', label='start freq [Hz]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e8, value=200e6, desc='end freq [ns]', label='end freq [Hz]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e8, value=1e6, desc='time freq [ns]', label='time freq [Hz]', mode='text', auto_set=False, enter_set=True)
    
    evo_time = Range(low=1., high=100000., value=40000, desc='hahn time', label='hahn time', mode='text', auto_set=False, enter_set=True)
    rf_time = Range(low=1., high=100000., value=100, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    pi2_1   = Range(low=1., high=100000., value=45.96, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=99.35, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        pi2_1=self.pi2_1
        sequence = []
        for t in tau:
            sub = [ 
                    (['mw'], pi2_1  ),
                    ([], self.evo_time ),
                    (['mw'], pi_1  ),
                    (['awgTrigger'], 100 ),
                    ([], self.evo_time-100),
                    (['mw'], pi2_1  ),
                    ([], 1000 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
            
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data','rf_time',
                         'pi_1', 'pi2_1','amp',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('amp', width=25),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi2_1', width=25),
                                         Item('pi_1', width=25),
                                         Item('rf_time', width=25),
                                         Item('evo_time', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='DEER Rf sweep', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):
        #Returns current state of a selection of traits.
        #Overwritten HasTraits.
        
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi_1', 'pi2_1', 'rf_time',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )

            rf_time = int(self.rf_time * sampling/1.0e9)

            
            

            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('RFSWEEP.SEQ')
                                 
            for t in self.tau:
                name_i='H_I_%04i.WFM' %t
                name_q='H_Q_%04i.WFM' %t
                name_rf='H_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, [Idle(rf_time+2)]) )
                self.waves.append(Waveform( name_q, [Idle(rf_time+2)]) )
                self.waves.append(Waveform( name_rf,[Idle(1)]+[Sin( rf_time, t/sampling, 0 ,self.amp)]+[Idle(1)] ) )
                self.main_seq.append(*self.waves[-3:], wait=True)
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFSWEEP.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )
        
        

    def run(self):
        self.offer_pause()
        PG.High([])
        FC.SetCycles(np.inf)
        FC.SetTime(np.inf)
        FC.SetDelay(0)
        FC.SetLevel(0.6, 0.6)
        FC.Configure(self.laser, self.bin_width, self.sequence_length)
        self.previous_time = 0
        self.previous_sweeps = 0
        self.previous_count_data = FC.GetData()
        self.prepare_awg()
        MW.CW(self.freq)
        MW.Power(self.power)
        MW.On()
        AWG.run()
        time.sleep(2.0)
        FC.Start()
        time.sleep(0.1)
        PG.Sequence(self.sequence, loop=True)

        start_time = time.time()

        while True:
            self.stop_request.wait(5.0)
            if self.stop_request.isSet():
                break
            self.elapsed_time = time.time() - start_time
            runtime, cycles = FC.GetState()
            sweeps = cycles / self.previous_count_data.shape[0]
            self.elapsed_sweeps = self.previous_sweeps + sweeps
            self.progress = int( 100 * self.elapsed_sweeps / self.sweeps ) 
            self.count_data = self.previous_count_data + FC.GetData()
            if self.elapsed_sweeps > self.sweeps:
                break
            self.offer_pause()

        FC.Halt()
        MW.Off()
        PG.High(['laser'])
        AWG.stop()
        self.state='idle'
        
        
class RF_Rabi( Pulsed ):
    # RF nutationS
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    start_time = Range(low=1., high=1e7, value=15, desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e8, value=1000, desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e8, value=5, desc='time time [ns]', label='time time [ns]', mode='text', auto_set=False, enter_set=True)
    
    evo_time = Range(low=1., high=100000., value=40000, desc='hahn time', label='hahn time', mode='text', auto_set=False, enter_set=True)
    #pi2_1   = Range(low=1., high=100000., value=45.96, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=99.35, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    

    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency ef [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        rf_freq = self.rf_freq
        pi_1=self.pi_1
        #pi_2=self.pi_2
        sequence = []
        for t in tau:
            sub = [ (['mw'], pi_1  ),
                    ([], 1e3 ),
                    (['awgTrigger'], 100 ),
                    ([], self.rf_time),
                    ([], 50e3 ),
                    (['mw'], pi_1  ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                ]
            sequence.extend(sub)
            '''
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * pi_1 + t*1.2 + 1500 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
            '''
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return 2 * len(self.tau)
            
    def _norm_intens_changed(self): # _overwrite norm_intens_changed to provide live update of fit
        l = len(self.tau)
        list_A=self.norm_intens[0::2]
        list_B=self.norm_intens[1::2]
        self.line_plot_data.set_data('y', list_A)
        self.line_plot_data.set_data('yp', list_B)
        
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.plot(('x','yp'), style='line', color='green')
        plot.index_axis.title = 'time [ns]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot

    def _line_plot_data_default(self):
        x = self.tau
 
        if self.norm_intens is not None:
            y  = self.norm_intens[0::2]
            yp = self.norm_intens[1::2]
        else:
            y  = np.zeros(x.shape)
            yp = np.zeros(x.shape)
        return ArrayPlotData(x=x, y=y, yp=yp)   
        
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)

    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'rf_freq', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi_1', 'pi2_1','amp',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('freq_2', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('amp', width=25),
                                         Item('rf_freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35)),
                                       
                                 HGroup( Item('pi_1', width=25),
                                         Item('power', width=10)),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='RF Rabi', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):
        #Returns current state of a selection of traits.
        #Overwritten HasTraits.
        
        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','rf_freq','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi_1', 'pi2_1', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            rf_freq = self.rf_freq
            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            p['pi - 0']     = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, 0 ,1)
            p['pi - 90']    = Sin( pi_1, (self.freq_2 - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            mod = Idle(0)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            pi_2_i = [zero,p['pi - 0'],zero]
            pi_2_q = [zero,p['pi - 90'],zero]
            
            # Waveforms
            self.waves = []
            sub_seq = []
            self.main_seq = Sequence('RFRabi.SEQ')
            
            sup_x = Waveform('Sup1_x', pi_1_i)
            sup_y = Waveform('Sup1_y', pi_1_q)
            self.waves.append(supx)
            self.waves.append(supy)
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
                                 
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+p1_1_i, t_0)
                map_y = Waveform(name_y, [mod]+p1_1_q , t_0)
                self.waves.append(map_x)
                self.waves.append(map_y)
                
                #name_i='A_I_%04i.WFM' %t
                #name_q='A_Q_%04i.WFM' %t
                #name_rf='A_RF_%04i.WFM' %t
                #self.waves.append(Waveform( name_i, pi_1_i+[Idle(100)]+[Idle(t*1.2+1000)] + pi_1_i) )
                #self.waves.append(Waveform( name_q, pi_1_q+[Idle(100)]+[Idle(t*1.2+1000)] + pi_1_q) )
                #self.waves.append(Waveform( name_rf,[Idle(pi_1+2)]+[Idle(40100)]+[Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)]+[Idle(1000+pi_1+2)] ) )
                #self.main_seq.append(*self.waves[-3:],wait=True)
                
                name_i='B_I_%04i.WFM' %t
                name_q='B_Q_%04i.WFM' %t
                name_rf='B_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, pi_2_i+[Idle(100)]+[Idle(t*1.2+1000)] + pi_2_i) )
                self.waves.append(Waveform( name_q, pi_2_q+[Idle(100)]+[Idle(t*1.2+1000)] + pi_2_q) )
                self.waves.append(Waveform( name_rf,[Idle(pi_1+2)]+[Idle(100)]+[Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)]+[Idle(1000+pi_1+2)] ) )
                self.main_seq.append(*self.waves[-3:],wait=True)
            
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('RFRabi.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )
        
  
class Sing_FID( Pulsed ):
    #FID 
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    start_time = Range(low=1., high=1e7, value=15, desc='start time [ns]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e8, value=1000, desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e8, value=5, desc='time time [ns]', label='time time [ns]', mode='text', auto_set=False, enter_set=True)
    
    evo_time = Range(low=1., high=100000., value=40000, desc='hahn time', label='hahn time', mode='text', auto_set=False, enter_set=True)
    #pi2_1   = Range(low=1., high=100000., value=45.96, desc='length of pi/2 pulse [ns]', label='pi/2 [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    pi2_1   = Range(low=1., high=100000., value=99.35, desc='length of pi pulse [ns]', label='half pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    

    #rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency ef [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        #rf_freq = self.rf_freq
        pi2_1=self.pi2_1
        #pi_2=self.pi_2
        sequence = []
        for t in tau:
            sub = [ (['awgTrigger'], 100 ),
                    ([], 2 * pi2_1 + t*1.2 + 500 ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
            sequence.extend(sub)
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        
    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)
            
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'rf_freq', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data',
                         'pi_1', 'pi2_1','amp',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('amp', width=25)),
                                 
                                 HGroup( Item('pi2_1', width=25),
                                         Item('power', width=10)),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='FID', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):

        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','rf_freq','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi_1', 'pi2_1', 
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi2_1 = int(self.pi2_1 * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi2_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi2_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)

            
            zero = Idle(1)
            mod = Idle(0)
            
            pi2_1_i = [zero,p['pi + 0'],zero]
            pi2_1_q = [zero,p['pi + 90'],zero]
            
            # Waveforms
            self.waves = []
            sub_seq = []
            self.main_seq = Sequence('FID.SEQ')
            
            sup_x = Waveform('Sup1_x', pi2_1_i)
            sup_y = Waveform('Sup1_y', pi2_1_q)
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
                                 
            for i, t in enumerate(self.tau):
                t_1 = t*1.2 - sup_x.stub
                repeat_1 = int(t_1 / 256)
                mod.duration = int(t_1 % 256)
                t_0 = sup_x.duration + repeat_1 * 256
                
                name_x = 'REF_X%04i.WFM' % i
                name_y = 'REF_Y%04i.WFM' % i
                
                map_x = Waveform(name_x, [mod]+pi2_1_i, t_0)
                map_y = Waveform(name_y, [mod]+pi2_1_q , t_0)
                self.waves.append(map_x)
                self.waves.append(map_y)
                
                name = 'DQH3_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y)
                sub_seq.append(evo, evo,repeat=repeat_1)
                sub_seq.append(map_x, map_y)
                AWG.upload(sub_seq)
      
                self.main_seq.append(sub_seq,wait=True)
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('FID.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )  



        
        
class RF_sweep_single( Pulsed ):
    # Single MW freq endorS
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq = pi3d.get_odmr().odmr_frequency\n')
    start_time = Range(low=1., high=1e7, value=100., desc='start freq [Hz]', label='start freq [Hz]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e8, value=300., desc='end freq [ns]', label='end freq [Hz]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e6, value=5., desc='time freq [ns]', label='time freq [Hz]', mode='text', auto_set=False, enter_set=True)

    rf_time = Range(low=1., high=100000., value=75, desc='rf_time', label='rf time', mode='text', auto_set=False, enter_set=True)
    pi_1   = Range(low=1., high=100000., value=49, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        sequence = []
        for t in tau:
            sub = [ (['mw'], pi_1  ),
                    ([], 1e3 ),
                    (['awgTrigger'], 100 ),
                    ([], self.rf_time),
                    ([], 70e3 ),
                    (['mw'], pi_1  ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                ]
            sequence.extend(sub)
                  
        '''
            sub = [ (['awgTrigger'], 100 ),
                    ([], pi_1 + self.rf_time + 10000),
                    ([], 80000 ),
                    (['awgTrigger'], 100 ),
                    ([], pi_1+200),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                  ]
    
            sequence.extend(sub)
                 '''
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.index_axis.title = 'frequency [Hz]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot    

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)
    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data','rf_time',
                         'pi_1', 'pi_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', '__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
       
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi_1', width=25),
                                         Item('rf_time', width=25),
                                         Item('amp', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='endor', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):

        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi_1', 'pi_2', 'rf_time',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            
            
            '''
            sup_x=Waveform('SUP1_X.WFM', pi_1_i)
            sup_y=Waveform('SUP1_Y.WFM', pi_1_q)
            sup_n=Waveform('SUP1_n.WFM', Idle(pi_1+2))
            self.waves.append(sup_x)
            self.waves.append(sup_y)
            self.waves.append(sup_n)
            
            evo = Waveform('EVO.WFM', Idle(256))
            self.waves.append(evo)
            
            
            t1= int(40e3 * 1.2 / 256) * 256
            repeat_1 = int(t1/256)

            
            sub_seq = []
            '''
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ENDOR.SEQ')
            
            d=1      
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, [Idle(rf_time)]) )
                self.waves.append(Waveform( name_q, [Idle(rf_time)]) )
                self.waves.append(Waveform( name_rf,[Sin( rf_time, t/sampling, 0 ,self.amp)]) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                '''
                rf = Sin( rf_time, t/sampling, 0 ,self.amp)
                
                t2 = t1+pi_1+2
                w_x=Waveform('SUP2_X.WFM', Idle(rf_time),t2)
                w_y=Waveform('SUP2_Y.WFM', Idle(rf_time),t2)
                w_n=Waveform('SUP2_n.WFM',rf,t2)
                self.waves.append(w_x)
                self.waves.append(w_y)
                self.waves.append(w_n)
                
                t3 = 2*t1+pi_1+2 + rf_time
                map_x=Waveform('SUP3_X.WFM', pi_1_i,t3)
                map_y=Waveform('SUP3_Y.WFM', pi_1_q,t3)
                map_n=Waveform('SUP3_n.WFM', Idle(pi_1+2),t3)
                self.waves.append(map_x)
                self.waves.append(map_y)
                self.waves.append(map_n)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y,sup_n)
                sub_seq.append(evo, evo, evo,repeat=repeat_1)
                sub_seq.append(w_x, w_y, w_n)
                sub_seq.append(evo, evo, evo,repeat=repeat_1)
                sub_seq.append(map_x, map_y, map_n)
                AWG.upload(sub_seq)
                
                self.main_seq.append(sub_seq,wait=True)
                '''
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ENDOR.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )
        
class RF_Rabi_single( Pulsed ):

    show_fit = Bool(False, label='show fit')

    fit_parameters = Property( trait=Array, depends_on='norm_intens' )

    rabi_period = Property( trait=Float, depends_on='fit_parameters', label='period' )
    rabi_offset = Property( trait=Float, depends_on='fit_parameters', label='offset' )
    rabi_contrast = Property( trait=Float, depends_on='fit_parameters', label='contrast' )
    t_pi2 = Property( trait=Float, depends_on='fit_parameters', label='pi/2' )
    t_pi = Property( trait=Float, depends_on='fit_parameters', label='pi' )
    t_3pi2 = Property( trait=Float, depends_on='fit_parameters', label='3pi/2' )
    def __init__(self):
         
        SingletonHasTraits.__init__(self)
        self.edit_traits()
    
    import_code = Code('self.freq_center = pi3d.get_odmr().odmr_frequency\n')
    start_time = Range(low=1., high=1e7, value=100., desc='start time [Hz]', label='start time [ns]', mode='text', auto_set=False, enter_set=True)
    end_time = Range(low=1., high=2e8, value=300., desc='end time [ns]', label='end time [ns]', mode='text', auto_set=False, enter_set=True)
    time_step = Range(low=1., high=1e6, value=5., desc='time freq [ns]', label='time freq [Hz]', mode='text', auto_set=False, enter_set=True)

    pi_1   = Range(low=1., high=100000., value=49, desc='length of pi pulse [ns]', label='pi [ns] 1.trans', mode='text', auto_set=False, enter_set=True)
    rf_freq = Range(low=1, high=20e9, value=7.2e6, desc='frequency ef [Hz]', label='rf freq [Hz]', mode='text', auto_set=False, enter_set=True)    
    #pi_2   = Range(low=1., high=100000., value=42, desc='length of pi pulse [ns] second transition', label='pi [ns] 2.trans', mode='text', auto_set=False, enter_set=True)
    
    #freq_2 = Range(low=1, high=20e9, value=2975697916.89, desc='frequency second transition [Hz]', label='freq 2. trans [Hz]', mode='text', auto_set=False, enter_set=True)    
    
    @cached_property
    def _get_sequence(self):
        tau = self.tau
        laser = self.laser
        wait = self.wait
        pi_1=self.pi_1
        sequence = []
        for t in tau:
            sub = [ (['mw'], pi_1  ),
                    ([], 1e3 ),
                    (['awgTrigger'], 100 ),
                    ([], t),
                    ([], 50e3 ),
                    (['mw'], pi_1  ),
                    (['laser', 'trigger' ], laser ),
                    ([], wait )
                ]
            sequence.extend(sub)
                  
        return sequence
    
    @cached_property
    def _get_sequence_length(self):
        return len(self.tau)
        
    def _line_plot_default(self):
        plot = Plot(self.line_plot_data, padding_left=60)
        plot.plot(('x','y'), style='line', color='blue')
        plot.index_axis.title = 'frequency [Hz]'
        plot.value_axis.title = 'normalized intensity'
        plot.tools.append(PanTool(plot))
        plot.overlays.append(ZoomTool(plot))
        return plot    

    def save_line_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_line_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.line_plot, filename)

    def save_matrix_plot(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi_matrix_plot.png
        else:
            filename = pi3d.get_filename(filename)
        self.save_figure(self.matrix_plot, filename)
        
    def _show_fit_changed(self):
        plot = self.line_plot
        if self.show_fit == False:
            while len(plot.components) > 1:
                plot.remove(plot.components[-1])
        else:
            self.line_plot_data.set_data('fit', Fit.Cosinus(*self.fit_parameters)(self.tau))
            plot.plot(('x','fit'), style='line', color='red')
        plot.request_redraw()

    @cached_property
    def _get_fit_parameters(self):
        if self.norm_intens is None:
            return None
        else:
            y_offset=self.norm_intens.mean()

            x = self.tau
            y = self.norm_intens - y_offset

            try:
                p = Fit.Fit(x, y, Fit.CosinusNoOffset, Fit.CosinusNoOffsetEstimator)
            except:
                return None
            if p[0] < 0:
                p[0] = -p[0]
                p[2] =  ( ( p[2]/p[1] + 0.5 ) % 1 ) * p[1]
                try:
                    p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)
                except:
                    return None
                #        if p[2] / p[1] < 0:
#            p[2] = (p[2] / p[1] + 1) * p[1]
#            p = Fit.Fit(x, y, Fit.CosinusNoOffset, p)

            p = (p[0], p[1], p[2], y_offset)
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            while(p[2]>0.5*p[1]):
                p[2] -= p[1]
            try:
                p = Fit.Fit(x, self.norm_intens, Fit.Cosinus, p)
            except:
                return None
            return p

    @cached_property
    def _get_rabi_period(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[1]

    @cached_property
    def _get_rabi_offset(self):
        if self.fit_parameters is None:
            return np.nan
        return self.fit_parameters[2]

    @cached_property
    def _get_rabi_contrast(self):
        if self.fit_parameters is None:
            return np.nan
        return 100*self.fit_parameters[0]/self.fit_parameters[3]

    @cached_property
    def _get_t_pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.25*T + x0

    @cached_property
    def _get_t_pi(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.5*T + x0
    
    @cached_property
    def _get_t_3pi2(self):
        if self.fit_parameters is None:
            return np.nan
        a, T, x0, c = self.fit_parameters
        return 0.75*T+x0
    
    
    def save_data(self, filename=None):
        if filename is None:
            filename = pi3d.get_filename()+_rabi.pyd
        else:
            filename = pi3d.get_filename(filename)
        self.dump_items(['freq', 'freq_2', 'freq_center', 'power', 'start_time', 'end_time', 'time_step',
                         'sweeps', 'elapsed_sweeps', 'elapsed_time', 'progress',
                         'laser', 'wait', 'bin_width', 'count_data','rf_time',
                         'pi_1', 'pi_2',
                         'time_window_width', 'time_window_offset_signal',
                         'time_window_offset_normalize', 'time_window_search_range',
                         'tau', 'pulse_profile', 'norm_intens', 
                         'rabi_period', 'rabi_offset', 'rabi_contrast',
                         't_pi2', 't_pi', 't_3pi2','__doc__'], filename)
    
    view = View( Tabbed( VGroup( HGroup( Item('import_button', show_label=False, width=20),
                                         Item('freq_center', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%e'%x), width=35),
                                         Item('power', width=10)),
                                 HGroup( Item('pi_1', width=25),
                                         Item('rf_freq', width=25),
                                         Item('amp', width=25),),
                                 HGroup( Item('load_button', show_label=False, width=20),
                                         Item('start_time', width=30),
                                         Item('end_time', width=30),
                                         Item('time_step', width=30),),
                                 HGroup( Item('state', style = 'custom', show_label=False, width = 80,
                                              editor=EnumEditor(values={'idle':'1:idle','run':'2:run',},cols=2),),
                                         Item('sweeps', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:'%.3e'%x), width=40),
                                         Item('elapsed_time', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.f'%x), width=40),),
                                 HGroup( Item('show_fit'),
                                         Item('rabi_contrast', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.1f%%'%x), width=40),
                                         Item('rabi_period', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_pi', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('t_3pi2', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),
                                         Item('rabi_offset', style='readonly', editor=TextEditor(auto_set=False, enter_set=True, evaluate=float, format_func=lambda x:' %.2f'%x), width=40),),
                                 Item('line_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 Item('matrix_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 label = 'data' ),
                         VGroup( HGroup( Item('laser', width=40),
                                         Item('wait', width=40),
                                         Item('bin_width', width=40),),
                                 Item('import_code'),
                                 label = 'settings'),
                         VGroup( Item('pulse_profile_plot', editor=ComponentEditor(), show_label=False, width=500, height=300, resizable=True),
                                 HGroup( Item('time_window_width'),
                                         Item('time_window_offset_signal'),
                                         Item('time_window_offset_normalize'),
                                         Item('time_window_search_range'),), # add pulse profile plot here 
                                 label = 'analysis'),),
                 title='RF Rabi', width=900, height=800, buttons=['OK'], resizable=True, #x=2000, y=250,
                 )
    
    def __getstate__(self):

        state = SingletonHasTraits.__getstate__(self)
        state_trunc = {}        
        for key in ['freq','freq_2','freq_center', 'power', 'start_time', 'end_time', 'time_step',
                    'run_time', 'cycles', 'elapsed_time', 'progress',
                    'laser', 'wait', 'bin_width', 'count_data', 
                    'pi_1', 'pi_2', 'rf_time',
                    'time_window_width', 'time_window_offset_signal',
                    'time_window_offset_normalize', 'time_window_search_range',
                    'is_tracker_client', '__traits_version__']:
            if state.has_key(key):
                state_trunc[key] = state[key]
        return state_trunc

    def prepare_awg(self):
        sampling = 1.2e9
        if self.reload:
            AWG.stop()
            AWG.set_output( 0b0000 )
            
            rf_freq = self.rf_freq
            
            pi_1 = int(self.pi_1 * sampling/1.0e9)
            #rf_time = int(self.rf_time * sampling/1.0e9)

            # Pulses
            p = {}
            # ms= 0 <> ms = +1
            p['pi + 0']     = Sin( pi_1, (self.freq - self.freq_center)/sampling, 0 ,1)
            p['pi + 90']    = Sin( pi_1, (self.freq - self.freq_center)/sampling, np.pi/2 ,1)
            
            zero = Idle(1)
            
            pi_1_i = [zero,p['pi + 0'],zero]
            pi_1_q = [zero,p['pi + 90'],zero]
            
            # Waveforms
            self.waves = []
            self.main_seq = Sequence('ENDOR.SEQ')
            
            d=1      
            for t in self.tau:
                name_i='A_I_%04i.WFM' %t
                name_q='A_Q_%04i.WFM' %t
                name_rf='A_RF_%04i.WFM' %t
                self.waves.append(Waveform( name_i, [Idle(t*1.2)]) )
                self.waves.append(Waveform( name_q, [Idle(t*1.2)]) )
                self.waves.append(Waveform( name_rf,[Sin( t*1.2, rf_freq/sampling, 0 ,self.amp)]) )
                self.main_seq.append(*self.waves[-3:], wait=True)
                
                '''
                rf = Sin( rf_time, t/sampling, 0 ,self.amp)
                
                t2 = t1+pi_1+2
                w_x=Waveform('SUP2_X.WFM', Idle(rf_time),t2)
                w_y=Waveform('SUP2_Y.WFM', Idle(rf_time),t2)
                w_n=Waveform('SUP2_n.WFM',rf,t2)
                self.waves.append(w_x)
                self.waves.append(w_y)
                self.waves.append(w_n)
                
                t3 = 2*t1+pi_1+2 + rf_time
                map_x=Waveform('SUP3_X.WFM', pi_1_i,t3)
                map_y=Waveform('SUP3_Y.WFM', pi_1_q,t3)
                map_n=Waveform('SUP3_n.WFM', Idle(pi_1+2),t3)
                self.waves.append(map_x)
                self.waves.append(map_y)
                self.waves.append(map_n)
                
                name = 'DQH_12_%04i.SEQ' % i
                sub_seq=Sequence(name)
                sub_seq.append(sup_x, sup_y,sup_n)
                sub_seq.append(evo, evo, evo,repeat=repeat_1)
                sub_seq.append(w_x, w_y, w_n)
                sub_seq.append(evo, evo, evo,repeat=repeat_1)
                sub_seq.append(map_x, map_y, map_n)
                AWG.upload(sub_seq)
                
                self.main_seq.append(sub_seq,wait=True)
                '''
                
            for w in self.waves:
                w.join()
            AWG.upload(self.waves)
            AWG.upload(self.main_seq)
            AWG.tell('*WAI')
            AWG.load('ENDOR.SEQ')
        AWG.set_vpp(0.6)
        AWG.set_sample( sampling/1.0e9 )
        AWG.set_mode('S')
        AWG.set_output( 0b0111 )
        

"""