# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TimeTagger', [dirname(__file__)])
        except ImportError:
            import _TimeTagger
            return _TimeTagger
        if fp is not None:
            try:
                _mod = imp.load_module('_TimeTagger', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TimeTagger = swig_import_helper()
    del swig_import_helper
else:
    import _TimeTagger
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Tag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["overflow"] = _TimeTagger.Tag_overflow_set
    __swig_getmethods__["overflow"] = _TimeTagger.Tag_overflow_get
    if _newclass:overflow = _swig_property(_TimeTagger.Tag_overflow_get, _TimeTagger.Tag_overflow_set)
    __swig_setmethods__["chan"] = _TimeTagger.Tag_chan_set
    __swig_getmethods__["chan"] = _TimeTagger.Tag_chan_get
    if _newclass:chan = _swig_property(_TimeTagger.Tag_chan_get, _TimeTagger.Tag_chan_set)
    __swig_setmethods__["time"] = _TimeTagger.Tag_time_set
    __swig_getmethods__["time"] = _TimeTagger.Tag_time_get
    if _newclass:time = _swig_property(_TimeTagger.Tag_time_get, _TimeTagger.Tag_time_set)
    def __init__(self): 
        this = _TimeTagger.new_Tag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Tag
    __del__ = lambda self : None;
Tag_swigregister = _TimeTagger.Tag_swigregister
Tag_swigregister(Tag)
cvar = _TimeTagger.cvar
bitfilename = cvar.bitfilename
bytes_per_word = cvar.bytes_per_word
workers = cvar.workers
channels = cvar.channels
distribution = cvar.distribution
picosecounds = cvar.picosecounds
blocksize = cvar.blocksize
ibuffersize = cvar.ibuffersize
obuffersize = cvar.obuffersize

class _Tagger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Tagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Tagger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getTagger"] = lambda x: _TimeTagger._Tagger_getTagger
    if _newclass:getTagger = staticmethod(_TimeTagger._Tagger_getTagger)
    def addIterator(self, *args): return _TimeTagger._Tagger_addIterator(self, *args)
    def registerChannel(self, *args): return _TimeTagger._Tagger_registerChannel(self, *args)
    def unregisterChannel(self, *args): return _TimeTagger._Tagger_unregisterChannel(self, *args)
    __swig_getmethods__["getDistributionCount"] = lambda x: _TimeTagger._Tagger_getDistributionCount
    if _newclass:getDistributionCount = staticmethod(_TimeTagger._Tagger_getDistributionCount)
    __swig_getmethods__["setSerial"] = lambda x: _TimeTagger._Tagger_setSerial
    if _newclass:setSerial = staticmethod(_TimeTagger._Tagger_setSerial)
    def iter(self, *args): return _TimeTagger._Tagger_iter(self, *args)
_Tagger_swigregister = _TimeTagger._Tagger_swigregister
_Tagger_swigregister(_Tagger)

def _Tagger_getTagger(*args):
  return _TimeTagger._Tagger_getTagger(*args)
_Tagger_getTagger = _TimeTagger._Tagger_getTagger

def _Tagger_getDistributionCount(*args):
  return _TimeTagger._Tagger_getDistributionCount(*args)
_Tagger_getDistributionCount = _TimeTagger._Tagger_getDistributionCount

def _Tagger_setSerial(*args):
  return _TimeTagger._Tagger_setSerial(*args)
_Tagger_setSerial = _TimeTagger._Tagger_setSerial

class _Iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TimeTagger.delete__Iterator
    __del__ = lambda self : None;
    def _next(self, *args): return _TimeTagger._Iterator__next(self, *args)
    def start(self): return _TimeTagger._Iterator_start(self)
    def stop(self): return _TimeTagger._Iterator_stop(self)
_Iterator_swigregister = _TimeTagger._Iterator_swigregister
_Iterator_swigregister(_Iterator)

class _Worker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Worker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Worker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new__Worker(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete__Worker
    __del__ = lambda self : None;
    def terminate(self): return _TimeTagger._Worker_terminate(self)
    __swig_setmethods__["ibuffer"] = _TimeTagger._Worker_ibuffer_set
    __swig_getmethods__["ibuffer"] = _TimeTagger._Worker_ibuffer_get
    if _newclass:ibuffer = _swig_property(_TimeTagger._Worker_ibuffer_get, _TimeTagger._Worker_ibuffer_set)
    __swig_setmethods__["ifull_usage"] = _TimeTagger._Worker_ifull_usage_set
    __swig_getmethods__["ifull_usage"] = _TimeTagger._Worker_ifull_usage_get
    if _newclass:ifull_usage = _swig_property(_TimeTagger._Worker_ifull_usage_get, _TimeTagger._Worker_ifull_usage_set)
    __swig_setmethods__["obuffer"] = _TimeTagger._Worker_obuffer_set
    __swig_getmethods__["obuffer"] = _TimeTagger._Worker_obuffer_get
    if _newclass:obuffer = _swig_property(_TimeTagger._Worker_obuffer_get, _TimeTagger._Worker_obuffer_set)
    __swig_setmethods__["obuffer_usage"] = _TimeTagger._Worker_obuffer_usage_set
    __swig_getmethods__["obuffer_usage"] = _TimeTagger._Worker_obuffer_usage_get
    if _newclass:obuffer_usage = _swig_property(_TimeTagger._Worker_obuffer_usage_get, _TimeTagger._Worker_obuffer_usage_set)
    __swig_setmethods__["time"] = _TimeTagger._Worker_time_set
    __swig_getmethods__["time"] = _TimeTagger._Worker_time_get
    if _newclass:time = _swig_property(_TimeTagger._Worker_time_get, _TimeTagger._Worker_time_set)
_Worker_swigregister = _TimeTagger._Worker_swigregister
_Worker_swigregister(_Worker)

class _Iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Iter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TimeTagger.new__Iter()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["next"] = _TimeTagger._Iter_next_set
    __swig_getmethods__["next"] = _TimeTagger._Iter_next_get
    if _newclass:next = _swig_property(_TimeTagger._Iter_next_get, _TimeTagger._Iter_next_set)
    __swig_setmethods__["iter"] = _TimeTagger._Iter_iter_set
    __swig_getmethods__["iter"] = _TimeTagger._Iter_iter_get
    if _newclass:iter = _swig_property(_TimeTagger._Iter_iter_get, _TimeTagger._Iter_iter_set)
    def getMutex(self): return _TimeTagger._Iter_getMutex(self)
    __swig_destroy__ = _TimeTagger.delete__Iter
    __del__ = lambda self : None;
_Iter_swigregister = _TimeTagger._Iter_swigregister
_Iter_swigregister(_Iter)

class Iterator(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Iterator
    __del__ = lambda self : None;
    def __iter__(self): return _TimeTagger.Iterator___iter__(self)
    def next(self): return _TimeTagger.Iterator_next(self)
    def size(self): return _TimeTagger.Iterator_size(self)
    def clear(self): return _TimeTagger.Iterator_clear(self)
Iterator_swigregister = _TimeTagger.Iterator_swigregister
Iterator_swigregister(Iterator)

class OverFlow(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverFlow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TimeTagger.new_OverFlow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_OverFlow
    __del__ = lambda self : None;
    def clear(self): return _TimeTagger.OverFlow_clear(self)
    __swig_setmethods__["overflows"] = _TimeTagger.OverFlow_overflows_set
    __swig_getmethods__["overflows"] = _TimeTagger.OverFlow_overflows_get
    if _newclass:overflows = _swig_property(_TimeTagger.OverFlow_overflows_get, _TimeTagger.OverFlow_overflows_set)
OverFlow_swigregister = _TimeTagger.OverFlow_swigregister
OverFlow_swigregister(OverFlow)

class Dump(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dump, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dump, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Dump(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Dump
    __del__ = lambda self : None;
    def clear(self): return _TimeTagger.Dump_clear(self)
Dump_swigregister = _TimeTagger.Dump_swigregister
Dump_swigregister(Dump)

class Chans(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chans, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Chans, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TimeTagger.new_Chans()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Chans
    __del__ = lambda self : None;
    def registerChannel(self, *args): return _TimeTagger.Chans_registerChannel(self, *args)
    def unregisterChannel(self, *args): return _TimeTagger.Chans_unregisterChannel(self, *args)
    def clear(self): return _TimeTagger.Chans_clear(self)
Chans_swigregister = _TimeTagger.Chans_swigregister
Chans_swigregister(Chans)

class Histogram(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Histogram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Histogram
    __del__ = lambda self : None;
    def start(self): return _TimeTagger.Histogram_start(self)
    def getData(self): return _TimeTagger.Histogram_getData(self)
    def clear(self): return _TimeTagger.Histogram_clear(self)
Histogram_swigregister = _TimeTagger.Histogram_swigregister
Histogram_swigregister(Histogram)

class Distribution(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distribution, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distribution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Distribution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Distribution
    __del__ = lambda self : None;
    def getData(self): return _TimeTagger.Distribution_getData(self)
    def clear(self): return _TimeTagger.Distribution_clear(self)
Distribution_swigregister = _TimeTagger.Distribution_swigregister
Distribution_swigregister(Distribution)
bins_per_clock = cvar.bins_per_clock

class _PulsedEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _PulsedEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _PulsedEdge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["edge"] = _TimeTagger._PulsedEdge_edge_set
    __swig_getmethods__["edge"] = _TimeTagger._PulsedEdge_edge_get
    if _newclass:edge = _swig_property(_TimeTagger._PulsedEdge_edge_get, _TimeTagger._PulsedEdge_edge_set)
    __swig_setmethods__["pulse"] = _TimeTagger._PulsedEdge_pulse_set
    __swig_getmethods__["pulse"] = _TimeTagger._PulsedEdge_pulse_get
    if _newclass:pulse = _swig_property(_TimeTagger._PulsedEdge_pulse_get, _TimeTagger._PulsedEdge_pulse_set)
    def __init__(self): 
        this = _TimeTagger.new__PulsedEdge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete__PulsedEdge
    __del__ = lambda self : None;
_PulsedEdge_swigregister = _TimeTagger._PulsedEdge_swigregister
_PulsedEdge_swigregister(_PulsedEdge)

class Pulsed(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pulsed, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pulsed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Pulsed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Pulsed
    __del__ = lambda self : None;
    def start(self): return _TimeTagger.Pulsed_start(self)
    def getData(self): return _TimeTagger.Pulsed_getData(self)
    def setMaxCounts(self, *args): return _TimeTagger.Pulsed_setMaxCounts(self, *args)
    def getCounts(self): return _TimeTagger.Pulsed_getCounts(self)
    def ready(self): return _TimeTagger.Pulsed_ready(self)
    def clear(self): return _TimeTagger.Pulsed_clear(self)
Pulsed_swigregister = _TimeTagger.Pulsed_swigregister
Pulsed_swigregister(Pulsed)

class CountBetweenMarkers(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountBetweenMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CountBetweenMarkers, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_CountBetweenMarkers(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_CountBetweenMarkers
    __del__ = lambda self : None;
    def clear(self): return _TimeTagger.CountBetweenMarkers_clear(self)
    def ready(self): return _TimeTagger.CountBetweenMarkers_ready(self)
    def getData(self, blocking = 0): return _TimeTagger.CountBetweenMarkers_getData(self, blocking)
CountBetweenMarkers_swigregister = _TimeTagger.CountBetweenMarkers_swigregister
CountBetweenMarkers_swigregister(CountBetweenMarkers)

class Counter(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Counter, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Counter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Counter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Counter
    __del__ = lambda self : None;
    def clear(self): return _TimeTagger.Counter_clear(self)
    def getData(self): return _TimeTagger.Counter_getData(self)
Counter_swigregister = _TimeTagger.Counter_swigregister
Counter_swigregister(Counter)

class Countrate(_Iterator):
    __swig_setmethods__ = {}
    for _s in [_Iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Countrate, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Countrate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TimeTagger.new_Countrate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TimeTagger.delete_Countrate
    __del__ = lambda self : None;
    def getData(self): return _TimeTagger.Countrate_getData(self)
    def clear(self): return _TimeTagger.Countrate_clear(self)
Countrate_swigregister = _TimeTagger.Countrate_swigregister
Countrate_swigregister(Countrate)



